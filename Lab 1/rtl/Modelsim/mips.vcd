$date
	Fri Jan 28 01:07:19 2022
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module mips_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$var integer 32 # i $end

$scope module mips $end
$var wire 1 $ clock $end
$var wire 1 % reset $end
$var wire 1 & instruction [31] $end
$var wire 1 ' instruction [30] $end
$var wire 1 ( instruction [29] $end
$var wire 1 ) instruction [28] $end
$var wire 1 * instruction [27] $end
$var wire 1 + instruction [26] $end
$var wire 1 , instruction [25] $end
$var wire 1 - instruction [24] $end
$var wire 1 . instruction [23] $end
$var wire 1 / instruction [22] $end
$var wire 1 0 instruction [21] $end
$var wire 1 1 instruction [20] $end
$var wire 1 2 instruction [19] $end
$var wire 1 3 instruction [18] $end
$var wire 1 4 instruction [17] $end
$var wire 1 5 instruction [16] $end
$var wire 1 6 instruction [15] $end
$var wire 1 7 instruction [14] $end
$var wire 1 8 instruction [13] $end
$var wire 1 9 instruction [12] $end
$var wire 1 : instruction [11] $end
$var wire 1 ; instruction [10] $end
$var wire 1 < instruction [9] $end
$var wire 1 = instruction [8] $end
$var wire 1 > instruction [7] $end
$var wire 1 ? instruction [6] $end
$var wire 1 @ instruction [5] $end
$var wire 1 A instruction [4] $end
$var wire 1 B instruction [3] $end
$var wire 1 C instruction [2] $end
$var wire 1 D instruction [1] $end
$var wire 1 E instruction [0] $end
$var wire 1 F pc4 [31] $end
$var wire 1 G pc4 [30] $end
$var wire 1 H pc4 [29] $end
$var wire 1 I pc4 [28] $end
$var wire 1 J pc4 [27] $end
$var wire 1 K pc4 [26] $end
$var wire 1 L pc4 [25] $end
$var wire 1 M pc4 [24] $end
$var wire 1 N pc4 [23] $end
$var wire 1 O pc4 [22] $end
$var wire 1 P pc4 [21] $end
$var wire 1 Q pc4 [20] $end
$var wire 1 R pc4 [19] $end
$var wire 1 S pc4 [18] $end
$var wire 1 T pc4 [17] $end
$var wire 1 U pc4 [16] $end
$var wire 1 V pc4 [15] $end
$var wire 1 W pc4 [14] $end
$var wire 1 X pc4 [13] $end
$var wire 1 Y pc4 [12] $end
$var wire 1 Z pc4 [11] $end
$var wire 1 [ pc4 [10] $end
$var wire 1 \ pc4 [9] $end
$var wire 1 ] pc4 [8] $end
$var wire 1 ^ pc4 [7] $end
$var wire 1 _ pc4 [6] $end
$var wire 1 ` pc4 [5] $end
$var wire 1 a pc4 [4] $end
$var wire 1 b pc4 [3] $end
$var wire 1 c pc4 [2] $end
$var wire 1 d pc4 [1] $end
$var wire 1 e pc4 [0] $end
$var wire 1 f aluop [1] $end
$var wire 1 g aluop [0] $end
$var wire 1 h register_rs [31] $end
$var wire 1 i register_rs [30] $end
$var wire 1 j register_rs [29] $end
$var wire 1 k register_rs [28] $end
$var wire 1 l register_rs [27] $end
$var wire 1 m register_rs [26] $end
$var wire 1 n register_rs [25] $end
$var wire 1 o register_rs [24] $end
$var wire 1 p register_rs [23] $end
$var wire 1 q register_rs [22] $end
$var wire 1 r register_rs [21] $end
$var wire 1 s register_rs [20] $end
$var wire 1 t register_rs [19] $end
$var wire 1 u register_rs [18] $end
$var wire 1 v register_rs [17] $end
$var wire 1 w register_rs [16] $end
$var wire 1 x register_rs [15] $end
$var wire 1 y register_rs [14] $end
$var wire 1 z register_rs [13] $end
$var wire 1 { register_rs [12] $end
$var wire 1 | register_rs [11] $end
$var wire 1 } register_rs [10] $end
$var wire 1 ~ register_rs [9] $end
$var wire 1 !! register_rs [8] $end
$var wire 1 "! register_rs [7] $end
$var wire 1 #! register_rs [6] $end
$var wire 1 $! register_rs [5] $end
$var wire 1 %! register_rs [4] $end
$var wire 1 &! register_rs [3] $end
$var wire 1 '! register_rs [2] $end
$var wire 1 (! register_rs [1] $end
$var wire 1 )! register_rs [0] $end
$var wire 1 *! register_rt [31] $end
$var wire 1 +! register_rt [30] $end
$var wire 1 ,! register_rt [29] $end
$var wire 1 -! register_rt [28] $end
$var wire 1 .! register_rt [27] $end
$var wire 1 /! register_rt [26] $end
$var wire 1 0! register_rt [25] $end
$var wire 1 1! register_rt [24] $end
$var wire 1 2! register_rt [23] $end
$var wire 1 3! register_rt [22] $end
$var wire 1 4! register_rt [21] $end
$var wire 1 5! register_rt [20] $end
$var wire 1 6! register_rt [19] $end
$var wire 1 7! register_rt [18] $end
$var wire 1 8! register_rt [17] $end
$var wire 1 9! register_rt [16] $end
$var wire 1 :! register_rt [15] $end
$var wire 1 ;! register_rt [14] $end
$var wire 1 <! register_rt [13] $end
$var wire 1 =! register_rt [12] $end
$var wire 1 >! register_rt [11] $end
$var wire 1 ?! register_rt [10] $end
$var wire 1 @! register_rt [9] $end
$var wire 1 A! register_rt [8] $end
$var wire 1 B! register_rt [7] $end
$var wire 1 C! register_rt [6] $end
$var wire 1 D! register_rt [5] $end
$var wire 1 E! register_rt [4] $end
$var wire 1 F! register_rt [3] $end
$var wire 1 G! register_rt [2] $end
$var wire 1 H! register_rt [1] $end
$var wire 1 I! register_rt [0] $end
$var wire 1 J! sign_extend [31] $end
$var wire 1 K! sign_extend [30] $end
$var wire 1 L! sign_extend [29] $end
$var wire 1 M! sign_extend [28] $end
$var wire 1 N! sign_extend [27] $end
$var wire 1 O! sign_extend [26] $end
$var wire 1 P! sign_extend [25] $end
$var wire 1 Q! sign_extend [24] $end
$var wire 1 R! sign_extend [23] $end
$var wire 1 S! sign_extend [22] $end
$var wire 1 T! sign_extend [21] $end
$var wire 1 U! sign_extend [20] $end
$var wire 1 V! sign_extend [19] $end
$var wire 1 W! sign_extend [18] $end
$var wire 1 X! sign_extend [17] $end
$var wire 1 Y! sign_extend [16] $end
$var wire 1 Z! sign_extend [15] $end
$var wire 1 [! sign_extend [14] $end
$var wire 1 \! sign_extend [13] $end
$var wire 1 ]! sign_extend [12] $end
$var wire 1 ^! sign_extend [11] $end
$var wire 1 _! sign_extend [10] $end
$var wire 1 `! sign_extend [9] $end
$var wire 1 a! sign_extend [8] $end
$var wire 1 b! sign_extend [7] $end
$var wire 1 c! sign_extend [6] $end
$var wire 1 d! sign_extend [5] $end
$var wire 1 e! sign_extend [4] $end
$var wire 1 f! sign_extend [3] $end
$var wire 1 g! sign_extend [2] $end
$var wire 1 h! sign_extend [1] $end
$var wire 1 i! sign_extend [0] $end
$var wire 1 j! wreg_rd [4] $end
$var wire 1 k! wreg_rd [3] $end
$var wire 1 l! wreg_rd [2] $end
$var wire 1 m! wreg_rd [1] $end
$var wire 1 n! wreg_rd [0] $end
$var wire 1 o! wreg_rt [4] $end
$var wire 1 p! wreg_rt [3] $end
$var wire 1 q! wreg_rt [2] $end
$var wire 1 r! wreg_rt [1] $end
$var wire 1 s! wreg_rt [0] $end
$var wire 1 t! alu_result [31] $end
$var wire 1 u! alu_result [30] $end
$var wire 1 v! alu_result [29] $end
$var wire 1 w! alu_result [28] $end
$var wire 1 x! alu_result [27] $end
$var wire 1 y! alu_result [26] $end
$var wire 1 z! alu_result [25] $end
$var wire 1 {! alu_result [24] $end
$var wire 1 |! alu_result [23] $end
$var wire 1 }! alu_result [22] $end
$var wire 1 ~! alu_result [21] $end
$var wire 1 !" alu_result [20] $end
$var wire 1 "" alu_result [19] $end
$var wire 1 #" alu_result [18] $end
$var wire 1 $" alu_result [17] $end
$var wire 1 %" alu_result [16] $end
$var wire 1 &" alu_result [15] $end
$var wire 1 '" alu_result [14] $end
$var wire 1 (" alu_result [13] $end
$var wire 1 )" alu_result [12] $end
$var wire 1 *" alu_result [11] $end
$var wire 1 +" alu_result [10] $end
$var wire 1 ," alu_result [9] $end
$var wire 1 -" alu_result [8] $end
$var wire 1 ." alu_result [7] $end
$var wire 1 /" alu_result [6] $end
$var wire 1 0" alu_result [5] $end
$var wire 1 1" alu_result [4] $end
$var wire 1 2" alu_result [3] $end
$var wire 1 3" alu_result [2] $end
$var wire 1 4" alu_result [1] $end
$var wire 1 5" alu_result [0] $end
$var wire 1 6" branch_addr [31] $end
$var wire 1 7" branch_addr [30] $end
$var wire 1 8" branch_addr [29] $end
$var wire 1 9" branch_addr [28] $end
$var wire 1 :" branch_addr [27] $end
$var wire 1 ;" branch_addr [26] $end
$var wire 1 <" branch_addr [25] $end
$var wire 1 =" branch_addr [24] $end
$var wire 1 >" branch_addr [23] $end
$var wire 1 ?" branch_addr [22] $end
$var wire 1 @" branch_addr [21] $end
$var wire 1 A" branch_addr [20] $end
$var wire 1 B" branch_addr [19] $end
$var wire 1 C" branch_addr [18] $end
$var wire 1 D" branch_addr [17] $end
$var wire 1 E" branch_addr [16] $end
$var wire 1 F" branch_addr [15] $end
$var wire 1 G" branch_addr [14] $end
$var wire 1 H" branch_addr [13] $end
$var wire 1 I" branch_addr [12] $end
$var wire 1 J" branch_addr [11] $end
$var wire 1 K" branch_addr [10] $end
$var wire 1 L" branch_addr [9] $end
$var wire 1 M" branch_addr [8] $end
$var wire 1 N" branch_addr [7] $end
$var wire 1 O" branch_addr [6] $end
$var wire 1 P" branch_addr [5] $end
$var wire 1 Q" branch_addr [4] $end
$var wire 1 R" branch_addr [3] $end
$var wire 1 S" branch_addr [2] $end
$var wire 1 T" branch_addr [1] $end
$var wire 1 U" branch_addr [0] $end
$var wire 1 V" wreg_address [4] $end
$var wire 1 W" wreg_address [3] $end
$var wire 1 X" wreg_address [2] $end
$var wire 1 Y" wreg_address [1] $end
$var wire 1 Z" wreg_address [0] $end
$var wire 1 [" read_data [31] $end
$var wire 1 \" read_data [30] $end
$var wire 1 ]" read_data [29] $end
$var wire 1 ^" read_data [28] $end
$var wire 1 _" read_data [27] $end
$var wire 1 `" read_data [26] $end
$var wire 1 a" read_data [25] $end
$var wire 1 b" read_data [24] $end
$var wire 1 c" read_data [23] $end
$var wire 1 d" read_data [22] $end
$var wire 1 e" read_data [21] $end
$var wire 1 f" read_data [20] $end
$var wire 1 g" read_data [19] $end
$var wire 1 h" read_data [18] $end
$var wire 1 i" read_data [17] $end
$var wire 1 j" read_data [16] $end
$var wire 1 k" read_data [15] $end
$var wire 1 l" read_data [14] $end
$var wire 1 m" read_data [13] $end
$var wire 1 n" read_data [12] $end
$var wire 1 o" read_data [11] $end
$var wire 1 p" read_data [10] $end
$var wire 1 q" read_data [9] $end
$var wire 1 r" read_data [8] $end
$var wire 1 s" read_data [7] $end
$var wire 1 t" read_data [6] $end
$var wire 1 u" read_data [5] $end
$var wire 1 v" read_data [4] $end
$var wire 1 w" read_data [3] $end
$var wire 1 x" read_data [2] $end
$var wire 1 y" read_data [1] $end
$var wire 1 z" read_data [0] $end
$var wire 1 {" jump_addr $end
$var wire 1 |" do_branch $end
$var wire 1 }" do_jump $end
$var wire 1 ~" regdst $end
$var wire 1 !# memread $end
$var wire 1 "# memtoreg $end
$var wire 1 ## memwrite $end
$var wire 1 $# alusrc $end
$var wire 1 %# regwrite $end
$var wire 1 &# branch $end
$var wire 1 '# jump $end
$var wire 1 (# link $end
$var wire 1 )# immediate_or $end
$var wire 1 *# immediate_load_upper $end

$scope module fetch $end
$var wire 1 $ clock $end
$var wire 1 % reset $end
$var wire 1 6" branch_addr [31] $end
$var wire 1 7" branch_addr [30] $end
$var wire 1 8" branch_addr [29] $end
$var wire 1 9" branch_addr [28] $end
$var wire 1 :" branch_addr [27] $end
$var wire 1 ;" branch_addr [26] $end
$var wire 1 <" branch_addr [25] $end
$var wire 1 =" branch_addr [24] $end
$var wire 1 >" branch_addr [23] $end
$var wire 1 ?" branch_addr [22] $end
$var wire 1 @" branch_addr [21] $end
$var wire 1 A" branch_addr [20] $end
$var wire 1 B" branch_addr [19] $end
$var wire 1 C" branch_addr [18] $end
$var wire 1 D" branch_addr [17] $end
$var wire 1 E" branch_addr [16] $end
$var wire 1 F" branch_addr [15] $end
$var wire 1 G" branch_addr [14] $end
$var wire 1 H" branch_addr [13] $end
$var wire 1 I" branch_addr [12] $end
$var wire 1 J" branch_addr [11] $end
$var wire 1 K" branch_addr [10] $end
$var wire 1 L" branch_addr [9] $end
$var wire 1 M" branch_addr [8] $end
$var wire 1 N" branch_addr [7] $end
$var wire 1 O" branch_addr [6] $end
$var wire 1 P" branch_addr [5] $end
$var wire 1 Q" branch_addr [4] $end
$var wire 1 R" branch_addr [3] $end
$var wire 1 S" branch_addr [2] $end
$var wire 1 T" branch_addr [1] $end
$var wire 1 U" branch_addr [0] $end
$var wire 1 +# jump_addr [31] $end
$var wire 1 ,# jump_addr [30] $end
$var wire 1 -# jump_addr [29] $end
$var wire 1 .# jump_addr [28] $end
$var wire 1 /# jump_addr [27] $end
$var wire 1 0# jump_addr [26] $end
$var wire 1 1# jump_addr [25] $end
$var wire 1 2# jump_addr [24] $end
$var wire 1 3# jump_addr [23] $end
$var wire 1 4# jump_addr [22] $end
$var wire 1 5# jump_addr [21] $end
$var wire 1 6# jump_addr [20] $end
$var wire 1 7# jump_addr [19] $end
$var wire 1 8# jump_addr [18] $end
$var wire 1 9# jump_addr [17] $end
$var wire 1 :# jump_addr [16] $end
$var wire 1 ;# jump_addr [15] $end
$var wire 1 <# jump_addr [14] $end
$var wire 1 =# jump_addr [13] $end
$var wire 1 ># jump_addr [12] $end
$var wire 1 ?# jump_addr [11] $end
$var wire 1 @# jump_addr [10] $end
$var wire 1 A# jump_addr [9] $end
$var wire 1 B# jump_addr [8] $end
$var wire 1 C# jump_addr [7] $end
$var wire 1 D# jump_addr [6] $end
$var wire 1 E# jump_addr [5] $end
$var wire 1 F# jump_addr [4] $end
$var wire 1 G# jump_addr [3] $end
$var wire 1 H# jump_addr [2] $end
$var wire 1 I# jump_addr [1] $end
$var wire 1 {" jump_addr [0] $end
$var wire 1 |" do_branch $end
$var wire 1 }" do_jump $end
$var wire 1 & instruction [31] $end
$var wire 1 ' instruction [30] $end
$var wire 1 ( instruction [29] $end
$var wire 1 ) instruction [28] $end
$var wire 1 * instruction [27] $end
$var wire 1 + instruction [26] $end
$var wire 1 , instruction [25] $end
$var wire 1 - instruction [24] $end
$var wire 1 . instruction [23] $end
$var wire 1 / instruction [22] $end
$var wire 1 0 instruction [21] $end
$var wire 1 1 instruction [20] $end
$var wire 1 2 instruction [19] $end
$var wire 1 3 instruction [18] $end
$var wire 1 4 instruction [17] $end
$var wire 1 5 instruction [16] $end
$var wire 1 6 instruction [15] $end
$var wire 1 7 instruction [14] $end
$var wire 1 8 instruction [13] $end
$var wire 1 9 instruction [12] $end
$var wire 1 : instruction [11] $end
$var wire 1 ; instruction [10] $end
$var wire 1 < instruction [9] $end
$var wire 1 = instruction [8] $end
$var wire 1 > instruction [7] $end
$var wire 1 ? instruction [6] $end
$var wire 1 @ instruction [5] $end
$var wire 1 A instruction [4] $end
$var wire 1 B instruction [3] $end
$var wire 1 C instruction [2] $end
$var wire 1 D instruction [1] $end
$var wire 1 E instruction [0] $end
$var wire 1 F pc4 [31] $end
$var wire 1 G pc4 [30] $end
$var wire 1 H pc4 [29] $end
$var wire 1 I pc4 [28] $end
$var wire 1 J pc4 [27] $end
$var wire 1 K pc4 [26] $end
$var wire 1 L pc4 [25] $end
$var wire 1 M pc4 [24] $end
$var wire 1 N pc4 [23] $end
$var wire 1 O pc4 [22] $end
$var wire 1 P pc4 [21] $end
$var wire 1 Q pc4 [20] $end
$var wire 1 R pc4 [19] $end
$var wire 1 S pc4 [18] $end
$var wire 1 T pc4 [17] $end
$var wire 1 U pc4 [16] $end
$var wire 1 V pc4 [15] $end
$var wire 1 W pc4 [14] $end
$var wire 1 X pc4 [13] $end
$var wire 1 Y pc4 [12] $end
$var wire 1 Z pc4 [11] $end
$var wire 1 [ pc4 [10] $end
$var wire 1 \ pc4 [9] $end
$var wire 1 ] pc4 [8] $end
$var wire 1 ^ pc4 [7] $end
$var wire 1 _ pc4 [6] $end
$var wire 1 ` pc4 [5] $end
$var wire 1 a pc4 [4] $end
$var wire 1 b pc4 [3] $end
$var wire 1 c pc4 [2] $end
$var wire 1 d pc4 [1] $end
$var wire 1 e pc4 [0] $end
$var reg 32 J# pc [31:0] $end
$var wire 1 K# next_pc [31] $end
$var wire 1 L# next_pc [30] $end
$var wire 1 M# next_pc [29] $end
$var wire 1 N# next_pc [28] $end
$var wire 1 O# next_pc [27] $end
$var wire 1 P# next_pc [26] $end
$var wire 1 Q# next_pc [25] $end
$var wire 1 R# next_pc [24] $end
$var wire 1 S# next_pc [23] $end
$var wire 1 T# next_pc [22] $end
$var wire 1 U# next_pc [21] $end
$var wire 1 V# next_pc [20] $end
$var wire 1 W# next_pc [19] $end
$var wire 1 X# next_pc [18] $end
$var wire 1 Y# next_pc [17] $end
$var wire 1 Z# next_pc [16] $end
$var wire 1 [# next_pc [15] $end
$var wire 1 \# next_pc [14] $end
$var wire 1 ]# next_pc [13] $end
$var wire 1 ^# next_pc [12] $end
$var wire 1 _# next_pc [11] $end
$var wire 1 `# next_pc [10] $end
$var wire 1 a# next_pc [9] $end
$var wire 1 b# next_pc [8] $end
$var wire 1 c# next_pc [7] $end
$var wire 1 d# next_pc [6] $end
$var wire 1 e# next_pc [5] $end
$var wire 1 f# next_pc [4] $end
$var wire 1 g# next_pc [3] $end
$var wire 1 h# next_pc [2] $end
$var wire 1 i# next_pc [1] $end
$var wire 1 j# next_pc [0] $end
$upscope $end

$scope module control $end
$var wire 1 & opcode [5] $end
$var wire 1 ' opcode [4] $end
$var wire 1 ( opcode [3] $end
$var wire 1 ) opcode [2] $end
$var wire 1 * opcode [1] $end
$var wire 1 + opcode [0] $end
$var wire 1 ~" regdst $end
$var wire 1 !# memread $end
$var wire 1 "# memtoreg $end
$var wire 1 ## memwrite $end
$var wire 1 $# alusrc $end
$var wire 1 %# regwrite $end
$var wire 1 &# branch $end
$var wire 1 f aluop [1] $end
$var wire 1 g aluop [0] $end
$var wire 1 '# jump $end
$var wire 1 (# link $end
$var wire 1 )# immediate_or $end
$var wire 1 *# immediate_load_upper $end
$var wire 1 k# rformat $end
$var wire 1 l# beq $end
$var wire 1 m# lw $end
$var wire 1 n# sw $end
$var wire 1 o# ori $end
$var wire 1 p# lui $end
$var wire 1 q# j $end
$var wire 1 r# jal $end
$upscope $end

$scope module decode $end
$var wire 1 $ clock $end
$var wire 1 % reset $end
$var wire 1 & instruction [31] $end
$var wire 1 ' instruction [30] $end
$var wire 1 ( instruction [29] $end
$var wire 1 ) instruction [28] $end
$var wire 1 * instruction [27] $end
$var wire 1 + instruction [26] $end
$var wire 1 , instruction [25] $end
$var wire 1 - instruction [24] $end
$var wire 1 . instruction [23] $end
$var wire 1 / instruction [22] $end
$var wire 1 0 instruction [21] $end
$var wire 1 1 instruction [20] $end
$var wire 1 2 instruction [19] $end
$var wire 1 3 instruction [18] $end
$var wire 1 4 instruction [17] $end
$var wire 1 5 instruction [16] $end
$var wire 1 6 instruction [15] $end
$var wire 1 7 instruction [14] $end
$var wire 1 8 instruction [13] $end
$var wire 1 9 instruction [12] $end
$var wire 1 : instruction [11] $end
$var wire 1 ; instruction [10] $end
$var wire 1 < instruction [9] $end
$var wire 1 = instruction [8] $end
$var wire 1 > instruction [7] $end
$var wire 1 ? instruction [6] $end
$var wire 1 @ instruction [5] $end
$var wire 1 A instruction [4] $end
$var wire 1 B instruction [3] $end
$var wire 1 C instruction [2] $end
$var wire 1 D instruction [1] $end
$var wire 1 E instruction [0] $end
$var wire 1 [" memory_data [31] $end
$var wire 1 \" memory_data [30] $end
$var wire 1 ]" memory_data [29] $end
$var wire 1 ^" memory_data [28] $end
$var wire 1 _" memory_data [27] $end
$var wire 1 `" memory_data [26] $end
$var wire 1 a" memory_data [25] $end
$var wire 1 b" memory_data [24] $end
$var wire 1 c" memory_data [23] $end
$var wire 1 d" memory_data [22] $end
$var wire 1 e" memory_data [21] $end
$var wire 1 f" memory_data [20] $end
$var wire 1 g" memory_data [19] $end
$var wire 1 h" memory_data [18] $end
$var wire 1 i" memory_data [17] $end
$var wire 1 j" memory_data [16] $end
$var wire 1 k" memory_data [15] $end
$var wire 1 l" memory_data [14] $end
$var wire 1 m" memory_data [13] $end
$var wire 1 n" memory_data [12] $end
$var wire 1 o" memory_data [11] $end
$var wire 1 p" memory_data [10] $end
$var wire 1 q" memory_data [9] $end
$var wire 1 r" memory_data [8] $end
$var wire 1 s" memory_data [7] $end
$var wire 1 t" memory_data [6] $end
$var wire 1 u" memory_data [5] $end
$var wire 1 v" memory_data [4] $end
$var wire 1 w" memory_data [3] $end
$var wire 1 x" memory_data [2] $end
$var wire 1 y" memory_data [1] $end
$var wire 1 z" memory_data [0] $end
$var wire 1 t! alu_result [31] $end
$var wire 1 u! alu_result [30] $end
$var wire 1 v! alu_result [29] $end
$var wire 1 w! alu_result [28] $end
$var wire 1 x! alu_result [27] $end
$var wire 1 y! alu_result [26] $end
$var wire 1 z! alu_result [25] $end
$var wire 1 {! alu_result [24] $end
$var wire 1 |! alu_result [23] $end
$var wire 1 }! alu_result [22] $end
$var wire 1 ~! alu_result [21] $end
$var wire 1 !" alu_result [20] $end
$var wire 1 "" alu_result [19] $end
$var wire 1 #" alu_result [18] $end
$var wire 1 $" alu_result [17] $end
$var wire 1 %" alu_result [16] $end
$var wire 1 &" alu_result [15] $end
$var wire 1 '" alu_result [14] $end
$var wire 1 (" alu_result [13] $end
$var wire 1 )" alu_result [12] $end
$var wire 1 *" alu_result [11] $end
$var wire 1 +" alu_result [10] $end
$var wire 1 ," alu_result [9] $end
$var wire 1 -" alu_result [8] $end
$var wire 1 ." alu_result [7] $end
$var wire 1 /" alu_result [6] $end
$var wire 1 0" alu_result [5] $end
$var wire 1 1" alu_result [4] $end
$var wire 1 2" alu_result [3] $end
$var wire 1 3" alu_result [2] $end
$var wire 1 4" alu_result [1] $end
$var wire 1 5" alu_result [0] $end
$var wire 1 %# regwrite $end
$var wire 1 "# memtoreg $end
$var wire 1 V" wreg_address [4] $end
$var wire 1 W" wreg_address [3] $end
$var wire 1 X" wreg_address [2] $end
$var wire 1 Y" wreg_address [1] $end
$var wire 1 Z" wreg_address [0] $end
$var wire 1 h register_rs [31] $end
$var wire 1 i register_rs [30] $end
$var wire 1 j register_rs [29] $end
$var wire 1 k register_rs [28] $end
$var wire 1 l register_rs [27] $end
$var wire 1 m register_rs [26] $end
$var wire 1 n register_rs [25] $end
$var wire 1 o register_rs [24] $end
$var wire 1 p register_rs [23] $end
$var wire 1 q register_rs [22] $end
$var wire 1 r register_rs [21] $end
$var wire 1 s register_rs [20] $end
$var wire 1 t register_rs [19] $end
$var wire 1 u register_rs [18] $end
$var wire 1 v register_rs [17] $end
$var wire 1 w register_rs [16] $end
$var wire 1 x register_rs [15] $end
$var wire 1 y register_rs [14] $end
$var wire 1 z register_rs [13] $end
$var wire 1 { register_rs [12] $end
$var wire 1 | register_rs [11] $end
$var wire 1 } register_rs [10] $end
$var wire 1 ~ register_rs [9] $end
$var wire 1 !! register_rs [8] $end
$var wire 1 "! register_rs [7] $end
$var wire 1 #! register_rs [6] $end
$var wire 1 $! register_rs [5] $end
$var wire 1 %! register_rs [4] $end
$var wire 1 &! register_rs [3] $end
$var wire 1 '! register_rs [2] $end
$var wire 1 (! register_rs [1] $end
$var wire 1 )! register_rs [0] $end
$var wire 1 *! register_rt [31] $end
$var wire 1 +! register_rt [30] $end
$var wire 1 ,! register_rt [29] $end
$var wire 1 -! register_rt [28] $end
$var wire 1 .! register_rt [27] $end
$var wire 1 /! register_rt [26] $end
$var wire 1 0! register_rt [25] $end
$var wire 1 1! register_rt [24] $end
$var wire 1 2! register_rt [23] $end
$var wire 1 3! register_rt [22] $end
$var wire 1 4! register_rt [21] $end
$var wire 1 5! register_rt [20] $end
$var wire 1 6! register_rt [19] $end
$var wire 1 7! register_rt [18] $end
$var wire 1 8! register_rt [17] $end
$var wire 1 9! register_rt [16] $end
$var wire 1 :! register_rt [15] $end
$var wire 1 ;! register_rt [14] $end
$var wire 1 <! register_rt [13] $end
$var wire 1 =! register_rt [12] $end
$var wire 1 >! register_rt [11] $end
$var wire 1 ?! register_rt [10] $end
$var wire 1 @! register_rt [9] $end
$var wire 1 A! register_rt [8] $end
$var wire 1 B! register_rt [7] $end
$var wire 1 C! register_rt [6] $end
$var wire 1 D! register_rt [5] $end
$var wire 1 E! register_rt [4] $end
$var wire 1 F! register_rt [3] $end
$var wire 1 G! register_rt [2] $end
$var wire 1 H! register_rt [1] $end
$var wire 1 I! register_rt [0] $end
$var wire 1 J! sign_extend [31] $end
$var wire 1 K! sign_extend [30] $end
$var wire 1 L! sign_extend [29] $end
$var wire 1 M! sign_extend [28] $end
$var wire 1 N! sign_extend [27] $end
$var wire 1 O! sign_extend [26] $end
$var wire 1 P! sign_extend [25] $end
$var wire 1 Q! sign_extend [24] $end
$var wire 1 R! sign_extend [23] $end
$var wire 1 S! sign_extend [22] $end
$var wire 1 T! sign_extend [21] $end
$var wire 1 U! sign_extend [20] $end
$var wire 1 V! sign_extend [19] $end
$var wire 1 W! sign_extend [18] $end
$var wire 1 X! sign_extend [17] $end
$var wire 1 Y! sign_extend [16] $end
$var wire 1 Z! sign_extend [15] $end
$var wire 1 [! sign_extend [14] $end
$var wire 1 \! sign_extend [13] $end
$var wire 1 ]! sign_extend [12] $end
$var wire 1 ^! sign_extend [11] $end
$var wire 1 _! sign_extend [10] $end
$var wire 1 `! sign_extend [9] $end
$var wire 1 a! sign_extend [8] $end
$var wire 1 b! sign_extend [7] $end
$var wire 1 c! sign_extend [6] $end
$var wire 1 d! sign_extend [5] $end
$var wire 1 e! sign_extend [4] $end
$var wire 1 f! sign_extend [3] $end
$var wire 1 g! sign_extend [2] $end
$var wire 1 h! sign_extend [1] $end
$var wire 1 i! sign_extend [0] $end
$var wire 1 j! wreg_rd [4] $end
$var wire 1 k! wreg_rd [3] $end
$var wire 1 l! wreg_rd [2] $end
$var wire 1 m! wreg_rd [1] $end
$var wire 1 n! wreg_rd [0] $end
$var wire 1 o! wreg_rt [4] $end
$var wire 1 p! wreg_rt [3] $end
$var wire 1 q! wreg_rt [2] $end
$var wire 1 r! wreg_rt [1] $end
$var wire 1 s! wreg_rt [0] $end
$var wire 1 s# write_data [31] $end
$var wire 1 t# write_data [30] $end
$var wire 1 u# write_data [29] $end
$var wire 1 v# write_data [28] $end
$var wire 1 w# write_data [27] $end
$var wire 1 x# write_data [26] $end
$var wire 1 y# write_data [25] $end
$var wire 1 z# write_data [24] $end
$var wire 1 {# write_data [23] $end
$var wire 1 |# write_data [22] $end
$var wire 1 }# write_data [21] $end
$var wire 1 ~# write_data [20] $end
$var wire 1 !$ write_data [19] $end
$var wire 1 "$ write_data [18] $end
$var wire 1 #$ write_data [17] $end
$var wire 1 $$ write_data [16] $end
$var wire 1 %$ write_data [15] $end
$var wire 1 &$ write_data [14] $end
$var wire 1 '$ write_data [13] $end
$var wire 1 ($ write_data [12] $end
$var wire 1 )$ write_data [11] $end
$var wire 1 *$ write_data [10] $end
$var wire 1 +$ write_data [9] $end
$var wire 1 ,$ write_data [8] $end
$var wire 1 -$ write_data [7] $end
$var wire 1 .$ write_data [6] $end
$var wire 1 /$ write_data [5] $end
$var wire 1 0$ write_data [4] $end
$var wire 1 1$ write_data [3] $end
$var wire 1 2$ write_data [2] $end
$var wire 1 3$ write_data [1] $end
$var wire 1 4$ write_data [0] $end
$var wire 1 5$ read_register_1_address [4] $end
$var wire 1 6$ read_register_1_address [3] $end
$var wire 1 7$ read_register_1_address [2] $end
$var wire 1 8$ read_register_1_address [1] $end
$var wire 1 9$ read_register_1_address [0] $end
$var wire 1 :$ read_register_2_address [4] $end
$var wire 1 ;$ read_register_2_address [3] $end
$var wire 1 <$ read_register_2_address [2] $end
$var wire 1 =$ read_register_2_address [1] $end
$var wire 1 >$ read_register_2_address [0] $end
$var wire 1 ?$ instruction_immediate_value [15] $end
$var wire 1 @$ instruction_immediate_value [14] $end
$var wire 1 A$ instruction_immediate_value [13] $end
$var wire 1 B$ instruction_immediate_value [12] $end
$var wire 1 C$ instruction_immediate_value [11] $end
$var wire 1 D$ instruction_immediate_value [10] $end
$var wire 1 E$ instruction_immediate_value [9] $end
$var wire 1 F$ instruction_immediate_value [8] $end
$var wire 1 G$ instruction_immediate_value [7] $end
$var wire 1 H$ instruction_immediate_value [6] $end
$var wire 1 I$ instruction_immediate_value [5] $end
$var wire 1 J$ instruction_immediate_value [4] $end
$var wire 1 K$ instruction_immediate_value [3] $end
$var wire 1 L$ instruction_immediate_value [2] $end
$var wire 1 M$ instruction_immediate_value [1] $end
$var wire 1 N$ instruction_immediate_value [0] $end
$var integer 32 O$ i $end
$upscope $end

$scope module execute $end
$var wire 1 F pc4 [31] $end
$var wire 1 G pc4 [30] $end
$var wire 1 H pc4 [29] $end
$var wire 1 I pc4 [28] $end
$var wire 1 J pc4 [27] $end
$var wire 1 K pc4 [26] $end
$var wire 1 L pc4 [25] $end
$var wire 1 M pc4 [24] $end
$var wire 1 N pc4 [23] $end
$var wire 1 O pc4 [22] $end
$var wire 1 P pc4 [21] $end
$var wire 1 Q pc4 [20] $end
$var wire 1 R pc4 [19] $end
$var wire 1 S pc4 [18] $end
$var wire 1 T pc4 [17] $end
$var wire 1 U pc4 [16] $end
$var wire 1 V pc4 [15] $end
$var wire 1 W pc4 [14] $end
$var wire 1 X pc4 [13] $end
$var wire 1 Y pc4 [12] $end
$var wire 1 Z pc4 [11] $end
$var wire 1 [ pc4 [10] $end
$var wire 1 \ pc4 [9] $end
$var wire 1 ] pc4 [8] $end
$var wire 1 ^ pc4 [7] $end
$var wire 1 _ pc4 [6] $end
$var wire 1 ` pc4 [5] $end
$var wire 1 a pc4 [4] $end
$var wire 1 b pc4 [3] $end
$var wire 1 c pc4 [2] $end
$var wire 1 d pc4 [1] $end
$var wire 1 e pc4 [0] $end
$var wire 1 , j_address [25] $end
$var wire 1 - j_address [24] $end
$var wire 1 . j_address [23] $end
$var wire 1 / j_address [22] $end
$var wire 1 0 j_address [21] $end
$var wire 1 1 j_address [20] $end
$var wire 1 2 j_address [19] $end
$var wire 1 3 j_address [18] $end
$var wire 1 4 j_address [17] $end
$var wire 1 5 j_address [16] $end
$var wire 1 6 j_address [15] $end
$var wire 1 7 j_address [14] $end
$var wire 1 8 j_address [13] $end
$var wire 1 9 j_address [12] $end
$var wire 1 : j_address [11] $end
$var wire 1 ; j_address [10] $end
$var wire 1 < j_address [9] $end
$var wire 1 = j_address [8] $end
$var wire 1 > j_address [7] $end
$var wire 1 ? j_address [6] $end
$var wire 1 @ j_address [5] $end
$var wire 1 A j_address [4] $end
$var wire 1 B j_address [3] $end
$var wire 1 C j_address [2] $end
$var wire 1 D j_address [1] $end
$var wire 1 E j_address [0] $end
$var wire 1 h register_rs [31] $end
$var wire 1 i register_rs [30] $end
$var wire 1 j register_rs [29] $end
$var wire 1 k register_rs [28] $end
$var wire 1 l register_rs [27] $end
$var wire 1 m register_rs [26] $end
$var wire 1 n register_rs [25] $end
$var wire 1 o register_rs [24] $end
$var wire 1 p register_rs [23] $end
$var wire 1 q register_rs [22] $end
$var wire 1 r register_rs [21] $end
$var wire 1 s register_rs [20] $end
$var wire 1 t register_rs [19] $end
$var wire 1 u register_rs [18] $end
$var wire 1 v register_rs [17] $end
$var wire 1 w register_rs [16] $end
$var wire 1 x register_rs [15] $end
$var wire 1 y register_rs [14] $end
$var wire 1 z register_rs [13] $end
$var wire 1 { register_rs [12] $end
$var wire 1 | register_rs [11] $end
$var wire 1 } register_rs [10] $end
$var wire 1 ~ register_rs [9] $end
$var wire 1 !! register_rs [8] $end
$var wire 1 "! register_rs [7] $end
$var wire 1 #! register_rs [6] $end
$var wire 1 $! register_rs [5] $end
$var wire 1 %! register_rs [4] $end
$var wire 1 &! register_rs [3] $end
$var wire 1 '! register_rs [2] $end
$var wire 1 (! register_rs [1] $end
$var wire 1 )! register_rs [0] $end
$var wire 1 *! register_rt [31] $end
$var wire 1 +! register_rt [30] $end
$var wire 1 ,! register_rt [29] $end
$var wire 1 -! register_rt [28] $end
$var wire 1 .! register_rt [27] $end
$var wire 1 /! register_rt [26] $end
$var wire 1 0! register_rt [25] $end
$var wire 1 1! register_rt [24] $end
$var wire 1 2! register_rt [23] $end
$var wire 1 3! register_rt [22] $end
$var wire 1 4! register_rt [21] $end
$var wire 1 5! register_rt [20] $end
$var wire 1 6! register_rt [19] $end
$var wire 1 7! register_rt [18] $end
$var wire 1 8! register_rt [17] $end
$var wire 1 9! register_rt [16] $end
$var wire 1 :! register_rt [15] $end
$var wire 1 ;! register_rt [14] $end
$var wire 1 <! register_rt [13] $end
$var wire 1 =! register_rt [12] $end
$var wire 1 >! register_rt [11] $end
$var wire 1 ?! register_rt [10] $end
$var wire 1 @! register_rt [9] $end
$var wire 1 A! register_rt [8] $end
$var wire 1 B! register_rt [7] $end
$var wire 1 C! register_rt [6] $end
$var wire 1 D! register_rt [5] $end
$var wire 1 E! register_rt [4] $end
$var wire 1 F! register_rt [3] $end
$var wire 1 G! register_rt [2] $end
$var wire 1 H! register_rt [1] $end
$var wire 1 I! register_rt [0] $end
$var wire 1 @ function_opcode [5] $end
$var wire 1 A function_opcode [4] $end
$var wire 1 B function_opcode [3] $end
$var wire 1 C function_opcode [2] $end
$var wire 1 D function_opcode [1] $end
$var wire 1 E function_opcode [0] $end
$var wire 1 J! sign_extend [31] $end
$var wire 1 K! sign_extend [30] $end
$var wire 1 L! sign_extend [29] $end
$var wire 1 M! sign_extend [28] $end
$var wire 1 N! sign_extend [27] $end
$var wire 1 O! sign_extend [26] $end
$var wire 1 P! sign_extend [25] $end
$var wire 1 Q! sign_extend [24] $end
$var wire 1 R! sign_extend [23] $end
$var wire 1 S! sign_extend [22] $end
$var wire 1 T! sign_extend [21] $end
$var wire 1 U! sign_extend [20] $end
$var wire 1 V! sign_extend [19] $end
$var wire 1 W! sign_extend [18] $end
$var wire 1 X! sign_extend [17] $end
$var wire 1 Y! sign_extend [16] $end
$var wire 1 Z! sign_extend [15] $end
$var wire 1 [! sign_extend [14] $end
$var wire 1 \! sign_extend [13] $end
$var wire 1 ]! sign_extend [12] $end
$var wire 1 ^! sign_extend [11] $end
$var wire 1 _! sign_extend [10] $end
$var wire 1 `! sign_extend [9] $end
$var wire 1 a! sign_extend [8] $end
$var wire 1 b! sign_extend [7] $end
$var wire 1 c! sign_extend [6] $end
$var wire 1 d! sign_extend [5] $end
$var wire 1 e! sign_extend [4] $end
$var wire 1 f! sign_extend [3] $end
$var wire 1 g! sign_extend [2] $end
$var wire 1 h! sign_extend [1] $end
$var wire 1 i! sign_extend [0] $end
$var wire 1 j! wreg_rd [4] $end
$var wire 1 k! wreg_rd [3] $end
$var wire 1 l! wreg_rd [2] $end
$var wire 1 m! wreg_rd [1] $end
$var wire 1 n! wreg_rd [0] $end
$var wire 1 o! wreg_rt [4] $end
$var wire 1 p! wreg_rt [3] $end
$var wire 1 q! wreg_rt [2] $end
$var wire 1 r! wreg_rt [1] $end
$var wire 1 s! wreg_rt [0] $end
$var wire 1 f aluop [1] $end
$var wire 1 g aluop [0] $end
$var wire 1 &# branch $end
$var wire 1 $# alusrc $end
$var wire 1 ~" regdst $end
$var wire 1 '# jump $end
$var wire 1 (# link $end
$var wire 1 )# immediate_or $end
$var wire 1 *# immediate_load_upper $end
$var reg 32 P$ alu_result [31:0] $end
$var wire 1 6" branch_addr [31] $end
$var wire 1 7" branch_addr [30] $end
$var wire 1 8" branch_addr [29] $end
$var wire 1 9" branch_addr [28] $end
$var wire 1 :" branch_addr [27] $end
$var wire 1 ;" branch_addr [26] $end
$var wire 1 <" branch_addr [25] $end
$var wire 1 =" branch_addr [24] $end
$var wire 1 >" branch_addr [23] $end
$var wire 1 ?" branch_addr [22] $end
$var wire 1 @" branch_addr [21] $end
$var wire 1 A" branch_addr [20] $end
$var wire 1 B" branch_addr [19] $end
$var wire 1 C" branch_addr [18] $end
$var wire 1 D" branch_addr [17] $end
$var wire 1 E" branch_addr [16] $end
$var wire 1 F" branch_addr [15] $end
$var wire 1 G" branch_addr [14] $end
$var wire 1 H" branch_addr [13] $end
$var wire 1 I" branch_addr [12] $end
$var wire 1 J" branch_addr [11] $end
$var wire 1 K" branch_addr [10] $end
$var wire 1 L" branch_addr [9] $end
$var wire 1 M" branch_addr [8] $end
$var wire 1 N" branch_addr [7] $end
$var wire 1 O" branch_addr [6] $end
$var wire 1 P" branch_addr [5] $end
$var wire 1 Q" branch_addr [4] $end
$var wire 1 R" branch_addr [3] $end
$var wire 1 S" branch_addr [2] $end
$var wire 1 T" branch_addr [1] $end
$var wire 1 U" branch_addr [0] $end
$var wire 1 Q$ jump_addr [31] $end
$var wire 1 R$ jump_addr [30] $end
$var wire 1 S$ jump_addr [29] $end
$var wire 1 T$ jump_addr [28] $end
$var wire 1 U$ jump_addr [27] $end
$var wire 1 V$ jump_addr [26] $end
$var wire 1 W$ jump_addr [25] $end
$var wire 1 X$ jump_addr [24] $end
$var wire 1 Y$ jump_addr [23] $end
$var wire 1 Z$ jump_addr [22] $end
$var wire 1 [$ jump_addr [21] $end
$var wire 1 \$ jump_addr [20] $end
$var wire 1 ]$ jump_addr [19] $end
$var wire 1 ^$ jump_addr [18] $end
$var wire 1 _$ jump_addr [17] $end
$var wire 1 `$ jump_addr [16] $end
$var wire 1 a$ jump_addr [15] $end
$var wire 1 b$ jump_addr [14] $end
$var wire 1 c$ jump_addr [13] $end
$var wire 1 d$ jump_addr [12] $end
$var wire 1 e$ jump_addr [11] $end
$var wire 1 f$ jump_addr [10] $end
$var wire 1 g$ jump_addr [9] $end
$var wire 1 h$ jump_addr [8] $end
$var wire 1 i$ jump_addr [7] $end
$var wire 1 j$ jump_addr [6] $end
$var wire 1 k$ jump_addr [5] $end
$var wire 1 l$ jump_addr [4] $end
$var wire 1 m$ jump_addr [3] $end
$var wire 1 n$ jump_addr [2] $end
$var wire 1 o$ jump_addr [1] $end
$var wire 1 p$ jump_addr [0] $end
$var wire 1 V" wreg_address [4] $end
$var wire 1 W" wreg_address [3] $end
$var wire 1 X" wreg_address [2] $end
$var wire 1 Y" wreg_address [1] $end
$var wire 1 Z" wreg_address [0] $end
$var wire 1 |" do_branch $end
$var wire 1 }" do_jump $end
$var wire 1 q$ zero $end
$var wire 1 r$ ainput [31] $end
$var wire 1 s$ ainput [30] $end
$var wire 1 t$ ainput [29] $end
$var wire 1 u$ ainput [28] $end
$var wire 1 v$ ainput [27] $end
$var wire 1 w$ ainput [26] $end
$var wire 1 x$ ainput [25] $end
$var wire 1 y$ ainput [24] $end
$var wire 1 z$ ainput [23] $end
$var wire 1 {$ ainput [22] $end
$var wire 1 |$ ainput [21] $end
$var wire 1 }$ ainput [20] $end
$var wire 1 ~$ ainput [19] $end
$var wire 1 !% ainput [18] $end
$var wire 1 "% ainput [17] $end
$var wire 1 #% ainput [16] $end
$var wire 1 $% ainput [15] $end
$var wire 1 %% ainput [14] $end
$var wire 1 &% ainput [13] $end
$var wire 1 '% ainput [12] $end
$var wire 1 (% ainput [11] $end
$var wire 1 )% ainput [10] $end
$var wire 1 *% ainput [9] $end
$var wire 1 +% ainput [8] $end
$var wire 1 ,% ainput [7] $end
$var wire 1 -% ainput [6] $end
$var wire 1 .% ainput [5] $end
$var wire 1 /% ainput [4] $end
$var wire 1 0% ainput [3] $end
$var wire 1 1% ainput [2] $end
$var wire 1 2% ainput [1] $end
$var wire 1 3% ainput [0] $end
$var wire 1 4% binput [31] $end
$var wire 1 5% binput [30] $end
$var wire 1 6% binput [29] $end
$var wire 1 7% binput [28] $end
$var wire 1 8% binput [27] $end
$var wire 1 9% binput [26] $end
$var wire 1 :% binput [25] $end
$var wire 1 ;% binput [24] $end
$var wire 1 <% binput [23] $end
$var wire 1 =% binput [22] $end
$var wire 1 >% binput [21] $end
$var wire 1 ?% binput [20] $end
$var wire 1 @% binput [19] $end
$var wire 1 A% binput [18] $end
$var wire 1 B% binput [17] $end
$var wire 1 C% binput [16] $end
$var wire 1 D% binput [15] $end
$var wire 1 E% binput [14] $end
$var wire 1 F% binput [13] $end
$var wire 1 G% binput [12] $end
$var wire 1 H% binput [11] $end
$var wire 1 I% binput [10] $end
$var wire 1 J% binput [9] $end
$var wire 1 K% binput [8] $end
$var wire 1 L% binput [7] $end
$var wire 1 M% binput [6] $end
$var wire 1 N% binput [5] $end
$var wire 1 O% binput [4] $end
$var wire 1 P% binput [3] $end
$var wire 1 Q% binput [2] $end
$var wire 1 R% binput [1] $end
$var wire 1 S% binput [0] $end
$var reg 3 T% alu_ctl [2:0] $end
$upscope $end

$scope module memory $end
$var wire 1 $ clock $end
$var wire 1 t! address [31] $end
$var wire 1 u! address [30] $end
$var wire 1 v! address [29] $end
$var wire 1 w! address [28] $end
$var wire 1 x! address [27] $end
$var wire 1 y! address [26] $end
$var wire 1 z! address [25] $end
$var wire 1 {! address [24] $end
$var wire 1 |! address [23] $end
$var wire 1 }! address [22] $end
$var wire 1 ~! address [21] $end
$var wire 1 !" address [20] $end
$var wire 1 "" address [19] $end
$var wire 1 #" address [18] $end
$var wire 1 $" address [17] $end
$var wire 1 %" address [16] $end
$var wire 1 &" address [15] $end
$var wire 1 '" address [14] $end
$var wire 1 (" address [13] $end
$var wire 1 )" address [12] $end
$var wire 1 *" address [11] $end
$var wire 1 +" address [10] $end
$var wire 1 ," address [9] $end
$var wire 1 -" address [8] $end
$var wire 1 ." address [7] $end
$var wire 1 /" address [6] $end
$var wire 1 0" address [5] $end
$var wire 1 1" address [4] $end
$var wire 1 2" address [3] $end
$var wire 1 3" address [2] $end
$var wire 1 4" address [1] $end
$var wire 1 5" address [0] $end
$var wire 1 *! write_data [31] $end
$var wire 1 +! write_data [30] $end
$var wire 1 ,! write_data [29] $end
$var wire 1 -! write_data [28] $end
$var wire 1 .! write_data [27] $end
$var wire 1 /! write_data [26] $end
$var wire 1 0! write_data [25] $end
$var wire 1 1! write_data [24] $end
$var wire 1 2! write_data [23] $end
$var wire 1 3! write_data [22] $end
$var wire 1 4! write_data [21] $end
$var wire 1 5! write_data [20] $end
$var wire 1 6! write_data [19] $end
$var wire 1 7! write_data [18] $end
$var wire 1 8! write_data [17] $end
$var wire 1 9! write_data [16] $end
$var wire 1 :! write_data [15] $end
$var wire 1 ;! write_data [14] $end
$var wire 1 <! write_data [13] $end
$var wire 1 =! write_data [12] $end
$var wire 1 >! write_data [11] $end
$var wire 1 ?! write_data [10] $end
$var wire 1 @! write_data [9] $end
$var wire 1 A! write_data [8] $end
$var wire 1 B! write_data [7] $end
$var wire 1 C! write_data [6] $end
$var wire 1 D! write_data [5] $end
$var wire 1 E! write_data [4] $end
$var wire 1 F! write_data [3] $end
$var wire 1 G! write_data [2] $end
$var wire 1 H! write_data [1] $end
$var wire 1 I! write_data [0] $end
$var wire 1 ## memwrite $end
$var wire 1 [" read_data [31] $end
$var wire 1 \" read_data [30] $end
$var wire 1 ]" read_data [29] $end
$var wire 1 ^" read_data [28] $end
$var wire 1 _" read_data [27] $end
$var wire 1 `" read_data [26] $end
$var wire 1 a" read_data [25] $end
$var wire 1 b" read_data [24] $end
$var wire 1 c" read_data [23] $end
$var wire 1 d" read_data [22] $end
$var wire 1 e" read_data [21] $end
$var wire 1 f" read_data [20] $end
$var wire 1 g" read_data [19] $end
$var wire 1 h" read_data [18] $end
$var wire 1 i" read_data [17] $end
$var wire 1 j" read_data [16] $end
$var wire 1 k" read_data [15] $end
$var wire 1 l" read_data [14] $end
$var wire 1 m" read_data [13] $end
$var wire 1 n" read_data [12] $end
$var wire 1 o" read_data [11] $end
$var wire 1 p" read_data [10] $end
$var wire 1 q" read_data [9] $end
$var wire 1 r" read_data [8] $end
$var wire 1 s" read_data [7] $end
$var wire 1 t" read_data [6] $end
$var wire 1 u" read_data [5] $end
$var wire 1 v" read_data [4] $end
$var wire 1 w" read_data [3] $end
$var wire 1 x" read_data [2] $end
$var wire 1 y" read_data [1] $end
$var wire 1 z" read_data [0] $end
$var integer 32 U% i $end

$scope begin genblk2[31] $end
$var parameter 32 V% index $end
$upscope $end

$scope begin genblk2[30] $end
$var parameter 32 W% index $end
$upscope $end

$scope begin genblk2[29] $end
$var parameter 32 X% index $end
$upscope $end

$scope begin genblk2[28] $end
$var parameter 32 Y% index $end
$upscope $end

$scope begin genblk2[27] $end
$var parameter 32 Z% index $end
$upscope $end

$scope begin genblk2[26] $end
$var parameter 32 [% index $end
$upscope $end

$scope begin genblk2[25] $end
$var parameter 32 \% index $end
$upscope $end

$scope begin genblk2[24] $end
$var parameter 32 ]% index $end
$upscope $end

$scope begin genblk2[23] $end
$var parameter 32 ^% index $end
$upscope $end

$scope begin genblk2[22] $end
$var parameter 32 _% index $end
$upscope $end

$scope begin genblk2[21] $end
$var parameter 32 `% index $end
$upscope $end

$scope begin genblk2[20] $end
$var parameter 32 a% index $end
$upscope $end

$scope begin genblk2[19] $end
$var parameter 32 b% index $end
$upscope $end

$scope begin genblk2[18] $end
$var parameter 32 c% index $end
$upscope $end

$scope begin genblk2[17] $end
$var parameter 32 d% index $end
$upscope $end

$scope begin genblk2[16] $end
$var parameter 32 e% index $end
$upscope $end

$scope begin genblk2[15] $end
$var parameter 32 f% index $end
$upscope $end

$scope begin genblk2[14] $end
$var parameter 32 g% index $end
$upscope $end

$scope begin genblk2[13] $end
$var parameter 32 h% index $end
$upscope $end

$scope begin genblk2[12] $end
$var parameter 32 i% index $end
$upscope $end

$scope begin genblk2[11] $end
$var parameter 32 j% index $end
$upscope $end

$scope begin genblk2[10] $end
$var parameter 32 k% index $end
$upscope $end

$scope begin genblk2[9] $end
$var parameter 32 l% index $end
$upscope $end

$scope begin genblk2[8] $end
$var parameter 32 m% index $end
$upscope $end

$scope begin genblk2[7] $end
$var parameter 32 n% index $end
$upscope $end

$scope begin genblk2[6] $end
$var parameter 32 o% index $end
$upscope $end

$scope begin genblk2[5] $end
$var parameter 32 p% index $end
$upscope $end

$scope begin genblk2[4] $end
$var parameter 32 q% index $end
$upscope $end

$scope begin genblk2[3] $end
$var parameter 32 r% index $end
$upscope $end

$scope begin genblk2[2] $end
$var parameter 32 s% index $end
$upscope $end

$scope begin genblk2[1] $end
$var parameter 32 t% index $end
$upscope $end

$scope begin genblk2[0] $end
$var parameter 32 u% index $end
$upscope $end

$scope begin genblk1[31] $end
$var parameter 32 v% index $end
$upscope $end

$scope begin genblk1[30] $end
$var parameter 32 w% index $end
$upscope $end

$scope begin genblk1[29] $end
$var parameter 32 x% index $end
$upscope $end

$scope begin genblk1[28] $end
$var parameter 32 y% index $end
$upscope $end

$scope begin genblk1[27] $end
$var parameter 32 z% index $end
$upscope $end

$scope begin genblk1[26] $end
$var parameter 32 {% index $end
$upscope $end

$scope begin genblk1[25] $end
$var parameter 32 |% index $end
$upscope $end

$scope begin genblk1[24] $end
$var parameter 32 }% index $end
$upscope $end

$scope begin genblk1[23] $end
$var parameter 32 ~% index $end
$upscope $end

$scope begin genblk1[22] $end
$var parameter 32 !& index $end
$upscope $end

$scope begin genblk1[21] $end
$var parameter 32 "& index $end
$upscope $end

$scope begin genblk1[20] $end
$var parameter 32 #& index $end
$upscope $end

$scope begin genblk1[19] $end
$var parameter 32 $& index $end
$upscope $end

$scope begin genblk1[18] $end
$var parameter 32 %& index $end
$upscope $end

$scope begin genblk1[17] $end
$var parameter 32 && index $end
$upscope $end

$scope begin genblk1[16] $end
$var parameter 32 '& index $end
$upscope $end

$scope begin genblk1[15] $end
$var parameter 32 (& index $end
$upscope $end

$scope begin genblk1[14] $end
$var parameter 32 )& index $end
$upscope $end

$scope begin genblk1[13] $end
$var parameter 32 *& index $end
$upscope $end

$scope begin genblk1[12] $end
$var parameter 32 +& index $end
$upscope $end

$scope begin genblk1[11] $end
$var parameter 32 ,& index $end
$upscope $end

$scope begin genblk1[10] $end
$var parameter 32 -& index $end
$upscope $end

$scope begin genblk1[9] $end
$var parameter 32 .& index $end
$upscope $end

$scope begin genblk1[8] $end
$var parameter 32 /& index $end
$upscope $end

$scope begin genblk1[7] $end
$var parameter 32 0& index $end
$upscope $end

$scope begin genblk1[6] $end
$var parameter 32 1& index $end
$upscope $end

$scope begin genblk1[5] $end
$var parameter 32 2& index $end
$upscope $end

$scope begin genblk1[4] $end
$var parameter 32 3& index $end
$upscope $end

$scope begin genblk1[3] $end
$var parameter 32 4& index $end
$upscope $end

$scope begin genblk1[2] $end
$var parameter 32 5& index $end
$upscope $end

$scope begin genblk1[1] $end
$var parameter 32 6& index $end
$upscope $end

$scope begin genblk1[0] $end
$var parameter 32 7& index $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bx J#
bx P$
bx T%
b0 7&
b1 6&
b10 5&
b11 4&
b100 3&
b101 2&
b110 1&
b111 0&
b1000 /&
b1001 .&
b1010 -&
b1011 ,&
b1100 +&
b1101 *&
b1110 )&
b1111 (&
b10000 '&
b10001 &&
b10010 %&
b10011 $&
b10100 #&
b10101 "&
b10110 !&
b10111 ~%
b11000 }%
b11001 |%
b11010 {%
b11011 z%
b11100 y%
b11101 x%
b11110 w%
b11111 v%
b0 u%
b1 t%
b10 s%
b11 r%
b100 q%
b101 p%
b110 o%
b111 n%
b1000 m%
b1001 l%
b1010 k%
b1011 j%
b1100 i%
b1101 h%
b1110 g%
b1111 f%
b10000 e%
b10001 d%
b10010 c%
b10011 b%
b10100 a%
b10101 `%
b10110 _%
b10111 ^%
b11000 ]%
b11001 \%
b11010 [%
b11011 Z%
b11100 Y%
b11101 X%
b11110 W%
b11111 V%
b100000 O$
b100000 U%
b100000 #
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xg
xf
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xn!
xm!
xl!
xk!
xj!
xs!
xr!
xq!
xp!
xo!
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
xZ"
xY"
xX"
xW"
xV"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
z{"
x|"
x}"
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
x~"
z!#
x"#
x##
x$#
x%#
x&#
x'#
x(#
z)#
z*#
xk#
xl#
xm#
xn#
xo#
xp#
xq#
xr#
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
x9$
x8$
x7$
x6$
x5$
x>$
x=$
x<$
x;$
x:$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
xq$
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
1%
0$
zI#
zH#
zG#
zF#
zE#
zD#
zC#
zB#
zA#
z@#
z?#
z>#
z=#
z<#
z;#
z:#
z9#
z8#
z7#
z6#
z5#
z4#
z3#
z2#
z1#
z0#
z/#
z.#
z-#
z,#
z+#
0p$
0o$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
$end
#1
1!
1$
b0 J#
0e
0d
1c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
1@
0?
0>
0=
0<
0;
1:
09
18
07
06
15
14
03
02
01
00
0/
1.
0-
0,
0+
0*
0)
0(
0'
0&
09$
08$
17$
06$
05$
1>$
1=$
0<$
0;$
0:$
1s!
1r!
0q!
0p!
0o!
1n!
0m!
1l!
0k!
0j!
0N$
0M$
0L$
0K$
0J$
1I$
0H$
0G$
0F$
0E$
0D$
1C$
0B$
1A$
0@$
0?$
0n$
0m$
0l$
0k$
0j$
1i$
0h$
0g$
0f$
0e$
0d$
1c$
0b$
1a$
0`$
0_$
1^$
1]$
0\$
0[$
0Z$
0Y$
0X$
1W$
0V$
0U$
0T$
0S$
0R$
0Q$
0r#
0q#
0p#
0o#
0l#
0n#
0m#
1k#
1~"
1%#
0$#
0"#
0##
0&#
0'#
0}"
0|"
0j#
0i#
1h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0i!
0h!
0g!
0f!
0e!
1d!
0c!
0b!
0a!
0`!
0_!
1^!
0]!
1\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
1Z"
1X"
1I!
1H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
1'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0U"
0T"
1S"
0R"
0Q"
0P"
0O"
1N"
0M"
0L"
0K"
0J"
0I"
1H"
0G"
1F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
0(#
03%
02%
11%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0Q%
0P%
0O%
0M%
0L%
0K%
0J%
0I%
0G%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
0g
1f
0Y"
0W"
0V"
b10 T%
#2
0"
0!
0%
0$
#3
1!
1$
b100 J#
0h#
1g#
0c
1b
0S"
1R"
#4
0!
0$
#5
1!
1$
b1000 J#
1h#
1c
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x9$
x8$
x7$
x6$
x5$
x>$
x=$
x<$
x;$
x:$
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
1S"
xr#
xq#
xp#
xo#
xl#
xn#
xm#
xk#
x~"
x%#
x"#
x##
x&#
x$#
x'#
x}"
x|"
xc#
x]#
x[#
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xZ"
xY"
xX"
xW"
xV"
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xb#
xa#
x`#
x_#
x^#
x\#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
x(#
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xQ%
xP%
xO%
xM%
xL%
xK%
xJ%
xI%
xG%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
xg
xf
#6
0!
0$
#7
1!
1$
bx J#
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xT$
xS$
xR$
xQ$
#8
0!
0$
#9
1!
1$
#10
0!
0$
#11
1!
1$
#12
0!
0$
#13
1!
1$
#14
0!
0$
#15
1!
1$
#16
0!
0$
#17
1!
1$
#18
0!
0$
#19
1!
1$
#20
0!
0$
#21
1!
1$
#22
0!
0$
#23
1!
1$
#24
0!
0$
#25
1!
1$
#26
0!
0$
#27
1!
1$
#28
0!
0$
#29
1!
1$
#30
0!
0$
#31
1!
1$
#32
0!
0$
#33
1!
1$
#34
0!
0$
#35
1!
1$
#36
0!
0$
#37
1!
1$
#38
0!
0$
#39
1!
1$
#40
0!
0$
#41
1!
1$
#42
0!
0$
#43
1!
1$
#44
0!
0$
#45
1!
1$
#46
0!
0$
#47
1!
1$
#48
0!
0$
#49
1!
1$
