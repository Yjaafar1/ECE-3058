$date
	Tue Feb 15 18:28:25 2022
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module MIPS_pipelined_tb $end
$var reg 1 ! aclk $end
$var reg 1 " reset $end
$var integer 32 # i $end
$var reg 10 $ PC [9:0] $end
$var reg 32 % ALU_result_out [31:0] $end
$var reg 32 & read_data_1_out [31:0] $end
$var reg 32 ' read_data_2_out [31:0] $end
$var reg 32 ( write_data_out [31:0] $end
$var reg 32 ) Instruction_out [31:0] $end
$var reg 1 * Branch_out $end
$var reg 1 + Zero_out $end
$var reg 1 , MemWrite_out $end
$var reg 1 - RegWrite_out $end
$var reg 1 . stall_out $end
$var reg 7 / cycle_cnt [6:0] $end

$scope module my_MIPS_processor $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$var reg 10 2 PC [9:0] $end
$var reg 32 3 ALU_result_out [31:0] $end
$var reg 32 4 read_data_1_out [31:0] $end
$var reg 32 5 read_data_2_out [31:0] $end
$var reg 32 6 write_data_out [31:0] $end
$var reg 32 7 Instruction_out [31:0] $end
$var reg 1 8 Branch_out $end
$var reg 1 9 Zero_out $end
$var reg 1 : MemWrite_out $end
$var reg 1 ; RegWrite_out $end
$var reg 1 < stall_out $end
$var reg 10 = PC_plus_4 [9:0] $end
$var reg 10 > PC_plus_4_ID [9:0] $end
$var reg 6 ? function_opcode [5:0] $end
$var reg 32 @ read_data_1 [31:0] $end
$var reg 32 A read_data_2 [31:0] $end
$var reg 32 B sign_extend [31:0] $end
$var reg 8 C Add_result [7:0] $end
$var reg 32 D ALU_result [31:0] $end
$var reg 32 E ALU_result_MEM [31:0] $end
$var reg 32 F read_data [31:0] $end
$var reg 1 G ALUSrc $end
$var reg 1 H Branch $end
$var reg 1 I branch_EX $end
$var reg 1 J RegDst $end
$var reg 1 K RegWrite $end
$var reg 1 L Zero $end
$var reg 1 M MemWrite $end
$var reg 1 N MemWrite_EX $end
$var reg 1 O MemtoReg $end
$var reg 1 P MemtoReg_EX $end
$var reg 1 Q MemtoReg_MEM $end
$var reg 1 R MemRead $end
$var reg 1 S MemRead_EX $end
$var reg 2 T ALUop [1:0] $end
$var reg 32 U Instruction [31:0] $end
$var reg 1 V stall $end
$var reg 1 W R_format $end
$var reg 1 X I_format $end
$var reg 1 Y Lw $end
$var reg 1 Z Sw $end
$var reg 1 [ Beq $end
$var reg 5 \ dest_reg_R_type [4:0] $end
$var reg 5 ] dest_reg_I_type [4:0] $end
$var reg 1 ^ sig_RegWrite_EX $end
$var reg 1 _ sig_RegWrite_MEM $end
$var reg 1 ` sig_RegWrite_WB $end
$var reg 5 a dest_EX [4:0] $end
$var reg 5 b dest_MEM [4:0] $end
$var reg 5 c dest_WB [4:0] $end
$var reg 32 d memory_write_data [31:0] $end
$var reg 32 e write_data_WB [31:0] $end
$var reg 5 f dec_rt [4:0] $end
$var reg 5 g dec_rs [4:0] $end
$var reg 2 h op_FA [1:0] $end
$var reg 2 i op_FB [1:0] $end
$var reg 5 j dest [4:0] $end

$scope module my_STALL_CONT $end
$var wire 1 k ip_instruction [31] $end
$var wire 1 l ip_instruction [30] $end
$var wire 1 m ip_instruction [29] $end
$var wire 1 n ip_instruction [28] $end
$var wire 1 o ip_instruction [27] $end
$var wire 1 p ip_instruction [26] $end
$var wire 1 q ip_instruction [25] $end
$var wire 1 r ip_instruction [24] $end
$var wire 1 s ip_instruction [23] $end
$var wire 1 t ip_instruction [22] $end
$var wire 1 u ip_instruction [21] $end
$var wire 1 v ip_instruction [20] $end
$var wire 1 w ip_instruction [19] $end
$var wire 1 x ip_instruction [18] $end
$var wire 1 y ip_instruction [17] $end
$var wire 1 z ip_instruction [16] $end
$var wire 1 { ip_instruction [15] $end
$var wire 1 | ip_instruction [14] $end
$var wire 1 } ip_instruction [13] $end
$var wire 1 ~ ip_instruction [12] $end
$var wire 1 !! ip_instruction [11] $end
$var wire 1 "! ip_instruction [10] $end
$var wire 1 #! ip_instruction [9] $end
$var wire 1 $! ip_instruction [8] $end
$var wire 1 %! ip_instruction [7] $end
$var wire 1 &! ip_instruction [6] $end
$var wire 1 '! ip_instruction [5] $end
$var wire 1 (! ip_instruction [4] $end
$var wire 1 )! ip_instruction [3] $end
$var wire 1 *! ip_instruction [2] $end
$var wire 1 +! ip_instruction [1] $end
$var wire 1 ,! ip_instruction [0] $end
$var wire 1 -! ip_R_format $end
$var wire 1 .! ip_I_format $end
$var wire 1 /! ip_Lw $end
$var wire 1 0! ip_Sw $end
$var wire 1 1! ip_Beq $end
$var wire 1 2! ip_RegWrite_EX $end
$var wire 1 3! ip_RegWrite_MEM $end
$var wire 1 4! ip_RegWrite_WB $end
$var wire 1 5! ip_dest_EX [4] $end
$var wire 1 6! ip_dest_EX [3] $end
$var wire 1 7! ip_dest_EX [2] $end
$var wire 1 8! ip_dest_EX [1] $end
$var wire 1 9! ip_dest_EX [0] $end
$var wire 1 :! ip_dest_MEM [4] $end
$var wire 1 ;! ip_dest_MEM [3] $end
$var wire 1 <! ip_dest_MEM [2] $end
$var wire 1 =! ip_dest_MEM [1] $end
$var wire 1 >! ip_dest_MEM [0] $end
$var wire 1 ?! ip_dest_WB [4] $end
$var wire 1 @! ip_dest_WB [3] $end
$var wire 1 A! ip_dest_WB [2] $end
$var wire 1 B! ip_dest_WB [1] $end
$var wire 1 C! ip_dest_WB [0] $end
$var reg 1 D! op_stall $end
$var reg 6 E! sig_opcode [5:0] $end
$var reg 5 F! sig_RS [4:0] $end
$var reg 5 G! sig_RT [4:0] $end
$var reg 1 H! use_RS $end
$var reg 1 I! use_RT $end
$var reg 1 J! RS_EX_hazard $end
$var reg 1 K! RS_hazard $end
$var reg 1 L! RT_EX_hazard $end
$var reg 1 M! RT_hazard $end
$upscope $end

$scope module my_CONTROL $end
$var wire 1 N! ip_instruction [31] $end
$var wire 1 O! ip_instruction [30] $end
$var wire 1 P! ip_instruction [29] $end
$var wire 1 Q! ip_instruction [28] $end
$var wire 1 R! ip_instruction [27] $end
$var wire 1 S! ip_instruction [26] $end
$var wire 1 T! ip_instruction [25] $end
$var wire 1 U! ip_instruction [24] $end
$var wire 1 V! ip_instruction [23] $end
$var wire 1 W! ip_instruction [22] $end
$var wire 1 X! ip_instruction [21] $end
$var wire 1 Y! ip_instruction [20] $end
$var wire 1 Z! ip_instruction [19] $end
$var wire 1 [! ip_instruction [18] $end
$var wire 1 \! ip_instruction [17] $end
$var wire 1 ]! ip_instruction [16] $end
$var wire 1 ^! ip_instruction [15] $end
$var wire 1 _! ip_instruction [14] $end
$var wire 1 `! ip_instruction [13] $end
$var wire 1 a! ip_instruction [12] $end
$var wire 1 b! ip_instruction [11] $end
$var wire 1 c! ip_instruction [10] $end
$var wire 1 d! ip_instruction [9] $end
$var wire 1 e! ip_instruction [8] $end
$var wire 1 f! ip_instruction [7] $end
$var wire 1 g! ip_instruction [6] $end
$var wire 1 h! ip_instruction [5] $end
$var wire 1 i! ip_instruction [4] $end
$var wire 1 j! ip_instruction [3] $end
$var wire 1 k! ip_instruction [2] $end
$var wire 1 l! ip_instruction [1] $end
$var wire 1 m! ip_instruction [0] $end
$var reg 1 n! op_RegDst $end
$var reg 1 o! op_MemtoReg $end
$var reg 1 p! op_RegWrite $end
$var reg 1 q! op_read_en $end
$var reg 1 r! op_write_en $end
$var reg 1 s! op_branch $end
$var reg 1 t! op_ALU_src $end
$var reg 2 u! op_ALU_op [1:0] $end
$var reg 1 v! op_R_format $end
$var reg 1 w! op_I_format $end
$var reg 1 x! op_Lw $end
$var reg 1 y! op_Sw $end
$var reg 1 z! op_Beq $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$var reg 1 {! R_format $end
$var reg 1 |! I_format $end
$var reg 1 }! Lw $end
$var reg 1 ~! Sw $end
$var reg 1 !" Beq $end
$var reg 1 "" NOP $end
$var reg 1 #" sig_RegDst $end
$var reg 1 $" sig_MemtoReg $end
$var reg 1 %" sig_RegWrite $end
$var reg 1 &" sig_read_en $end
$var reg 1 '" sig_write_en $end
$var reg 1 (" sig_branch $end
$var reg 1 )" sig_ALU_src $end
$var reg 2 *" sig_ALU_op [1:0] $end
$var reg 6 +" sig_opcode [5:0] $end
$var reg 1 ," reg_RegDst $end
$var reg 1 -" reg_MemtoReg $end
$var reg 1 ." reg_RegWrite $end
$var reg 1 /" reg_read_en $end
$var reg 1 0" reg_write_en $end
$var reg 1 1" reg_branch $end
$var reg 1 2" reg_ALU_src $end
$var reg 2 3" reg_ALU_op [1:0] $end
$upscope $end

$scope module my_IFETCH $end
$var parameter 32 4" PARAM_RAM_length $end
$var parameter 32 5" PARAM_RAM_addr_bits $end
$var wire 1 6" ip_branch $end
$var wire 1 7" ip_stall $end
$var wire 1 8" ip_add_result [7] $end
$var wire 1 9" ip_add_result [6] $end
$var wire 1 :" ip_add_result [5] $end
$var wire 1 ;" ip_add_result [4] $end
$var wire 1 <" ip_add_result [3] $end
$var wire 1 =" ip_add_result [2] $end
$var wire 1 >" ip_add_result [1] $end
$var wire 1 ?" ip_add_result [0] $end
$var wire 1 @" ip_zero $end
$var reg 32 A" op_instruction [31:0] $end
$var reg 10 B" op_PC [9:0] $end
$var reg 10 C" op_PC_plus_4 [9:0] $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$var reg 6 D" instr_mem_addr [5:0] $end
$var reg 32 E" sig_instruction [31:0] $end
$var reg 10 F" PC [9:0] $end
$var reg 10 G" Next_PC [9:0] $end
$var reg 32 H" reg_instruction [31:0] $end
$var reg 10 I" reg_PC [9:0] $end
$upscope $end

$scope module my_IDECODE $end
$var reg 6 J" op_function_opcode [5:0] $end
$var reg 10 K" op_PC_plus_4 [9:0] $end
$var reg 32 L" op_read_data_1 [31:0] $end
$var reg 32 M" op_read_data_2 [31:0] $end
$var reg 32 N" op_immediate [31:0] $end
$var reg 5 O" op_dest_reg_R_type [4:0] $end
$var reg 5 P" op_dest_reg_I_type [4:0] $end
$var reg 5 Q" op_dec_rs [4:0] $end
$var reg 5 R" op_dec_rt [4:0] $end
$var wire 1 S" ip_PC_plus_4 [9] $end
$var wire 1 T" ip_PC_plus_4 [8] $end
$var wire 1 U" ip_PC_plus_4 [7] $end
$var wire 1 V" ip_PC_plus_4 [6] $end
$var wire 1 W" ip_PC_plus_4 [5] $end
$var wire 1 X" ip_PC_plus_4 [4] $end
$var wire 1 Y" ip_PC_plus_4 [3] $end
$var wire 1 Z" ip_PC_plus_4 [2] $end
$var wire 1 [" ip_PC_plus_4 [1] $end
$var wire 1 \" ip_PC_plus_4 [0] $end
$var wire 1 ]" ip_instruction [31] $end
$var wire 1 ^" ip_instruction [30] $end
$var wire 1 _" ip_instruction [29] $end
$var wire 1 `" ip_instruction [28] $end
$var wire 1 a" ip_instruction [27] $end
$var wire 1 b" ip_instruction [26] $end
$var wire 1 c" ip_instruction [25] $end
$var wire 1 d" ip_instruction [24] $end
$var wire 1 e" ip_instruction [23] $end
$var wire 1 f" ip_instruction [22] $end
$var wire 1 g" ip_instruction [21] $end
$var wire 1 h" ip_instruction [20] $end
$var wire 1 i" ip_instruction [19] $end
$var wire 1 j" ip_instruction [18] $end
$var wire 1 k" ip_instruction [17] $end
$var wire 1 l" ip_instruction [16] $end
$var wire 1 m" ip_instruction [15] $end
$var wire 1 n" ip_instruction [14] $end
$var wire 1 o" ip_instruction [13] $end
$var wire 1 p" ip_instruction [12] $end
$var wire 1 q" ip_instruction [11] $end
$var wire 1 r" ip_instruction [10] $end
$var wire 1 s" ip_instruction [9] $end
$var wire 1 t" ip_instruction [8] $end
$var wire 1 u" ip_instruction [7] $end
$var wire 1 v" ip_instruction [6] $end
$var wire 1 w" ip_instruction [5] $end
$var wire 1 x" ip_instruction [4] $end
$var wire 1 y" ip_instruction [3] $end
$var wire 1 z" ip_instruction [2] $end
$var wire 1 {" ip_instruction [1] $end
$var wire 1 |" ip_instruction [0] $end
$var wire 1 }" ip_stall $end
$var wire 1 ~" ip_write_reg_addr [4] $end
$var wire 1 !# ip_write_reg_addr [3] $end
$var wire 1 "# ip_write_reg_addr [2] $end
$var wire 1 ## ip_write_reg_addr [1] $end
$var wire 1 $# ip_write_reg_addr [0] $end
$var wire 1 %# ip_write_data [31] $end
$var wire 1 &# ip_write_data [30] $end
$var wire 1 '# ip_write_data [29] $end
$var wire 1 (# ip_write_data [28] $end
$var wire 1 )# ip_write_data [27] $end
$var wire 1 *# ip_write_data [26] $end
$var wire 1 +# ip_write_data [25] $end
$var wire 1 ,# ip_write_data [24] $end
$var wire 1 -# ip_write_data [23] $end
$var wire 1 .# ip_write_data [22] $end
$var wire 1 /# ip_write_data [21] $end
$var wire 1 0# ip_write_data [20] $end
$var wire 1 1# ip_write_data [19] $end
$var wire 1 2# ip_write_data [18] $end
$var wire 1 3# ip_write_data [17] $end
$var wire 1 4# ip_write_data [16] $end
$var wire 1 5# ip_write_data [15] $end
$var wire 1 6# ip_write_data [14] $end
$var wire 1 7# ip_write_data [13] $end
$var wire 1 8# ip_write_data [12] $end
$var wire 1 9# ip_write_data [11] $end
$var wire 1 :# ip_write_data [10] $end
$var wire 1 ;# ip_write_data [9] $end
$var wire 1 <# ip_write_data [8] $end
$var wire 1 =# ip_write_data [7] $end
$var wire 1 ># ip_write_data [6] $end
$var wire 1 ?# ip_write_data [5] $end
$var wire 1 @# ip_write_data [4] $end
$var wire 1 A# ip_write_data [3] $end
$var wire 1 B# ip_write_data [2] $end
$var wire 1 C# ip_write_data [1] $end
$var wire 1 D# ip_write_data [0] $end
$var wire 1 E# ip_RegWrite $end
$var wire 1 F# ip_zero $end
$var wire 1 G# ip_branch $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$var reg 5 H# read_register_1_address [4:0] $end
$var reg 5 I# read_register_2_address [4:0] $end
$var reg 5 J# sig_dest_reg_R_type [4:0] $end
$var reg 5 K# sig_dest_reg_I_type [4:0] $end
$var reg 32 L# Instruction_immediate_value [31:0] $end
$var reg 6 M# sig_function_opcode [5:0] $end
$var reg 6 N# reg_function_opcode [5:0] $end
$var reg 10 O# reg_PC_plus_4 [9:0] $end
$var reg 32 P# reg_read_data_1 [31:0] $end
$var reg 32 Q# reg_read_data_2 [31:0] $end
$var reg 32 R# reg_immediate [31:0] $end
$var reg 5 S# reg_dest_reg_R_type [4:0] $end
$var reg 5 T# reg_dest_reg_I_type [4:0] $end
$var reg 5 U# reg_dec_rs [4:0] $end
$var reg 5 V# reg_dec_rt [4:0] $end
$upscope $end

$scope module FWD_CONT $end
$var wire 1 W# ip_EX_MEM_RegWrite $end
$var wire 1 X# ip_MEM_WB_RegWrite $end
$var wire 1 Y# ip_EX_MEM_dest [4] $end
$var wire 1 Z# ip_EX_MEM_dest [3] $end
$var wire 1 [# ip_EX_MEM_dest [2] $end
$var wire 1 \# ip_EX_MEM_dest [1] $end
$var wire 1 ]# ip_EX_MEM_dest [0] $end
$var wire 1 ^# ip_MEM_WB_dest [4] $end
$var wire 1 _# ip_MEM_WB_dest [3] $end
$var wire 1 `# ip_MEM_WB_dest [2] $end
$var wire 1 a# ip_MEM_WB_dest [1] $end
$var wire 1 b# ip_MEM_WB_dest [0] $end
$var wire 1 c# ip_DEC_DEST_RS [4] $end
$var wire 1 d# ip_DEC_DEST_RS [3] $end
$var wire 1 e# ip_DEC_DEST_RS [2] $end
$var wire 1 f# ip_DEC_DEST_RS [1] $end
$var wire 1 g# ip_DEC_DEST_RS [0] $end
$var wire 1 h# ip_DEC_DEST_RT [4] $end
$var wire 1 i# ip_DEC_DEST_RT [3] $end
$var wire 1 j# ip_DEC_DEST_RT [2] $end
$var wire 1 k# ip_DEC_DEST_RT [1] $end
$var wire 1 l# ip_DEC_DEST_RT [0] $end
$var reg 2 m# op_FA [1:0] $end
$var reg 2 n# op_FB [1:0] $end
$var reg 1 o# dest_match_EX_MEM_A $end
$var reg 1 p# dest_match_MEM_WB_A $end
$var reg 1 q# dest_match_EX_MEM_B $end
$var reg 1 r# dest_match_MEM_WB_B $end
$upscope $end

$scope module my_EXECUTE $end
$var wire 1 s# ip_opcode [5] $end
$var wire 1 t# ip_opcode [4] $end
$var wire 1 u# ip_opcode [3] $end
$var wire 1 v# ip_opcode [2] $end
$var wire 1 w# ip_opcode [1] $end
$var wire 1 x# ip_opcode [0] $end
$var wire 1 y# ip_function_opcode [5] $end
$var wire 1 z# ip_function_opcode [4] $end
$var wire 1 {# ip_function_opcode [3] $end
$var wire 1 |# ip_function_opcode [2] $end
$var wire 1 }# ip_function_opcode [1] $end
$var wire 1 ~# ip_function_opcode [0] $end
$var wire 1 !$ ip_PC_plus_4 [9] $end
$var wire 1 "$ ip_PC_plus_4 [8] $end
$var wire 1 #$ ip_PC_plus_4 [7] $end
$var wire 1 $$ ip_PC_plus_4 [6] $end
$var wire 1 %$ ip_PC_plus_4 [5] $end
$var wire 1 &$ ip_PC_plus_4 [4] $end
$var wire 1 '$ ip_PC_plus_4 [3] $end
$var wire 1 ($ ip_PC_plus_4 [2] $end
$var wire 1 )$ ip_PC_plus_4 [1] $end
$var wire 1 *$ ip_PC_plus_4 [0] $end
$var wire 1 +$ ip_read_data_1 [31] $end
$var wire 1 ,$ ip_read_data_1 [30] $end
$var wire 1 -$ ip_read_data_1 [29] $end
$var wire 1 .$ ip_read_data_1 [28] $end
$var wire 1 /$ ip_read_data_1 [27] $end
$var wire 1 0$ ip_read_data_1 [26] $end
$var wire 1 1$ ip_read_data_1 [25] $end
$var wire 1 2$ ip_read_data_1 [24] $end
$var wire 1 3$ ip_read_data_1 [23] $end
$var wire 1 4$ ip_read_data_1 [22] $end
$var wire 1 5$ ip_read_data_1 [21] $end
$var wire 1 6$ ip_read_data_1 [20] $end
$var wire 1 7$ ip_read_data_1 [19] $end
$var wire 1 8$ ip_read_data_1 [18] $end
$var wire 1 9$ ip_read_data_1 [17] $end
$var wire 1 :$ ip_read_data_1 [16] $end
$var wire 1 ;$ ip_read_data_1 [15] $end
$var wire 1 <$ ip_read_data_1 [14] $end
$var wire 1 =$ ip_read_data_1 [13] $end
$var wire 1 >$ ip_read_data_1 [12] $end
$var wire 1 ?$ ip_read_data_1 [11] $end
$var wire 1 @$ ip_read_data_1 [10] $end
$var wire 1 A$ ip_read_data_1 [9] $end
$var wire 1 B$ ip_read_data_1 [8] $end
$var wire 1 C$ ip_read_data_1 [7] $end
$var wire 1 D$ ip_read_data_1 [6] $end
$var wire 1 E$ ip_read_data_1 [5] $end
$var wire 1 F$ ip_read_data_1 [4] $end
$var wire 1 G$ ip_read_data_1 [3] $end
$var wire 1 H$ ip_read_data_1 [2] $end
$var wire 1 I$ ip_read_data_1 [1] $end
$var wire 1 J$ ip_read_data_1 [0] $end
$var wire 1 K$ ip_read_data_2 [31] $end
$var wire 1 L$ ip_read_data_2 [30] $end
$var wire 1 M$ ip_read_data_2 [29] $end
$var wire 1 N$ ip_read_data_2 [28] $end
$var wire 1 O$ ip_read_data_2 [27] $end
$var wire 1 P$ ip_read_data_2 [26] $end
$var wire 1 Q$ ip_read_data_2 [25] $end
$var wire 1 R$ ip_read_data_2 [24] $end
$var wire 1 S$ ip_read_data_2 [23] $end
$var wire 1 T$ ip_read_data_2 [22] $end
$var wire 1 U$ ip_read_data_2 [21] $end
$var wire 1 V$ ip_read_data_2 [20] $end
$var wire 1 W$ ip_read_data_2 [19] $end
$var wire 1 X$ ip_read_data_2 [18] $end
$var wire 1 Y$ ip_read_data_2 [17] $end
$var wire 1 Z$ ip_read_data_2 [16] $end
$var wire 1 [$ ip_read_data_2 [15] $end
$var wire 1 \$ ip_read_data_2 [14] $end
$var wire 1 ]$ ip_read_data_2 [13] $end
$var wire 1 ^$ ip_read_data_2 [12] $end
$var wire 1 _$ ip_read_data_2 [11] $end
$var wire 1 `$ ip_read_data_2 [10] $end
$var wire 1 a$ ip_read_data_2 [9] $end
$var wire 1 b$ ip_read_data_2 [8] $end
$var wire 1 c$ ip_read_data_2 [7] $end
$var wire 1 d$ ip_read_data_2 [6] $end
$var wire 1 e$ ip_read_data_2 [5] $end
$var wire 1 f$ ip_read_data_2 [4] $end
$var wire 1 g$ ip_read_data_2 [3] $end
$var wire 1 h$ ip_read_data_2 [2] $end
$var wire 1 i$ ip_read_data_2 [1] $end
$var wire 1 j$ ip_read_data_2 [0] $end
$var wire 1 k$ ip_immediate [31] $end
$var wire 1 l$ ip_immediate [30] $end
$var wire 1 m$ ip_immediate [29] $end
$var wire 1 n$ ip_immediate [28] $end
$var wire 1 o$ ip_immediate [27] $end
$var wire 1 p$ ip_immediate [26] $end
$var wire 1 q$ ip_immediate [25] $end
$var wire 1 r$ ip_immediate [24] $end
$var wire 1 s$ ip_immediate [23] $end
$var wire 1 t$ ip_immediate [22] $end
$var wire 1 u$ ip_immediate [21] $end
$var wire 1 v$ ip_immediate [20] $end
$var wire 1 w$ ip_immediate [19] $end
$var wire 1 x$ ip_immediate [18] $end
$var wire 1 y$ ip_immediate [17] $end
$var wire 1 z$ ip_immediate [16] $end
$var wire 1 {$ ip_immediate [15] $end
$var wire 1 |$ ip_immediate [14] $end
$var wire 1 }$ ip_immediate [13] $end
$var wire 1 ~$ ip_immediate [12] $end
$var wire 1 !% ip_immediate [11] $end
$var wire 1 "% ip_immediate [10] $end
$var wire 1 #% ip_immediate [9] $end
$var wire 1 $% ip_immediate [8] $end
$var wire 1 %% ip_immediate [7] $end
$var wire 1 &% ip_immediate [6] $end
$var wire 1 '% ip_immediate [5] $end
$var wire 1 (% ip_immediate [4] $end
$var wire 1 )% ip_immediate [3] $end
$var wire 1 *% ip_immediate [2] $end
$var wire 1 +% ip_immediate [1] $end
$var wire 1 ,% ip_immediate [0] $end
$var wire 1 -% ip_dest_reg_R_type [4] $end
$var wire 1 .% ip_dest_reg_R_type [3] $end
$var wire 1 /% ip_dest_reg_R_type [2] $end
$var wire 1 0% ip_dest_reg_R_type [1] $end
$var wire 1 1% ip_dest_reg_R_type [0] $end
$var wire 1 2% ip_dest_reg_I_type [4] $end
$var wire 1 3% ip_dest_reg_I_type [3] $end
$var wire 1 4% ip_dest_reg_I_type [2] $end
$var wire 1 5% ip_dest_reg_I_type [1] $end
$var wire 1 6% ip_dest_reg_I_type [0] $end
$var wire 1 7% ip_ALU_op [1] $end
$var wire 1 8% ip_ALU_op [0] $end
$var wire 1 9% ip_ALU_src $end
$var wire 1 :% ip_RegDst $end
$var wire 1 ;% ip_MemtoReg $end
$var wire 1 <% ip_RegWrite $end
$var wire 1 =% ip_read_en $end
$var wire 1 >% ip_write_en $end
$var wire 1 ?% ip_branch $end
$var reg 1 @% op_zero $end
$var reg 1 A% op_MemtoReg $end
$var reg 1 B% op_RegWrite $end
$var reg 1 C% op_read_en $end
$var reg 1 D% op_write_en $end
$var reg 1 E% op_branch $end
$var reg 32 F% op_ALU_result [31:0] $end
$var reg 8 G% op_Add_result [7:0] $end
$var reg 32 H% op_memory_write_data [31:0] $end
$var reg 5 I% op_dest_reg [4:0] $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$var wire 1 J% ALU_result_MEM [31] $end
$var wire 1 K% ALU_result_MEM [30] $end
$var wire 1 L% ALU_result_MEM [29] $end
$var wire 1 M% ALU_result_MEM [28] $end
$var wire 1 N% ALU_result_MEM [27] $end
$var wire 1 O% ALU_result_MEM [26] $end
$var wire 1 P% ALU_result_MEM [25] $end
$var wire 1 Q% ALU_result_MEM [24] $end
$var wire 1 R% ALU_result_MEM [23] $end
$var wire 1 S% ALU_result_MEM [22] $end
$var wire 1 T% ALU_result_MEM [21] $end
$var wire 1 U% ALU_result_MEM [20] $end
$var wire 1 V% ALU_result_MEM [19] $end
$var wire 1 W% ALU_result_MEM [18] $end
$var wire 1 X% ALU_result_MEM [17] $end
$var wire 1 Y% ALU_result_MEM [16] $end
$var wire 1 Z% ALU_result_MEM [15] $end
$var wire 1 [% ALU_result_MEM [14] $end
$var wire 1 \% ALU_result_MEM [13] $end
$var wire 1 ]% ALU_result_MEM [12] $end
$var wire 1 ^% ALU_result_MEM [11] $end
$var wire 1 _% ALU_result_MEM [10] $end
$var wire 1 `% ALU_result_MEM [9] $end
$var wire 1 a% ALU_result_MEM [8] $end
$var wire 1 b% ALU_result_MEM [7] $end
$var wire 1 c% ALU_result_MEM [6] $end
$var wire 1 d% ALU_result_MEM [5] $end
$var wire 1 e% ALU_result_MEM [4] $end
$var wire 1 f% ALU_result_MEM [3] $end
$var wire 1 g% ALU_result_MEM [2] $end
$var wire 1 h% ALU_result_MEM [1] $end
$var wire 1 i% ALU_result_MEM [0] $end
$var wire 1 j% read_data_wb [31] $end
$var wire 1 k% read_data_wb [30] $end
$var wire 1 l% read_data_wb [29] $end
$var wire 1 m% read_data_wb [28] $end
$var wire 1 n% read_data_wb [27] $end
$var wire 1 o% read_data_wb [26] $end
$var wire 1 p% read_data_wb [25] $end
$var wire 1 q% read_data_wb [24] $end
$var wire 1 r% read_data_wb [23] $end
$var wire 1 s% read_data_wb [22] $end
$var wire 1 t% read_data_wb [21] $end
$var wire 1 u% read_data_wb [20] $end
$var wire 1 v% read_data_wb [19] $end
$var wire 1 w% read_data_wb [18] $end
$var wire 1 x% read_data_wb [17] $end
$var wire 1 y% read_data_wb [16] $end
$var wire 1 z% read_data_wb [15] $end
$var wire 1 {% read_data_wb [14] $end
$var wire 1 |% read_data_wb [13] $end
$var wire 1 }% read_data_wb [12] $end
$var wire 1 ~% read_data_wb [11] $end
$var wire 1 !& read_data_wb [10] $end
$var wire 1 "& read_data_wb [9] $end
$var wire 1 #& read_data_wb [8] $end
$var wire 1 $& read_data_wb [7] $end
$var wire 1 %& read_data_wb [6] $end
$var wire 1 && read_data_wb [5] $end
$var wire 1 '& read_data_wb [4] $end
$var wire 1 (& read_data_wb [3] $end
$var wire 1 )& read_data_wb [2] $end
$var wire 1 *& read_data_wb [1] $end
$var wire 1 +& read_data_wb [0] $end
$var wire 1 ,& MemtoReg_MEM $end
$var wire 1 -& FA [1] $end
$var wire 1 .& FA [0] $end
$var wire 1 /& FB [1] $end
$var wire 1 0& FB [0] $end
$var reg 32 1& A_input [31:0] $end
$var reg 32 2& B_input [31:0] $end
$var reg 3 3& ALU_ctl [2:0] $end
$var reg 32 4& sig_ALU_result [31:0] $end
$var reg 1 5& sig_zero $end
$var reg 5 6& sig_dest_reg [4:0] $end
$var reg 8 7& sig_Add_result [7:0] $end
$var reg 32 8& reg_ALU_result [31:0] $end
$var reg 8 9& reg_Add_result [7:0] $end
$var reg 32 :& reg_memory_write_data [31:0] $end
$var reg 5 ;& reg_dest_reg [4:0] $end
$var reg 1 <& reg_zero $end
$var reg 1 =& reg_MemtoReg $end
$var reg 1 >& reg_RegWrite $end
$var reg 1 ?& reg_read_en $end
$var reg 1 @& reg_write_en $end
$var reg 1 A& reg_branch $end
$upscope $end

$scope module my_DMEMORY $end
$var parameter 32 B& PARAM_MEM_length $end
$var parameter 32 C& PARAM_RAM_addr_bits $end
$var wire 1 D& ip_MemtoReg $end
$var wire 1 E& ip_RegWrite $end
$var wire 1 F& ip_read_en $end
$var wire 1 G& ip_write_en $end
$var wire 1 H& ip_data [31] $end
$var wire 1 I& ip_data [30] $end
$var wire 1 J& ip_data [29] $end
$var wire 1 K& ip_data [28] $end
$var wire 1 L& ip_data [27] $end
$var wire 1 M& ip_data [26] $end
$var wire 1 N& ip_data [25] $end
$var wire 1 O& ip_data [24] $end
$var wire 1 P& ip_data [23] $end
$var wire 1 Q& ip_data [22] $end
$var wire 1 R& ip_data [21] $end
$var wire 1 S& ip_data [20] $end
$var wire 1 T& ip_data [19] $end
$var wire 1 U& ip_data [18] $end
$var wire 1 V& ip_data [17] $end
$var wire 1 W& ip_data [16] $end
$var wire 1 X& ip_data [15] $end
$var wire 1 Y& ip_data [14] $end
$var wire 1 Z& ip_data [13] $end
$var wire 1 [& ip_data [12] $end
$var wire 1 \& ip_data [11] $end
$var wire 1 ]& ip_data [10] $end
$var wire 1 ^& ip_data [9] $end
$var wire 1 _& ip_data [8] $end
$var wire 1 `& ip_data [7] $end
$var wire 1 a& ip_data [6] $end
$var wire 1 b& ip_data [5] $end
$var wire 1 c& ip_data [4] $end
$var wire 1 d& ip_data [3] $end
$var wire 1 e& ip_data [2] $end
$var wire 1 f& ip_data [1] $end
$var wire 1 g& ip_data [0] $end
$var wire 1 h& ip_ALU_output [31] $end
$var wire 1 i& ip_ALU_output [30] $end
$var wire 1 j& ip_ALU_output [29] $end
$var wire 1 k& ip_ALU_output [28] $end
$var wire 1 l& ip_ALU_output [27] $end
$var wire 1 m& ip_ALU_output [26] $end
$var wire 1 n& ip_ALU_output [25] $end
$var wire 1 o& ip_ALU_output [24] $end
$var wire 1 p& ip_ALU_output [23] $end
$var wire 1 q& ip_ALU_output [22] $end
$var wire 1 r& ip_ALU_output [21] $end
$var wire 1 s& ip_ALU_output [20] $end
$var wire 1 t& ip_ALU_output [19] $end
$var wire 1 u& ip_ALU_output [18] $end
$var wire 1 v& ip_ALU_output [17] $end
$var wire 1 w& ip_ALU_output [16] $end
$var wire 1 x& ip_ALU_output [15] $end
$var wire 1 y& ip_ALU_output [14] $end
$var wire 1 z& ip_ALU_output [13] $end
$var wire 1 {& ip_ALU_output [12] $end
$var wire 1 |& ip_ALU_output [11] $end
$var wire 1 }& ip_ALU_output [10] $end
$var wire 1 ~& ip_ALU_output [9] $end
$var wire 1 !' ip_ALU_output [8] $end
$var wire 1 "' ip_ALU_output [7] $end
$var wire 1 #' ip_ALU_output [6] $end
$var wire 1 $' ip_ALU_output [5] $end
$var wire 1 %' ip_ALU_output [4] $end
$var wire 1 &' ip_ALU_output [3] $end
$var wire 1 '' ip_ALU_output [2] $end
$var wire 1 (' ip_ALU_output [1] $end
$var wire 1 )' ip_ALU_output [0] $end
$var wire 1 *' ip_dest_reg [4] $end
$var wire 1 +' ip_dest_reg [3] $end
$var wire 1 ,' ip_dest_reg [2] $end
$var wire 1 -' ip_dest_reg [1] $end
$var wire 1 .' ip_dest_reg [0] $end
$var reg 1 /' op_MemtoReg $end
$var reg 1 0' op_RegWrite $end
$var reg 32 1' op_data [31:0] $end
$var reg 32 2' op_ALU_output [31:0] $end
$var reg 5 3' op_dest_reg [4:0] $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$var reg 8 4' data_RAM_addr [7:0] $end
$var reg 32 5' sig_data [31:0] $end
$var reg 1 6' reg_MemtoReg $end
$var reg 1 7' reg_RegWrite $end
$var reg 32 8' reg_data [31:0] $end
$var reg 32 9' reg_ALU_output [31:0] $end
$var reg 5 :' reg_dest_reg [4:0] $end
$upscope $end

$scope module my_WRITE_BACK $end
$var wire 1 ;' ip_MemtoReg $end
$var wire 1 <' ip_RegWrite $end
$var wire 1 =' ip_memory_data [31] $end
$var wire 1 >' ip_memory_data [30] $end
$var wire 1 ?' ip_memory_data [29] $end
$var wire 1 @' ip_memory_data [28] $end
$var wire 1 A' ip_memory_data [27] $end
$var wire 1 B' ip_memory_data [26] $end
$var wire 1 C' ip_memory_data [25] $end
$var wire 1 D' ip_memory_data [24] $end
$var wire 1 E' ip_memory_data [23] $end
$var wire 1 F' ip_memory_data [22] $end
$var wire 1 G' ip_memory_data [21] $end
$var wire 1 H' ip_memory_data [20] $end
$var wire 1 I' ip_memory_data [19] $end
$var wire 1 J' ip_memory_data [18] $end
$var wire 1 K' ip_memory_data [17] $end
$var wire 1 L' ip_memory_data [16] $end
$var wire 1 M' ip_memory_data [15] $end
$var wire 1 N' ip_memory_data [14] $end
$var wire 1 O' ip_memory_data [13] $end
$var wire 1 P' ip_memory_data [12] $end
$var wire 1 Q' ip_memory_data [11] $end
$var wire 1 R' ip_memory_data [10] $end
$var wire 1 S' ip_memory_data [9] $end
$var wire 1 T' ip_memory_data [8] $end
$var wire 1 U' ip_memory_data [7] $end
$var wire 1 V' ip_memory_data [6] $end
$var wire 1 W' ip_memory_data [5] $end
$var wire 1 X' ip_memory_data [4] $end
$var wire 1 Y' ip_memory_data [3] $end
$var wire 1 Z' ip_memory_data [2] $end
$var wire 1 [' ip_memory_data [1] $end
$var wire 1 \' ip_memory_data [0] $end
$var wire 1 ]' ip_ALU_result [31] $end
$var wire 1 ^' ip_ALU_result [30] $end
$var wire 1 _' ip_ALU_result [29] $end
$var wire 1 `' ip_ALU_result [28] $end
$var wire 1 a' ip_ALU_result [27] $end
$var wire 1 b' ip_ALU_result [26] $end
$var wire 1 c' ip_ALU_result [25] $end
$var wire 1 d' ip_ALU_result [24] $end
$var wire 1 e' ip_ALU_result [23] $end
$var wire 1 f' ip_ALU_result [22] $end
$var wire 1 g' ip_ALU_result [21] $end
$var wire 1 h' ip_ALU_result [20] $end
$var wire 1 i' ip_ALU_result [19] $end
$var wire 1 j' ip_ALU_result [18] $end
$var wire 1 k' ip_ALU_result [17] $end
$var wire 1 l' ip_ALU_result [16] $end
$var wire 1 m' ip_ALU_result [15] $end
$var wire 1 n' ip_ALU_result [14] $end
$var wire 1 o' ip_ALU_result [13] $end
$var wire 1 p' ip_ALU_result [12] $end
$var wire 1 q' ip_ALU_result [11] $end
$var wire 1 r' ip_ALU_result [10] $end
$var wire 1 s' ip_ALU_result [9] $end
$var wire 1 t' ip_ALU_result [8] $end
$var wire 1 u' ip_ALU_result [7] $end
$var wire 1 v' ip_ALU_result [6] $end
$var wire 1 w' ip_ALU_result [5] $end
$var wire 1 x' ip_ALU_result [4] $end
$var wire 1 y' ip_ALU_result [3] $end
$var wire 1 z' ip_ALU_result [2] $end
$var wire 1 {' ip_ALU_result [1] $end
$var wire 1 |' ip_ALU_result [0] $end
$var wire 1 }' ip_dest_reg [4] $end
$var wire 1 ~' ip_dest_reg [3] $end
$var wire 1 !( ip_dest_reg [2] $end
$var wire 1 "( ip_dest_reg [1] $end
$var wire 1 #( ip_dest_reg [0] $end
$var reg 1 $( op_RegWrite $end
$var reg 32 %( op_write_data [31:0] $end
$var reg 5 &( op_dest_reg [4:0] $end
$var wire 1 0 clock $end
$var wire 1 1 reset $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1!
1"
b0 $
b0 %
b0 &
b0 '
bx (
b0 )
x*
0+
x,
x-
x.
b0 /
b0 2
b0 3
b0 4
b0 5
bx 6
b0 7
x8
09
x:
x;
x<
b100 =
b0 >
b0 ?
b0 @
b0 A
b0 B
b0 C
b0 D
bx E
bx F
xG
xH
0I
xJ
xK
0L
xM
0N
xO
0P
xQ
xR
0S
bx T
b0 U
xV
1W
0X
0Y
0Z
0[
b0 \
b0 ]
0^
x_
x`
b0 a
bx b
bx c
b0 d
bx e
b0 f
b0 g
b0 h
b0 i
b0 j
xD!
b0 E!
b0 F!
b0 G!
1H!
1I!
xJ!
xK!
xL!
xM!
xn!
xo!
xp!
xq!
xr!
xs!
xt!
bx u!
1v!
0w!
0x!
0y!
0z!
1{!
0|!
0}!
0~!
0!"
1""
0#"
0$"
0%"
0&"
0'"
0("
0)"
b10 *"
b0 +"
x,"
x-"
x."
x/"
x0"
x1"
x2"
bx 3"
b0 A"
b0 B"
b100 C"
b1 D"
bx E"
b0 F"
b100 G"
b0 H"
b0 I"
b0 J"
b0 K"
b0 L"
b0 M"
b0 N"
b0 O"
b0 P"
b0 Q"
b0 R"
b0 H#
b0 I#
b0 J#
b0 K#
b0 L#
b0 M#
b0 N#
b0 O#
b0 P#
b0 Q#
b0 R#
b0 S#
b0 T#
b0 U#
b0 V#
b0 m#
b0 n#
1o#
xp#
1q#
xr#
0@%
0A%
0B%
0C%
0D%
0E%
b0 F%
b0 G%
b0 H%
b0 I%
b0 1&
b0 2&
bx10 3&
b0 4&
15&
b0 6&
b0 7&
b0 8&
b0 9&
b0 :&
b0 ;&
0<&
0=&
0>&
0?&
0@&
0A&
x/'
x0'
bx 1'
bx 2'
bx 3'
b0 4'
b0 5'
x6'
x7'
bx 8'
bx 9'
bx :'
x$(
bx %(
bx &(
b1000000 4"
b110 5"
b100000000 B&
b1000 C&
b100000 #
11
10
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
1-!
0.!
0/!
00!
01!
x2!
03!
x4!
09!
08!
07!
06!
05!
0>!
0=!
0<!
0;!
0:!
xC!
xB!
xA!
x@!
x?!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
06"
x7"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
0@"
0\"
0["
1Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
x}"
x$#
x##
x"#
x!#
x~"
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
xE#
zF#
zG#
0W#
xX#
0]#
0\#
0[#
0Z#
0Y#
xb#
xa#
x`#
x_#
x^#
0g#
0f#
0e#
0d#
0c#
0l#
0k#
0j#
0i#
0h#
0~#
0}#
0|#
0{#
0z#
0y#
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
01%
00%
0/%
0.%
0-%
06%
05%
04%
03%
02%
x8%
x7%
x9%
x:%
x;%
x<%
x=%
x>%
x?%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
x,&
0.&
0-&
00&
0/&
zx#
zw#
zv#
zu#
zt#
zs#
0D&
0E&
0F&
0G&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0.'
0-'
0,'
0+'
0*'
x;'
x<'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x#(
x"(
x!(
x~'
x}'
$end
#1000
0!
00
#2000
1!
10
0,"
0-"
0."
0/"
00"
01"
02"
b10 3"
b100100001000010000000000000010 E"
b0 8'
b0 9'
b0 :'
06'
07'
00'
0/'
b0 3'
b0 2'
b0 1'
b10 u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0J
0O
0K
0R
0M
0H
0G
b10 T
b0 F
b0 E
b0 b
0Q
0_
08
0:
0;
0:%
0;%
0<%
02!
0=%
0>%
0?%
0C!
0B!
0A!
0@!
0?!
0b#
0a#
0`#
0_#
0^#
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
08%
17%
0;'
0,&
0<'
04!
0$(
b10 3&
b0 %(
b0 &(
1p#
1r#
0J!
0L!
0-
0,
0*
0M!
0K!
b0 c
b0 e
0`
b0 6
0D!
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0E#
0V
b0 (
0<
0}"
0.
09%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0X#
07"
#3000
0!
00
#4000
1!
10
#5000
0"
01
0!
00
#6000
1!
10
b100 F"
b100100001000010000000000000010 H"
b100 O#
1<&
b1 /
1@%
b100 K"
b100100001000010000000000000010 A"
b100100001000010000000000000010 U
b100 >
1L
19
b100100001000010000000000000010 7
1($
1+!
1z
1u
1p
1m
1l!
1]!
1X!
1S!
1P!
1{"
1l"
1g"
1b"
1_"
b1 H#
b1 I#
b1 K#
b10 L#
b10 M#
b1001 +"
0""
b1001 E!
b1 F!
b1 G!
b100 7&
b100100001000010000000000000010 )
1+
1#"
1%"
1|!
0{!
b0 *"
0v!
0#"
0%"
1w!
1X
0W
1.!
0-!
0I!
1@"
b1000 G"
b10 D"
#7000
0!
00
#8000
1!
10
b0 3"
b10001100000000100000000000000000 E"
b1000 F"
b100 I"
b10 N#
b1 P#
b1 Q#
b10 R#
b1 T#
b1 U#
b1 V#
b100 9&
b10 /
b100 G%
b1 R"
b1 Q"
b1 P"
b10 N"
b1 M"
b1 L"
b10 J"
b100 B"
b1000 C"
b0 u!
b0 T
b1000 =
b100 2
b10 ?
b1 @
b1 A
b10 B
b1 ]
b1 g
b1 f
b100 C
b1 j
b1 5
b1 4
b100 $
16%
1}#
0Z"
1Y"
07%
b1 6&
b1 &
b1 '
19!
1="
1l#
1g#
1+%
1j$
1J$
b1100 7&
0o#
0p#
0q#
0r#
b1 1&
b1 2&
b10 4&
05&
b1100 G"
b11 D"
#9000
0!
00
#10000
1!
10
b1000100001100000100000 E"
b1100 F"
b10001100000000100000000000000000 H"
b1000 I"
b1000 O#
b10 8&
b1100 9&
b1 :&
b1 ;&
0<&
b11 /
0@%
b1 I%
b1 H%
b1100 G%
b10 F%
b1000 K"
b1000 B"
b1100 C"
b10001100000000100000000000000000 A"
b10001100000000100000000000000000 U
b1100 =
b1000 2
b1000 >
b10 D
b1100 C
b1 d
b1 a
0L
09
b10 3
b1000 $
b10001100000000100000000000000000 7
1>!
1]#
1.'
1g&
1('
0($
1'$
1Z"
0+!
0z
1y
0u
1o
0m
1k
0l!
0]!
1\!
0X!
1R!
0P!
1N!
0{"
0l"
1k"
0g"
1a"
0_"
1]"
b0 H#
b10 I#
b10 K#
b0 L#
b0 M#
b100011 +"
b100011 E!
b0 F!
b10 G!
b10000 7&
b10 4'
1o#
1q#
b10001100000000100000000000000000 )
b10 %
0+
0|!
1}!
1$"
1&"
1x!
1%"
1)"
0w!
0X
1Y
0.!
1/!
1<"
0@"
b10000 G"
b100 D"
#11000
0!
00
#12000
1!
10
1-"
1."
1/"
12"
b0 E"
b10000 F"
b1000100001100000100000 H"
b1100 I"
b0 N#
b1100 O#
b0 P#
b10 Q#
b0 R#
b10 T#
b0 U#
b10 V#
b10000 9&
b10 9'
b1 :'
b100 /
b1 3'
b10 2'
b10000 G%
b10 R"
b0 Q"
b10 P"
b0 N"
b10 M"
b0 L"
b1100 K"
b0 J"
b1100 B"
b10000 C"
b1000100001100000100000 A"
1t!
1q!
1p!
1o!
1O
1K
1R
1G
b1000100001100000100000 U
b10000 =
b1100 2
b0 ?
b1100 >
b0 @
b10 A
b0 B
b10 ]
b0 g
b10 f
b10000 C
b10 E
b1 b
b10 j
b10 5
b0 4
b1100 $
b1000100001100000100000 7
1;
1;%
1<%
12!
1=%
1C!
1b#
1#(
1{'
06%
15%
1($
0}#
0Z"
0Y"
1X"
1'!
1!!
1~
1u
0p
0o
0k
1h!
1b!
1a!
1X!
0S!
0R!
0N!
1w"
1q"
1p"
1g"
0b"
0a"
0]"
b1 H#
b11 J#
b1100000100000 L#
b100000 M#
b0 +"
b0 E!
b1 F!
b10100 7&
b10 6&
b10 %(
b1 &(
1p#
1r#
1J!
1-
b1000100001100000100000 )
b0 &
b10 '
09!
18!
0J!
b1 c
b10 e
1{!
0}!
0$"
0&"
0x!
0)"
b10 *"
1v!
1#"
b10 6
1C#
1$#
b10 (
1W
0Y
1-!
0/!
1I!
1L!
1M!
1D!
1V
1<
1}"
b0 J#
1.
19%
1h%
0="
0<"
1;"
0l#
1k#
0g#
0+%
0j$
1i$
0J$
17"
b1100 7&
0o#
0p#
0q#
0r#
b0 1&
b0 2&
b0 4&
15&
#13000
0!
00
#14000
1!
10
1,"
0-"
0/"
02"
b10 3"
b100000 N#
b10000 O#
b1 P#
b1100000100000 R#
b1 U#
b0 8&
b1100 9&
b10 :&
b10 ;&
1<&
1=&
1>&
1?&
b101 /
1C%
1B%
1A%
1@%
b10 I%
b10 H%
b1100 G%
b0 F%
b1 Q"
b1100000100000 N"
b1 L"
b10000 K"
b100000 J"
b10 u!
0t!
0q!
0o!
1n!
1J
0O
0R
0G
b10 T
b100000 ?
b10000 >
b1 @
b1100000100000 B
b1 g
b0 D
b1100 C
b10 d
b10 a
1L
1P
1^
1S
19
b0 3
b1 4
b0 j
1:%
0;%
0=%
0>!
1=!
0]#
1\#
0.'
1-'
0g&
1f&
0('
0($
0'$
1&$
1y#
17%
1D&
1E&
13!
1F&
b1010101 5'
b101010101010101 5'
b101010100101010101010101 5'
b10101010101010100101010101010101 5'
b10000 7&
b0 4'
1q#
b0 6&
b1 &
b0 %
1+
08!
0L!
b10101010010101010101010101010101 5'
b1010101010101010101010101010101 5'
0M!
0D!
0V
0<
0}"
b11 J#
0.
09%
1="
1<"
0;"
1g#
1'%
1!%
1~$
1J$
1@"
1W#
07"
b10010000 7&
1p#
b1 1&
b10 2&
b11 4&
05&
b10100 G"
b101 D"
#15000
0!
00
#16000
1!
10
b10100 F"
b0 H"
b10000 I"
b11 S#
b11 8&
b10010000 9&
b0 ;&
0<&
0=&
0?&
b1010101010101010101010101010101 8'
b0 9'
b10 :'
16'
17'
b110 /
10'
1/'
b10 3'
b0 2'
b1010101010101010101010101010101 1'
0C%
0A%
0@%
b0 I%
b10010000 G%
b11 F%
b11 O"
b10000 B"
b10100 C"
b0 A"
b0 U
b10100 =
b10000 2
b11 \
b11 D
b10010000 C
b0 a
0L
0P
0S
b1010101010101010101010101010101 F
b0 E
b10 b
1Q
1_
09
b11 3
b11 j
b10000 $
b0 7
0D&
0F&
0C!
1B!
0b#
1a#
0#(
1"(
0{'
1\'
1Z'
1X'
1V'
1T'
1R'
1P'
1N'
1L'
1J'
1H'
1F'
1D'
1B'
1@'
1>'
0=!
0\#
0-'
1)'
1('
11%
10%
1Z"
0'!
0!!
0~
0y
0u
0h!
0b!
0a!
0\!
0X!
0w"
0q"
0p"
0k"
0g"
1;'
1,&
1<'
14!
1$(
b0 H#
b0 I#
b0 K#
b0 J#
b0 L#
b0 M#
1""
b0 F!
b0 G!
b11 6&
b11 4'
0q#
b1010101010101010101010101010101 %(
b10 &(
0p#
1r#
b1010101010101010101010100000000 5'
b1010101010101010000000000000000 5'
b1010101000000000000000000000000 5'
b0 5'
b0 )
b11 %
0+
19!
18!
b10 c
b1010101010101010101010101010101 e
0#"
0%"
1`
b1010101010101010101010101010101 6
1D#
0C#
1B#
1@#
1>#
1<#
1:#
18#
16#
14#
12#
10#
1.#
1,#
1*#
1(#
1&#
0$#
1##
1E#
b1010101010101010101010101010101 (
0@"
0h%
1+&
1)&
1'&
1%&
1#&
1!&
1}%
1{%
1y%
1w%
1u%
1s%
1q%
1o%
1m%
1k%
0="
0<"
1;"
18"
1X#
b11000 G"
b110 D"
#17000
0!
00
#18000
1!
10
0,"
0."
b11000 F"
b10100 I"
b0 N#
b10100 O#
b0 P#
b0 Q#
b0 R#
b0 S#
b0 T#
b0 U#
b0 V#
b11 ;&
b0 8'
b11 9'
b0 :'
06'
b111 /
0/'
b0 3'
b11 2'
b0 1'
b11 I%
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b10100 K"
b0 J"
b10100 B"
b11000 C"
0p!
0n!
0J
0K
b11000 =
b10100 2
b0 ?
b10100 >
b0 @
b0 A
b0 B
b0 \
b0 ]
b0 g
b0 f
b11 a
b0 F
b11 E
b0 b
0Q
b0 5
b0 4
b10100 $
0;
b0 j
0:%
0<%
02!
0B!
0a#
0"(
1|'
1{'
0\'
0Z'
0X'
0V'
0T'
0R'
0P'
0N'
0L'
0J'
0H'
0F'
0D'
0B'
0@'
0>'
1>!
1=!
1]#
1\#
1.'
1-'
05%
01%
00%
1($
0y#
0Z"
1Y"
0;'
0,&
b10010100 7&
b11 %(
b0 &(
0r#
b0 6&
0-
b0 &
b0 '
09!
08!
b0 c
b11 e
b11 6
1C#
0B#
0@#
0>#
0<#
0:#
08#
06#
04#
02#
00#
0.#
0,#
0*#
0(#
0&#
0##
b11 (
1i%
1h%
0+&
0)&
0'&
0%&
0#&
0!&
0}%
0{%
0y%
0w%
0u%
0s%
0q%
0o%
0m%
0k%
0k#
0g#
0'%
0!%
0~$
0i$
0J$
b10100 7&
1p#
1r#
b0 1&
b0 2&
b0 4&
15&
b11100 G"
b111 D"
#19000
0!
00
#20000
1!
10
b11100 F"
b11000 I"
b11000 O#
b0 8&
b10100 9&
b0 :&
b0 ;&
1<&
0>&
b11 :'
b1000 /
b11 3'
0B%
1@%
b0 I%
b0 H%
b10100 G%
b0 F%
b11000 K"
b11000 B"
b11100 C"
b11100 =
b11000 2
b11000 >
b0 D
b10100 C
b0 d
b0 a
1L
0^
b11 b
19
b0 3
b11000 $
0E&
03!
1C!
1B!
1b#
1a#
1#(
1"(
0>!
0=!
0]#
0\#
0.'
0-'
0f&
0)'
0('
0($
1'$
1Z"
b11000 7&
b0 4'
1o#
1q#
b11 &(
0p#
0r#
b0 %
1+
b11 c
1$#
1##
1="
08"
1@"
0W#
b100000 G"
b1000 D"
#21000
0!
00
#22000
1!
10
b100000 F"
b11100 I"
b11100 O#
b11000 9&
b0 9'
b0 :'
07'
b1001 /
00'
b0 3'
b0 2'
b11000 G%
b11100 K"
b11100 B"
b100000 C"
b100000 =
b11100 2
b11100 >
b11000 C
b0 E
b0 b
0_
b11100 $
0C!
0B!
0b#
0a#
0#(
0"(
0|'
0{'
1($
0Z"
0Y"
0X"
1W"
0<'
04!
0$(
b11100 7&
b0 %(
b0 &(
1p#
1r#
b0 c
b0 e
0`
b0 6
0D#
0C#
0$#
0##
0E#
b0 (
0i%
0h%
0="
1<"
0X#
b100100 G"
b1001 D"
#23000
0!
00
#24000
1!
10
b100100 F"
b100000 I"
b100000 O#
b11100 9&
b1010 /
b11100 G%
b100000 K"
b100000 B"
b100100 C"
b100100 =
b100000 2
b100000 >
b11100 C
b100000 $
0($
0'$
0&$
1%$
1Z"
b100000 7&
1="
b101000 G"
b1010 D"
#25000
0!
00
#26000
1!
10
b101000 F"
b100100 I"
b100100 O#
b100000 9&
b1011 /
b100000 G%
b100100 K"
b100100 B"
b101000 C"
b101000 =
b100100 2
b100100 >
b100000 C
b100100 $
1($
0Z"
1Y"
b100100 7&
0="
0<"
0;"
1:"
b101100 G"
b1011 D"
#27000
0!
00
#28000
1!
10
b101100 F"
b101000 I"
b101000 O#
b100100 9&
b1100 /
b100100 G%
b101000 K"
b101000 B"
b101100 C"
b101100 =
b101000 2
b101000 >
b100100 C
b101000 $
0($
1'$
1Z"
b101000 7&
1="
b110000 G"
b1100 D"
#29000
0!
00
#30000
1!
10
b110000 F"
b101100 I"
b101100 O#
b101000 9&
b1101 /
b101000 G%
b101100 K"
b101100 B"
b110000 C"
b110000 =
b101100 2
b101100 >
b101000 C
b101100 $
1($
0Z"
0Y"
1X"
b101100 7&
0="
1<"
b110100 G"
b1101 D"
#31000
0!
00
#32000
1!
10
b110100 F"
b110000 I"
b110000 O#
b101100 9&
b1110 /
b101100 G%
b110000 K"
b110000 B"
b110100 C"
b110100 =
b110000 2
b110000 >
b101100 C
b110000 $
0($
0'$
1&$
1Z"
b110000 7&
1="
b111000 G"
b1110 D"
#33000
0!
00
#34000
1!
10
b111000 F"
b110100 I"
b110100 O#
b110000 9&
b1111 /
b110000 G%
b110100 K"
b110100 B"
b111000 C"
b111000 =
b110100 2
b110100 >
b110000 C
b110100 $
1($
0Z"
1Y"
b110100 7&
0="
0<"
1;"
b111100 G"
b1111 D"
#35000
0!
00
#36000
1!
10
b111100 F"
b111000 I"
b11