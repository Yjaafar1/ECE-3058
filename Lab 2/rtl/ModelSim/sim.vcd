$date
	Sun Feb 20 20:18:06 2022
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module MIPS_pipelined_tb $end
$var reg 1 ! aclk $end
$var reg 1 " reset $end
$var integer 32 # i $end
$var reg 10 $ PC [9:0] $end
$var reg 32 % ALU_result_out [31:0] $end
$var reg 32 & read_data_1_out [31:0] $end
$var reg 32 ' read_data_2_out [31:0] $end
$var reg 32 ( write_data_out [31:0] $end
$var reg 32 ) Instruction_out [31:0] $end
$var reg 32 * A_input_out [31:0] $end
$var reg 32 + B_input_out [31:0] $end
$var reg 1 , Branch_out $end
$var reg 1 - Zero_out $end
$var reg 1 . MemWrite_out $end
$var reg 1 / RegWrite_out $end
$var reg 1 0 RegWrite_mem_out $end
$var reg 1 1 RegWrite_wb_out $end
$var reg 1 2 MemtoReg_out $end
$var reg 1 3 stall_out $end
$var reg 7 4 cycle_cnt [6:0] $end
$var reg 5 5 dec_rs_out [4:0] $end
$var reg 5 6 dec_rt_out [4:0] $end
$var reg 5 7 dest_out [4:0] $end
$var reg 2 8 op_FA_out [1:0] $end
$var reg 2 9 op_FB_out [1:0] $end
$var reg 5 : dest_EX_out [4:0] $end
$var reg 5 ; dest_MEM_out [4:0] $end

$scope module my_MIPS_processor $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 10 > PC [9:0] $end
$var reg 32 ? ALU_result_out [31:0] $end
$var reg 32 @ read_data_1_out [31:0] $end
$var reg 32 A read_data_2_out [31:0] $end
$var reg 32 B write_data_out [31:0] $end
$var reg 32 C Instruction_out [31:0] $end
$var reg 32 D A_input_out [31:0] $end
$var reg 32 E B_input_out [31:0] $end
$var reg 1 F Branch_out $end
$var reg 1 G Zero_out $end
$var reg 1 H MemWrite_out $end
$var reg 1 I RegWrite_out $end
$var reg 1 J RegWrite_mem_out $end
$var reg 1 K RegWrite_wb_out $end
$var reg 1 L MemtoReg_out $end
$var reg 1 M stall_out $end
$var reg 5 N dec_rt_out [4:0] $end
$var reg 5 O dec_rs_out [4:0] $end
$var reg 2 P op_FA_out [1:0] $end
$var reg 2 Q op_FB_out [1:0] $end
$var reg 5 R dest_out [4:0] $end
$var reg 5 S dest_EX_out [4:0] $end
$var reg 5 T dest_MEM_out [4:0] $end
$var reg 10 U PC_plus_4 [9:0] $end
$var reg 10 V PC_plus_4_ID [9:0] $end
$var reg 6 W function_opcode [5:0] $end
$var reg 32 X read_data_1 [31:0] $end
$var reg 32 Y read_data_2 [31:0] $end
$var reg 32 Z sign_extend [31:0] $end
$var reg 8 [ Add_result [7:0] $end
$var reg 32 \ ALU_result [31:0] $end
$var reg 32 ] ALU_result_MEM [31:0] $end
$var reg 32 ^ read_data [31:0] $end
$var reg 32 _ A_input [31:0] $end
$var reg 32 ` B_input [31:0] $end
$var reg 1 a ALUSrc $end
$var reg 1 b Branch $end
$var reg 1 c branch_EX $end
$var reg 1 d RegDst $end
$var reg 1 e RegWrite $end
$var reg 1 f Zero $end
$var reg 1 g MemWrite $end
$var reg 1 h MemWrite_EX $end
$var reg 1 i MemtoReg $end
$var reg 1 j MemtoReg_EX $end
$var reg 1 k MemtoReg_MEM $end
$var reg 1 l MemRead $end
$var reg 1 m MemRead_EX $end
$var reg 2 n ALUop [1:0] $end
$var reg 32 o Instruction [31:0] $end
$var reg 1 p stall $end
$var reg 1 q R_format $end
$var reg 1 r I_format $end
$var reg 1 s Lw $end
$var reg 1 t Sw $end
$var reg 1 u Beq $end
$var reg 5 v dest_reg_R_type [4:0] $end
$var reg 5 w dest_reg_I_type [4:0] $end
$var reg 1 x sig_RegWrite_EX $end
$var reg 1 y sig_RegWrite_MEM $end
$var reg 1 z sig_RegWrite_WB $end
$var reg 5 { dest_EX [4:0] $end
$var reg 5 | dest_MEM [4:0] $end
$var reg 5 } dest_WB [4:0] $end
$var reg 32 ~ memory_write_data [31:0] $end
$var reg 32 !! write_data_WB [31:0] $end
$var reg 5 "! dec_rt [4:0] $end
$var reg 5 #! dec_rs [4:0] $end
$var reg 2 $! op_FA [1:0] $end
$var reg 2 %! op_FB [1:0] $end
$var reg 5 &! dest [4:0] $end

$scope module my_STALL_CONT $end
$var wire 1 '! ip_instruction [31] $end
$var wire 1 (! ip_instruction [30] $end
$var wire 1 )! ip_instruction [29] $end
$var wire 1 *! ip_instruction [28] $end
$var wire 1 +! ip_instruction [27] $end
$var wire 1 ,! ip_instruction [26] $end
$var wire 1 -! ip_instruction [25] $end
$var wire 1 .! ip_instruction [24] $end
$var wire 1 /! ip_instruction [23] $end
$var wire 1 0! ip_instruction [22] $end
$var wire 1 1! ip_instruction [21] $end
$var wire 1 2! ip_instruction [20] $end
$var wire 1 3! ip_instruction [19] $end
$var wire 1 4! ip_instruction [18] $end
$var wire 1 5! ip_instruction [17] $end
$var wire 1 6! ip_instruction [16] $end
$var wire 1 7! ip_instruction [15] $end
$var wire 1 8! ip_instruction [14] $end
$var wire 1 9! ip_instruction [13] $end
$var wire 1 :! ip_instruction [12] $end
$var wire 1 ;! ip_instruction [11] $end
$var wire 1 <! ip_instruction [10] $end
$var wire 1 =! ip_instruction [9] $end
$var wire 1 >! ip_instruction [8] $end
$var wire 1 ?! ip_instruction [7] $end
$var wire 1 @! ip_instruction [6] $end
$var wire 1 A! ip_instruction [5] $end
$var wire 1 B! ip_instruction [4] $end
$var wire 1 C! ip_instruction [3] $end
$var wire 1 D! ip_instruction [2] $end
$var wire 1 E! ip_instruction [1] $end
$var wire 1 F! ip_instruction [0] $end
$var wire 1 G! ip_R_format $end
$var wire 1 H! ip_I_format $end
$var wire 1 I! ip_Lw $end
$var wire 1 J! ip_Sw $end
$var wire 1 K! ip_Beq $end
$var wire 1 L! ip_RegWrite_EX $end
$var wire 1 M! ip_RegWrite_MEM $end
$var wire 1 N! ip_RegWrite_WB $end
$var wire 1 O! ip_dest_EX [4] $end
$var wire 1 P! ip_dest_EX [3] $end
$var wire 1 Q! ip_dest_EX [2] $end
$var wire 1 R! ip_dest_EX [1] $end
$var wire 1 S! ip_dest_EX [0] $end
$var wire 1 T! ip_dest_MEM [4] $end
$var wire 1 U! ip_dest_MEM [3] $end
$var wire 1 V! ip_dest_MEM [2] $end
$var wire 1 W! ip_dest_MEM [1] $end
$var wire 1 X! ip_dest_MEM [0] $end
$var wire 1 Y! ip_dest_WB [4] $end
$var wire 1 Z! ip_dest_WB [3] $end
$var wire 1 [! ip_dest_WB [2] $end
$var wire 1 \! ip_dest_WB [1] $end
$var wire 1 ]! ip_dest_WB [0] $end
$var wire 1 ^! ip_MemtoReg $end
$var reg 1 _! op_stall $end
$var reg 6 `! sig_opcode [5:0] $end
$var reg 5 a! sig_RS [4:0] $end
$var reg 5 b! sig_RT [4:0] $end
$var reg 1 c! use_RS $end
$var reg 1 d! use_RT $end
$var reg 1 e! RS_EX_hazard $end
$var reg 1 f! RS_hazard $end
$var reg 1 g! RT_EX_hazard $end
$var reg 1 h! RT_hazard $end
$upscope $end

$scope module my_CONTROL $end
$var wire 1 i! ip_zero $end
$var wire 1 j! ip_branch_EX $end
$var wire 1 k! ip_instruction [31] $end
$var wire 1 l! ip_instruction [30] $end
$var wire 1 m! ip_instruction [29] $end
$var wire 1 n! ip_instruction [28] $end
$var wire 1 o! ip_instruction [27] $end
$var wire 1 p! ip_instruction [26] $end
$var wire 1 q! ip_instruction [25] $end
$var wire 1 r! ip_instruction [24] $end
$var wire 1 s! ip_instruction [23] $end
$var wire 1 t! ip_instruction [22] $end
$var wire 1 u! ip_instruction [21] $end
$var wire 1 v! ip_instruction [20] $end
$var wire 1 w! ip_instruction [19] $end
$var wire 1 x! ip_instruction [18] $end
$var wire 1 y! ip_instruction [17] $end
$var wire 1 z! ip_instruction [16] $end
$var wire 1 {! ip_instruction [15] $end
$var wire 1 |! ip_instruction [14] $end
$var wire 1 }! ip_instruction [13] $end
$var wire 1 ~! ip_instruction [12] $end
$var wire 1 !" ip_instruction [11] $end
$var wire 1 "" ip_instruction [10] $end
$var wire 1 #" ip_instruction [9] $end
$var wire 1 $" ip_instruction [8] $end
$var wire 1 %" ip_instruction [7] $end
$var wire 1 &" ip_instruction [6] $end
$var wire 1 '" ip_instruction [5] $end
$var wire 1 (" ip_instruction [4] $end
$var wire 1 )" ip_instruction [3] $end
$var wire 1 *" ip_instruction [2] $end
$var wire 1 +" ip_instruction [1] $end
$var wire 1 ," ip_instruction [0] $end
$var reg 1 -" op_RegDst $end
$var reg 1 ." op_MemtoReg $end
$var reg 1 /" op_RegWrite $end
$var reg 1 0" op_read_en $end
$var reg 1 1" op_write_en $end
$var reg 1 2" op_branch $end
$var reg 1 3" op_ALU_src $end
$var reg 2 4" op_ALU_op [1:0] $end
$var reg 1 5" op_R_format $end
$var reg 1 6" op_I_format $end
$var reg 1 7" op_Lw $end
$var reg 1 8" op_Sw $end
$var reg 1 9" op_Beq $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 1 :" R_format $end
$var reg 1 ;" I_format $end
$var reg 1 <" Lw $end
$var reg 1 =" Sw $end
$var reg 1 >" Beq $end
$var reg 1 ?" NOP $end
$var reg 1 @" sig_RegDst $end
$var reg 1 A" sig_MemtoReg $end
$var reg 1 B" sig_RegWrite $end
$var reg 1 C" sig_read_en $end
$var reg 1 D" sig_write_en $end
$var reg 1 E" sig_branch $end
$var reg 1 F" sig_ALU_src $end
$var reg 2 G" sig_ALU_op [1:0] $end
$var reg 6 H" sig_opcode [5:0] $end
$var reg 1 I" reg_RegDst $end
$var reg 1 J" reg_MemtoReg $end
$var reg 1 K" reg_RegWrite $end
$var reg 1 L" reg_read_en $end
$var reg 1 M" reg_write_en $end
$var reg 1 N" reg_branch $end
$var reg 1 O" reg_ALU_src $end
$var reg 2 P" reg_ALU_op [1:0] $end
$upscope $end

$scope module my_IFETCH $end
$var parameter 32 Q" PARAM_RAM_length $end
$var parameter 32 R" PARAM_RAM_addr_bits $end
$var wire 1 S" ip_branch $end
$var wire 1 T" ip_stall $end
$var wire 1 U" ip_add_result [7] $end
$var wire 1 V" ip_add_result [6] $end
$var wire 1 W" ip_add_result [5] $end
$var wire 1 X" ip_add_result [4] $end
$var wire 1 Y" ip_add_result [3] $end
$var wire 1 Z" ip_add_result [2] $end
$var wire 1 [" ip_add_result [1] $end
$var wire 1 \" ip_add_result [0] $end
$var wire 1 ]" ip_zero $end
$var reg 32 ^" op_instruction [31:0] $end
$var reg 10 _" op_PC [9:0] $end
$var reg 10 `" op_PC_plus_4 [9:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 6 a" instr_mem_addr [5:0] $end
$var reg 32 b" sig_instruction [31:0] $end
$var reg 10 c" PC [9:0] $end
$var reg 10 d" Next_PC [9:0] $end
$var reg 32 e" reg_instruction [31:0] $end
$var reg 10 f" reg_PC [9:0] $end
$upscope $end

$scope module my_IDECODE $end
$var reg 6 g" op_function_opcode [5:0] $end
$var reg 10 h" op_PC_plus_4 [9:0] $end
$var reg 32 i" op_read_data_1 [31:0] $end
$var reg 32 j" op_read_data_2 [31:0] $end
$var reg 32 k" op_immediate [31:0] $end
$var reg 5 l" op_dest_reg_R_type [4:0] $end
$var reg 5 m" op_dest_reg_I_type [4:0] $end
$var reg 5 n" op_dec_rs [4:0] $end
$var reg 5 o" op_dec_rt [4:0] $end
$var wire 1 p" ip_PC_plus_4 [9] $end
$var wire 1 q" ip_PC_plus_4 [8] $end
$var wire 1 r" ip_PC_plus_4 [7] $end
$var wire 1 s" ip_PC_plus_4 [6] $end
$var wire 1 t" ip_PC_plus_4 [5] $end
$var wire 1 u" ip_PC_plus_4 [4] $end
$var wire 1 v" ip_PC_plus_4 [3] $end
$var wire 1 w" ip_PC_plus_4 [2] $end
$var wire 1 x" ip_PC_plus_4 [1] $end
$var wire 1 y" ip_PC_plus_4 [0] $end
$var wire 1 z" ip_instruction [31] $end
$var wire 1 {" ip_instruction [30] $end
$var wire 1 |" ip_instruction [29] $end
$var wire 1 }" ip_instruction [28] $end
$var wire 1 ~" ip_instruction [27] $end
$var wire 1 !# ip_instruction [26] $end
$var wire 1 "# ip_instruction [25] $end
$var wire 1 ## ip_instruction [24] $end
$var wire 1 $# ip_instruction [23] $end
$var wire 1 %# ip_instruction [22] $end
$var wire 1 &# ip_instruction [21] $end
$var wire 1 '# ip_instruction [20] $end
$var wire 1 (# ip_instruction [19] $end
$var wire 1 )# ip_instruction [18] $end
$var wire 1 *# ip_instruction [17] $end
$var wire 1 +# ip_instruction [16] $end
$var wire 1 ,# ip_instruction [15] $end
$var wire 1 -# ip_instruction [14] $end
$var wire 1 .# ip_instruction [13] $end
$var wire 1 /# ip_instruction [12] $end
$var wire 1 0# ip_instruction [11] $end
$var wire 1 1# ip_instruction [10] $end
$var wire 1 2# ip_instruction [9] $end
$var wire 1 3# ip_instruction [8] $end
$var wire 1 4# ip_instruction [7] $end
$var wire 1 5# ip_instruction [6] $end
$var wire 1 6# ip_instruction [5] $end
$var wire 1 7# ip_instruction [4] $end
$var wire 1 8# ip_instruction [3] $end
$var wire 1 9# ip_instruction [2] $end
$var wire 1 :# ip_instruction [1] $end
$var wire 1 ;# ip_instruction [0] $end
$var wire 1 <# ip_stall $end
$var wire 1 =# ip_write_reg_addr [4] $end
$var wire 1 ># ip_write_reg_addr [3] $end
$var wire 1 ?# ip_write_reg_addr [2] $end
$var wire 1 @# ip_write_reg_addr [1] $end
$var wire 1 A# ip_write_reg_addr [0] $end
$var wire 1 B# ip_write_data [31] $end
$var wire 1 C# ip_write_data [30] $end
$var wire 1 D# ip_write_data [29] $end
$var wire 1 E# ip_write_data [28] $end
$var wire 1 F# ip_write_data [27] $end
$var wire 1 G# ip_write_data [26] $end
$var wire 1 H# ip_write_data [25] $end
$var wire 1 I# ip_write_data [24] $end
$var wire 1 J# ip_write_data [23] $end
$var wire 1 K# ip_write_data [22] $end
$var wire 1 L# ip_write_data [21] $end
$var wire 1 M# ip_write_data [20] $end
$var wire 1 N# ip_write_data [19] $end
$var wire 1 O# ip_write_data [18] $end
$var wire 1 P# ip_write_data [17] $end
$var wire 1 Q# ip_write_data [16] $end
$var wire 1 R# ip_write_data [15] $end
$var wire 1 S# ip_write_data [14] $end
$var wire 1 T# ip_write_data [13] $end
$var wire 1 U# ip_write_data [12] $end
$var wire 1 V# ip_write_data [11] $end
$var wire 1 W# ip_write_data [10] $end
$var wire 1 X# ip_write_data [9] $end
$var wire 1 Y# ip_write_data [8] $end
$var wire 1 Z# ip_write_data [7] $end
$var wire 1 [# ip_write_data [6] $end
$var wire 1 \# ip_write_data [5] $end
$var wire 1 ]# ip_write_data [4] $end
$var wire 1 ^# ip_write_data [3] $end
$var wire 1 _# ip_write_data [2] $end
$var wire 1 `# ip_write_data [1] $end
$var wire 1 a# ip_write_data [0] $end
$var wire 1 b# ip_RegWrite $end
$var wire 1 c# ip_zero $end
$var wire 1 d# ip_branch $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 5 e# read_register_1_address [4:0] $end
$var reg 5 f# read_register_2_address [4:0] $end
$var reg 5 g# sig_dest_reg_R_type [4:0] $end
$var reg 5 h# sig_dest_reg_I_type [4:0] $end
$var reg 32 i# Instruction_immediate_value [31:0] $end
$var reg 6 j# sig_function_opcode [5:0] $end
$var reg 6 k# reg_function_opcode [5:0] $end
$var reg 10 l# reg_PC_plus_4 [9:0] $end
$var reg 32 m# reg_read_data_1 [31:0] $end
$var reg 32 n# reg_read_data_2 [31:0] $end
$var reg 32 o# reg_immediate [31:0] $end
$var reg 5 p# reg_dest_reg_R_type [4:0] $end
$var reg 5 q# reg_dest_reg_I_type [4:0] $end
$var reg 5 r# reg_dec_rs [4:0] $end
$var reg 5 s# reg_dec_rt [4:0] $end
$upscope $end

$scope module FWD_CONT $end
$var wire 1 t# ip_EX_MEM_RegWrite $end
$var wire 1 u# ip_MEM_WB_RegWrite $end
$var wire 1 v# ip_EX_MEM_dest [4] $end
$var wire 1 w# ip_EX_MEM_dest [3] $end
$var wire 1 x# ip_EX_MEM_dest [2] $end
$var wire 1 y# ip_EX_MEM_dest [1] $end
$var wire 1 z# ip_EX_MEM_dest [0] $end
$var wire 1 {# ip_MEM_WB_dest [4] $end
$var wire 1 |# ip_MEM_WB_dest [3] $end
$var wire 1 }# ip_MEM_WB_dest [2] $end
$var wire 1 ~# ip_MEM_WB_dest [1] $end
$var wire 1 !$ ip_MEM_WB_dest [0] $end
$var wire 1 "$ ip_DEC_DEST_RS [4] $end
$var wire 1 #$ ip_DEC_DEST_RS [3] $end
$var wire 1 $$ ip_DEC_DEST_RS [2] $end
$var wire 1 %$ ip_DEC_DEST_RS [1] $end
$var wire 1 &$ ip_DEC_DEST_RS [0] $end
$var wire 1 '$ ip_DEC_DEST_RT [4] $end
$var wire 1 ($ ip_DEC_DEST_RT [3] $end
$var wire 1 )$ ip_DEC_DEST_RT [2] $end
$var wire 1 *$ ip_DEC_DEST_RT [1] $end
$var wire 1 +$ ip_DEC_DEST_RT [0] $end
$var reg 2 ,$ op_FA [1:0] $end
$var reg 2 -$ op_FB [1:0] $end
$var reg 1 .$ dest_match_EX_MEM_A $end
$var reg 1 /$ dest_match_MEM_WB_A $end
$var reg 1 0$ dest_match_EX_MEM_B $end
$var reg 1 1$ dest_match_MEM_WB_B $end
$upscope $end

$scope module my_EXECUTE $end
$var wire 1 2$ ip_branch_EX $end
$var wire 1 3$ ip_zero $end
$var wire 1 4$ ip_opcode [5] $end
$var wire 1 5$ ip_opcode [4] $end
$var wire 1 6$ ip_opcode [3] $end
$var wire 1 7$ ip_opcode [2] $end
$var wire 1 8$ ip_opcode [1] $end
$var wire 1 9$ ip_opcode [0] $end
$var wire 1 :$ ip_function_opcode [5] $end
$var wire 1 ;$ ip_function_opcode [4] $end
$var wire 1 <$ ip_function_opcode [3] $end
$var wire 1 =$ ip_function_opcode [2] $end
$var wire 1 >$ ip_function_opcode [1] $end
$var wire 1 ?$ ip_function_opcode [0] $end
$var wire 1 @$ ip_PC_plus_4 [9] $end
$var wire 1 A$ ip_PC_plus_4 [8] $end
$var wire 1 B$ ip_PC_plus_4 [7] $end
$var wire 1 C$ ip_PC_plus_4 [6] $end
$var wire 1 D$ ip_PC_plus_4 [5] $end
$var wire 1 E$ ip_PC_plus_4 [4] $end
$var wire 1 F$ ip_PC_plus_4 [3] $end
$var wire 1 G$ ip_PC_plus_4 [2] $end
$var wire 1 H$ ip_PC_plus_4 [1] $end
$var wire 1 I$ ip_PC_plus_4 [0] $end
$var wire 1 J$ ip_read_data_1 [31] $end
$var wire 1 K$ ip_read_data_1 [30] $end
$var wire 1 L$ ip_read_data_1 [29] $end
$var wire 1 M$ ip_read_data_1 [28] $end
$var wire 1 N$ ip_read_data_1 [27] $end
$var wire 1 O$ ip_read_data_1 [26] $end
$var wire 1 P$ ip_read_data_1 [25] $end
$var wire 1 Q$ ip_read_data_1 [24] $end
$var wire 1 R$ ip_read_data_1 [23] $end
$var wire 1 S$ ip_read_data_1 [22] $end
$var wire 1 T$ ip_read_data_1 [21] $end
$var wire 1 U$ ip_read_data_1 [20] $end
$var wire 1 V$ ip_read_data_1 [19] $end
$var wire 1 W$ ip_read_data_1 [18] $end
$var wire 1 X$ ip_read_data_1 [17] $end
$var wire 1 Y$ ip_read_data_1 [16] $end
$var wire 1 Z$ ip_read_data_1 [15] $end
$var wire 1 [$ ip_read_data_1 [14] $end
$var wire 1 \$ ip_read_data_1 [13] $end
$var wire 1 ]$ ip_read_data_1 [12] $end
$var wire 1 ^$ ip_read_data_1 [11] $end
$var wire 1 _$ ip_read_data_1 [10] $end
$var wire 1 `$ ip_read_data_1 [9] $end
$var wire 1 a$ ip_read_data_1 [8] $end
$var wire 1 b$ ip_read_data_1 [7] $end
$var wire 1 c$ ip_read_data_1 [6] $end
$var wire 1 d$ ip_read_data_1 [5] $end
$var wire 1 e$ ip_read_data_1 [4] $end
$var wire 1 f$ ip_read_data_1 [3] $end
$var wire 1 g$ ip_read_data_1 [2] $end
$var wire 1 h$ ip_read_data_1 [1] $end
$var wire 1 i$ ip_read_data_1 [0] $end
$var wire 1 j$ ip_read_data_2 [31] $end
$var wire 1 k$ ip_read_data_2 [30] $end
$var wire 1 l$ ip_read_data_2 [29] $end
$var wire 1 m$ ip_read_data_2 [28] $end
$var wire 1 n$ ip_read_data_2 [27] $end
$var wire 1 o$ ip_read_data_2 [26] $end
$var wire 1 p$ ip_read_data_2 [25] $end
$var wire 1 q$ ip_read_data_2 [24] $end
$var wire 1 r$ ip_read_data_2 [23] $end
$var wire 1 s$ ip_read_data_2 [22] $end
$var wire 1 t$ ip_read_data_2 [21] $end
$var wire 1 u$ ip_read_data_2 [20] $end
$var wire 1 v$ ip_read_data_2 [19] $end
$var wire 1 w$ ip_read_data_2 [18] $end
$var wire 1 x$ ip_read_data_2 [17] $end
$var wire 1 y$ ip_read_data_2 [16] $end
$var wire 1 z$ ip_read_data_2 [15] $end
$var wire 1 {$ ip_read_data_2 [14] $end
$var wire 1 |$ ip_read_data_2 [13] $end
$var wire 1 }$ ip_read_data_2 [12] $end
$var wire 1 ~$ ip_read_data_2 [11] $end
$var wire 1 !% ip_read_data_2 [10] $end
$var wire 1 "% ip_read_data_2 [9] $end
$var wire 1 #% ip_read_data_2 [8] $end
$var wire 1 $% ip_read_data_2 [7] $end
$var wire 1 %% ip_read_data_2 [6] $end
$var wire 1 &% ip_read_data_2 [5] $end
$var wire 1 '% ip_read_data_2 [4] $end
$var wire 1 (% ip_read_data_2 [3] $end
$var wire 1 )% ip_read_data_2 [2] $end
$var wire 1 *% ip_read_data_2 [1] $end
$var wire 1 +% ip_read_data_2 [0] $end
$var wire 1 ,% ip_immediate [31] $end
$var wire 1 -% ip_immediate [30] $end
$var wire 1 .% ip_immediate [29] $end
$var wire 1 /% ip_immediate [28] $end
$var wire 1 0% ip_immediate [27] $end
$var wire 1 1% ip_immediate [26] $end
$var wire 1 2% ip_immediate [25] $end
$var wire 1 3% ip_immediate [24] $end
$var wire 1 4% ip_immediate [23] $end
$var wire 1 5% ip_immediate [22] $end
$var wire 1 6% ip_immediate [21] $end
$var wire 1 7% ip_immediate [20] $end
$var wire 1 8% ip_immediate [19] $end
$var wire 1 9% ip_immediate [18] $end
$var wire 1 :% ip_immediate [17] $end
$var wire 1 ;% ip_immediate [16] $end
$var wire 1 <% ip_immediate [15] $end
$var wire 1 =% ip_immediate [14] $end
$var wire 1 >% ip_immediate [13] $end
$var wire 1 ?% ip_immediate [12] $end
$var wire 1 @% ip_immediate [11] $end
$var wire 1 A% ip_immediate [10] $end
$var wire 1 B% ip_immediate [9] $end
$var wire 1 C% ip_immediate [8] $end
$var wire 1 D% ip_immediate [7] $end
$var wire 1 E% ip_immediate [6] $end
$var wire 1 F% ip_immediate [5] $end
$var wire 1 G% ip_immediate [4] $end
$var wire 1 H% ip_immediate [3] $end
$var wire 1 I% ip_immediate [2] $end
$var wire 1 J% ip_immediate [1] $end
$var wire 1 K% ip_immediate [0] $end
$var wire 1 L% ip_dest_reg_R_type [4] $end
$var wire 1 M% ip_dest_reg_R_type [3] $end
$var wire 1 N% ip_dest_reg_R_type [2] $end
$var wire 1 O% ip_dest_reg_R_type [1] $end
$var wire 1 P% ip_dest_reg_R_type [0] $end
$var wire 1 Q% ip_dest_reg_I_type [4] $end
$var wire 1 R% ip_dest_reg_I_type [3] $end
$var wire 1 S% ip_dest_reg_I_type [2] $end
$var wire 1 T% ip_dest_reg_I_type [1] $end
$var wire 1 U% ip_dest_reg_I_type [0] $end
$var wire 1 V% ip_ALU_op [1] $end
$var wire 1 W% ip_ALU_op [0] $end
$var wire 1 X% ip_ALU_src $end
$var wire 1 Y% ip_RegDst $end
$var wire 1 Z% ip_MemtoReg $end
$var wire 1 [% ip_RegWrite $end
$var wire 1 \% ip_read_en $end
$var wire 1 ]% ip_write_en $end
$var wire 1 ^% ip_branch $end
$var reg 1 _% op_zero $end
$var reg 1 `% op_MemtoReg $end
$var reg 1 a% op_RegWrite $end
$var reg 1 b% op_read_en $end
$var reg 1 c% op_write_en $end
$var reg 1 d% op_branch $end
$var reg 32 e% op_ALU_result [31:0] $end
$var reg 8 f% op_Add_result [7:0] $end
$var reg 32 g% op_memory_write_data [31:0] $end
$var reg 5 h% op_dest_reg [4:0] $end
$var reg 32 i% op_A_input [31:0] $end
$var reg 32 j% op_B_input [31:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var wire 1 k% ALU_result [31] $end
$var wire 1 l% ALU_result [30] $end
$var wire 1 m% ALU_result [29] $end
$var wire 1 n% ALU_result [28] $end
$var wire 1 o% ALU_result [27] $end
$var wire 1 p% ALU_result [26] $end
$var wire 1 q% ALU_result [25] $end
$var wire 1 r% ALU_result [24] $end
$var wire 1 s% ALU_result [23] $end
$var wire 1 t% ALU_result [22] $end
$var wire 1 u% ALU_result [21] $end
$var wire 1 v% ALU_result [20] $end
$var wire 1 w% ALU_result [19] $end
$var wire 1 x% ALU_result [18] $end
$var wire 1 y% ALU_result [17] $end
$var wire 1 z% ALU_result [16] $end
$var wire 1 {% ALU_result [15] $end
$var wire 1 |% ALU_result [14] $end
$var wire 1 }% ALU_result [13] $end
$var wire 1 ~% ALU_result [12] $end
$var wire 1 !& ALU_result [11] $end
$var wire 1 "& ALU_result [10] $end
$var wire 1 #& ALU_result [9] $end
$var wire 1 $& ALU_result [8] $end
$var wire 1 %& ALU_result [7] $end
$var wire 1 && ALU_result [6] $end
$var wire 1 '& ALU_result [5] $end
$var wire 1 (& ALU_result [4] $end
$var wire 1 )& ALU_result [3] $end
$var wire 1 *& ALU_result [2] $end
$var wire 1 +& ALU_result [1] $end
$var wire 1 ,& ALU_result [0] $end
$var wire 1 -& ALU_result_MEM [31] $end
$var wire 1 .& ALU_result_MEM [30] $end
$var wire 1 /& ALU_result_MEM [29] $end
$var wire 1 0& ALU_result_MEM [28] $end
$var wire 1 1& ALU_result_MEM [27] $end
$var wire 1 2& ALU_result_MEM [26] $end
$var wire 1 3& ALU_result_MEM [25] $end
$var wire 1 4& ALU_result_MEM [24] $end
$var wire 1 5& ALU_result_MEM [23] $end
$var wire 1 6& ALU_result_MEM [22] $end
$var wire 1 7& ALU_result_MEM [21] $end
$var wire 1 8& ALU_result_MEM [20] $end
$var wire 1 9& ALU_result_MEM [19] $end
$var wire 1 :& ALU_result_MEM [18] $end
$var wire 1 ;& ALU_result_MEM [17] $end
$var wire 1 <& ALU_result_MEM [16] $end
$var wire 1 =& ALU_result_MEM [15] $end
$var wire 1 >& ALU_result_MEM [14] $end
$var wire 1 ?& ALU_result_MEM [13] $end
$var wire 1 @& ALU_result_MEM [12] $end
$var wire 1 A& ALU_result_MEM [11] $end
$var wire 1 B& ALU_result_MEM [10] $end
$var wire 1 C& ALU_result_MEM [9] $end
$var wire 1 D& ALU_result_MEM [8] $end
$var wire 1 E& ALU_result_MEM [7] $end
$var wire 1 F& ALU_result_MEM [6] $end
$var wire 1 G& ALU_result_MEM [5] $end
$var wire 1 H& ALU_result_MEM [4] $end
$var wire 1 I& ALU_result_MEM [3] $end
$var wire 1 J& ALU_result_MEM [2] $end
$var wire 1 K& ALU_result_MEM [1] $end
$var wire 1 L& ALU_result_MEM [0] $end
$var wire 1 M& read_data_wb [31] $end
$var wire 1 N& read_data_wb [30] $end
$var wire 1 O& read_data_wb [29] $end
$var wire 1 P& read_data_wb [28] $end
$var wire 1 Q& read_data_wb [27] $end
$var wire 1 R& read_data_wb [26] $end
$var wire 1 S& read_data_wb [25] $end
$var wire 1 T& read_data_wb [24] $end
$var wire 1 U& read_data_wb [23] $end
$var wire 1 V& read_data_wb [22] $end
$var wire 1 W& read_data_wb [21] $end
$var wire 1 X& read_data_wb [20] $end
$var wire 1 Y& read_data_wb [19] $end
$var wire 1 Z& read_data_wb [18] $end
$var wire 1 [& read_data_wb [17] $end
$var wire 1 \& read_data_wb [16] $end
$var wire 1 ]& read_data_wb [15] $end
$var wire 1 ^& read_data_wb [14] $end
$var wire 1 _& read_data_wb [13] $end
$var wire 1 `& read_data_wb [12] $end
$var wire 1 a& read_data_wb [11] $end
$var wire 1 b& read_data_wb [10] $end
$var wire 1 c& read_data_wb [9] $end
$var wire 1 d& read_data_wb [8] $end
$var wire 1 e& read_data_wb [7] $end
$var wire 1 f& read_data_wb [6] $end
$var wire 1 g& read_data_wb [5] $end
$var wire 1 h& read_data_wb [4] $end
$var wire 1 i& read_data_wb [3] $end
$var wire 1 j& read_data_wb [2] $end
$var wire 1 k& read_data_wb [1] $end
$var wire 1 l& read_data_wb [0] $end
$var wire 1 m& MemtoReg_MEM $end
$var wire 1 n& FA [1] $end
$var wire 1 o& FA [0] $end
$var wire 1 p& FB [1] $end
$var wire 1 q& FB [0] $end
$var reg 32 r& A_input [31:0] $end
$var reg 32 s& B_input [31:0] $end
$var reg 3 t& ALU_ctl [2:0] $end
$var reg 32 u& sig_ALU_result [31:0] $end
$var reg 1 v& sig_zero $end
$var reg 5 w& sig_dest_reg [4:0] $end
$var reg 8 x& sig_Add_result [7:0] $end
$var reg 32 y& reg_ALU_result [31:0] $end
$var reg 8 z& reg_Add_result [7:0] $end
$var reg 32 {& reg_memory_write_data [31:0] $end
$var reg 5 |& reg_dest_reg [4:0] $end
$var reg 1 }& reg_zero $end
$var reg 1 ~& reg_MemtoReg $end
$var reg 1 !' reg_RegWrite $end
$var reg 1 "' reg_read_en $end
$var reg 1 #' reg_write_en $end
$var reg 1 $' reg_branch $end
$upscope $end

$scope module my_DMEMORY $end
$var parameter 32 %' PARAM_MEM_length $end
$var parameter 32 &' PARAM_RAM_addr_bits $end
$var wire 1 '' ip_MemtoReg $end
$var wire 1 (' ip_RegWrite $end
$var wire 1 )' ip_read_en $end
$var wire 1 *' ip_write_en $end
$var wire 1 +' ip_data [31] $end
$var wire 1 ,' ip_data [30] $end
$var wire 1 -' ip_data [29] $end
$var wire 1 .' ip_data [28] $end
$var wire 1 /' ip_data [27] $end
$var wire 1 0' ip_data [26] $end
$var wire 1 1' ip_data [25] $end
$var wire 1 2' ip_data [24] $end
$var wire 1 3' ip_data [23] $end
$var wire 1 4' ip_data [22] $end
$var wire 1 5' ip_data [21] $end
$var wire 1 6' ip_data [20] $end
$var wire 1 7' ip_data [19] $end
$var wire 1 8' ip_data [18] $end
$var wire 1 9' ip_data [17] $end
$var wire 1 :' ip_data [16] $end
$var wire 1 ;' ip_data [15] $end
$var wire 1 <' ip_data [14] $end
$var wire 1 =' ip_data [13] $end
$var wire 1 >' ip_data [12] $end
$var wire 1 ?' ip_data [11] $end
$var wire 1 @' ip_data [10] $end
$var wire 1 A' ip_data [9] $end
$var wire 1 B' ip_data [8] $end
$var wire 1 C' ip_data [7] $end
$var wire 1 D' ip_data [6] $end
$var wire 1 E' ip_data [5] $end
$var wire 1 F' ip_data [4] $end
$var wire 1 G' ip_data [3] $end
$var wire 1 H' ip_data [2] $end
$var wire 1 I' ip_data [1] $end
$var wire 1 J' ip_data [0] $end
$var wire 1 K' ip_ALU_output [31] $end
$var wire 1 L' ip_ALU_output [30] $end
$var wire 1 M' ip_ALU_output [29] $end
$var wire 1 N' ip_ALU_output [28] $end
$var wire 1 O' ip_ALU_output [27] $end
$var wire 1 P' ip_ALU_output [26] $end
$var wire 1 Q' ip_ALU_output [25] $end
$var wire 1 R' ip_ALU_output [24] $end
$var wire 1 S' ip_ALU_output [23] $end
$var wire 1 T' ip_ALU_output [22] $end
$var wire 1 U' ip_ALU_output [21] $end
$var wire 1 V' ip_ALU_output [20] $end
$var wire 1 W' ip_ALU_output [19] $end
$var wire 1 X' ip_ALU_output [18] $end
$var wire 1 Y' ip_ALU_output [17] $end
$var wire 1 Z' ip_ALU_output [16] $end
$var wire 1 [' ip_ALU_output [15] $end
$var wire 1 \' ip_ALU_output [14] $end
$var wire 1 ]' ip_ALU_output [13] $end
$var wire 1 ^' ip_ALU_output [12] $end
$var wire 1 _' ip_ALU_output [11] $end
$var wire 1 `' ip_ALU_output [10] $end
$var wire 1 a' ip_ALU_output [9] $end
$var wire 1 b' ip_ALU_output [8] $end
$var wire 1 c' ip_ALU_output [7] $end
$var wire 1 d' ip_ALU_output [6] $end
$var wire 1 e' ip_ALU_output [5] $end
$var wire 1 f' ip_ALU_output [4] $end
$var wire 1 g' ip_ALU_output [3] $end
$var wire 1 h' ip_ALU_output [2] $end
$var wire 1 i' ip_ALU_output [1] $end
$var wire 1 j' ip_ALU_output [0] $end
$var wire 1 k' ip_dest_reg [4] $end
$var wire 1 l' ip_dest_reg [3] $end
$var wire 1 m' ip_dest_reg [2] $end
$var wire 1 n' ip_dest_reg [1] $end
$var wire 1 o' ip_dest_reg [0] $end
$var reg 1 p' op_MemtoReg $end
$var reg 1 q' op_RegWrite $end
$var reg 32 r' op_data [31:0] $end
$var reg 32 s' op_ALU_output [31:0] $end
$var reg 5 t' op_dest_reg [4:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 8 u' data_RAM_addr [7:0] $end
$var reg 32 v' sig_data [31:0] $end
$var reg 1 w' reg_MemtoReg $end
$var reg 1 x' reg_RegWrite $end
$var reg 32 y' reg_data [31:0] $end
$var reg 32 z' reg_ALU_output [31:0] $end
$var reg 5 {' reg_dest_reg [4:0] $end
$upscope $end

$scope module my_WRITE_BACK $end
$var wire 1 |' ip_MemtoReg $end
$var wire 1 }' ip_RegWrite $end
$var wire 1 ~' ip_memory_data [31] $end
$var wire 1 !( ip_memory_data [30] $end
$var wire 1 "( ip_memory_data [29] $end
$var wire 1 #( ip_memory_data [28] $end
$var wire 1 $( ip_memory_data [27] $end
$var wire 1 %( ip_memory_data [26] $end
$var wire 1 &( ip_memory_data [25] $end
$var wire 1 '( ip_memory_data [24] $end
$var wire 1 (( ip_memory_data [23] $end
$var wire 1 )( ip_memory_data [22] $end
$var wire 1 *( ip_memory_data [21] $end
$var wire 1 +( ip_memory_data [20] $end
$var wire 1 ,( ip_memory_data [19] $end
$var wire 1 -( ip_memory_data [18] $end
$var wire 1 .( ip_memory_data [17] $end
$var wire 1 /( ip_memory_data [16] $end
$var wire 1 0( ip_memory_data [15] $end
$var wire 1 1( ip_memory_data [14] $end
$var wire 1 2( ip_memory_data [13] $end
$var wire 1 3( ip_memory_data [12] $end
$var wire 1 4( ip_memory_data [11] $end
$var wire 1 5( ip_memory_data [10] $end
$var wire 1 6( ip_memory_data [9] $end
$var wire 1 7( ip_memory_data [8] $end
$var wire 1 8( ip_memory_data [7] $end
$var wire 1 9( ip_memory_data [6] $end
$var wire 1 :( ip_memory_data [5] $end
$var wire 1 ;( ip_memory_data [4] $end
$var wire 1 <( ip_memory_data [3] $end
$var wire 1 =( ip_memory_data [2] $end
$var wire 1 >( ip_memory_data [1] $end
$var wire 1 ?( ip_memory_data [0] $end
$var wire 1 @( ip_ALU_result [31] $end
$var wire 1 A( ip_ALU_result [30] $end
$var wire 1 B( ip_ALU_result [29] $end
$var wire 1 C( ip_ALU_result [28] $end
$var wire 1 D( ip_ALU_result [27] $end
$var wire 1 E( ip_ALU_result [26] $end
$var wire 1 F( ip_ALU_result [25] $end
$var wire 1 G( ip_ALU_result [24] $end
$var wire 1 H( ip_ALU_result [23] $end
$var wire 1 I( ip_ALU_result [22] $end
$var wire 1 J( ip_ALU_result [21] $end
$var wire 1 K( ip_ALU_result [20] $end
$var wire 1 L( ip_ALU_result [19] $end
$var wire 1 M( ip_ALU_result [18] $end
$var wire 1 N( ip_ALU_result [17] $end
$var wire 1 O( ip_ALU_result [16] $end
$var wire 1 P( ip_ALU_result [15] $end
$var wire 1 Q( ip_ALU_result [14] $end
$var wire 1 R( ip_ALU_result [13] $end
$var wire 1 S( ip_ALU_result [12] $end
$var wire 1 T( ip_ALU_result [11] $end
$var wire 1 U( ip_ALU_result [10] $end
$var wire 1 V( ip_ALU_result [9] $end
$var wire 1 W( ip_ALU_result [8] $end
$var wire 1 X( ip_ALU_result [7] $end
$var wire 1 Y( ip_ALU_result [6] $end
$var wire 1 Z( ip_ALU_result [5] $end
$var wire 1 [( ip_ALU_result [4] $end
$var wire 1 \( ip_ALU_result [3] $end
$var wire 1 ]( ip_ALU_result [2] $end
$var wire 1 ^( ip_ALU_result [1] $end
$var wire 1 _( ip_ALU_result [0] $end
$var wire 1 `( ip_dest_reg [4] $end
$var wire 1 a( ip_dest_reg [3] $end
$var wire 1 b( ip_dest_reg [2] $end
$var wire 1 c( ip_dest_reg [1] $end
$var wire 1 d( ip_dest_reg [0] $end
$var reg 1 e( op_RegWrite $end
$var reg 32 f( op_write_data [31:0] $end
$var reg 5 g( op_dest_reg [4:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1!
1"
b0 $
b0 %
b0 &
b0 '
bx (
b0 )
b0 *
b0 +
x,
0-
x.
x/
00
x1
x2
x3
b0 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
bx ;
b0 >
b0 ?
b0 @
b0 A
bx B
b0 C
b0 D
b0 E
xF
0G
xH
xI
0J
xK
xL
xM
b0 N
b0 O
b0 P
b0 Q
b0 R
b0 S
bx T
b100 U
b0 V
b0 W
b0 X
b0 Y
b0 Z
b0 [
b0 \
bx ]
bx ^
b0 _
b0 `
xa
xb
0c
xd
xe
0f
xg
0h
xi
0j
xk
xl
0m
bx n
b0 o
xp
1q
0r
0s
0t
0u
b0 v
b0 w
0x
xy
xz
b0 {
bx |
bx }
b0 ~
bx !!
b0 "!
b0 #!
b0 $!
b0 %!
b0 &!
x_!
b0 `!
b0 a!
b0 b!
1c!
1d!
xe!
xf!
xg!
xh!
x-"
x."
x/"
x0"
x1"
x2"
x3"
bx 4"
15"
06"
07"
08"
09"
1:"
0;"
0<"
0="
0>"
1?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
b10 G"
b0 H"
xI"
xJ"
xK"
xL"
xM"
xN"
xO"
bx P"
b0 ^"
b0 _"
b100 `"
b1 a"
bx b"
b0 c"
b100 d"
b0 e"
b0 f"
b0 g"
b0 h"
b0 i"
b0 j"
b0 k"
b0 l"
b0 m"
b0 n"
b0 o"
b0 e#
b0 f#
b0 g#
b0 h#
b0 i#
b0 j#
b0 k#
b0 l#
b0 m#
b0 n#
b0 o#
b0 p#
b0 q#
b0 r#
b0 s#
b0 ,$
b0 -$
1.$
x/$
10$
x1$
0_%
0`%
0a%
0b%
0c%
0d%
b0 e%
b0 f%
b0 g%
b0 h%
b0 i%
b0 j%
b0 r&
b0 s&
bx10 t&
b0 u&
1v&
b0 w&
b0 x&
b0 y&
b0 z&
b0 {&
b0 |&
0}&
0~&
0!'
0"'
0#'
0$'
xp'
xq'
bx r'
bx s'
bx t'
b0 u'
b0 v'
xw'
xx'
bx y'
bx z'
bx {'
xe(
bx f(
bx g(
b1000000 Q"
b110 R"
b100000000 %'
b1000 &'
b100000 #
1=
1<
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
1G!
0H!
0I!
0J!
0K!
x^!
xL!
0M!
xN!
0S!
0R!
0Q!
0P!
0O!
0X!
0W!
0V!
0U!
0T!
x]!
x\!
x[!
xZ!
xY!
0i!
0j!
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0S"
xT"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0]"
0y"
0x"
1w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
x<#
xA#
x@#
x?#
x>#
x=#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xb#
zc#
zd#
0t#
xu#
0z#
0y#
0x#
0w#
0v#
x!$
x~#
x}#
x|#
x{#
0&$
0%$
0$$
0#$
0"$
0+$
0*$
0)$
0($
0'$
03$
02$
0?$
0>$
0=$
0<$
0;$
0:$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0P%
0O%
0N%
0M%
0L%
0U%
0T%
0S%
0R%
0Q%
xW%
xV%
xX%
xY%
xZ%
x[%
x\%
x]%
x^%
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xm&
0o&
0n&
0q&
0p&
z9$
z8$
z7$
z6$
z5$
z4$
0''
0('
0)'
0*'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0o'
0n'
0m'
0l'
0k'
x|'
x}'
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
xd(
xc(
xb(
xa(
x`(
$end
#1000
0!
0<
#2000
1!
1<
0-"
0I"
0."
0J"
0/"
0K"
00"
0L"
01"
0M"
02"
0N"
03"
0O"
b10 4"
b10 P"
b0 b"
b0 y'
b0 z'
b0 {'
0w'
0x'
0q'
0p'
b0 t'
b0 s'
b0 r'
b10 n
0a
0b
0g
0l
0e
0i
0d
0L
0I
0H
0F
b0 ^
b0 ]
b0 |
0k
0y
0W%
1V%
0^%
0]%
0\%
0[%
0L!
0Z%
0^!
0Y%
0f!
0h!
0e!
0g!
b10 t&
b0 T
0,
0.
0/
02
0]!
0\!
0[!
0Z!
0Y!
0!$
0~#
0}#
0|#
0{#
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0|'
0}'
0N!
0e(
b0 f(
b0 g(
1/$
11$
b0 ;
0_!
0p
b0 }
b0 !!
0z
0K
b0 B
0M
0<#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0b#
03
b0 (
01
0X%
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0m&
0u#
0T"
#3000
0!
0<
#4000
1!
1<
#5000
0"
0=
0!
0<
#6000
1!
1<
b100 c"
b100 l#
1}&
b1 4
1_%
1f
1G
1-
13$
1]"
1i!
b100 h"
b100 V
1G$
b100 x&
b1000 d"
b10 a"
#7000
0!
0<
#8000
1!
1<
b1000 c"
b100 f"
b100 z&
b10 4
b100 f%
b100 [
1Z"
b100 _"
b1000 `"
b1000 U
b100 >
b100 $
0w"
1v"
b1100 d"
b11 a"
#9000
0!
0<
#10000
1!
1<
b10000001000010000000011111100 b"
b1100 c"
b1000 f"
b1000 l#
b11 4
b1000 h"
b1000 _"
b1100 `"
b1100 U
b1000 >
b1000 V
b1000 $
0G$
1F$
1w"
b1000 x&
b10000 d"
b100 a"
#11000
0!
0<
#12000
1!
1<
b10001100000010010000000000000000 b"
b10000 c"
b10000001000010000000011111100 e"
b1100 f"
b1100 l#
b1000 z&
b100 4
b1000 f%
b1000 [
0Z"
1Y"
b1100 h"
b10000001000010000000011111100 ^"
b1100 _"
b10000 `"
b10000 U
b1100 >
b10000001000010000000011111100 o
b1100 V
b10000001000010000000011111100 C
b1100 $
1G$
1D!
1C!
1B!
1A!
1@!
1?!
16!
11!
1*!
1*"
1)"
1("
1'"
1&"
1%"
1z!
1u!
1n!
19#
18#
17#
16#
15#
14#
1+#
1&#
1}"
0w"
0v"
1u"
b1 e#
b1 f#
b1 h#
b11111100 i#
b111100 j#
b100 H"
0?"
b100 `!
b1 a!
b1 b!
b1100 x&
b10000001000010000000011111100 )
1@"
1B"
0:"
1>"
1E"
b11 G"
19"
b1 G"
05"
0@"
0B"
0q
1u
0G!
1K!
b10100 d"
b101 a"
#13000
0!
0<
#14000
1!
1<
12"
1N"
b1 4"
b1 P"
b1001000100000100000100000 b"
b10100 c"
b10001100000010010000000000000000 e"
b10000 f"
b111100 k#
b10000 l#
b1 m#
b1 n#
b11111100 o#
b1 q#
b1 r#
b1 s#
b1100 z&
b101 4
b1100 f%
b1 n
1b
1F
b1100 [
1W%
0V%
1^%
b110 t&
1,
1Z"
b111100 g"
b10000 h"
b1 i"
b1 j"
b11111100 k"
b1 m"
b1 o"
b1 n"
b10001100000010010000000000000000 ^"
b10000 _"
b10100 `"
b10100 U
b10000 >
b10001100000010010000000000000000 o
b1 #!
b1 "!
b1 w
b11111100 Z
b1 Y
b1 X
b10000 V
b111100 W
b1 @
b1 A
b1 &!
b1 N
b1 O
b10001100000010010000000000000000 C
b10000 $
1=$
1<$
1;$
1:$
0G$
0F$
1E$
1U%
0D!
0C!
0B!
0A!
0@!
0?!
13!
01!
1,!
1+!
0*!
1'!
0*"
0)"
0("
0'"
0&"
0%"
1w!
0u!
1p!
1o!
0n!
1k!
09#
08#
07#
06#
05#
04#
1(#
0&#
1!#
1~"
0}"
1z"
1w"
b0 e#
b1001 f#
b1001 h#
b0 i#
b0 j#
b100011 H"
b100011 `!
b0 a!
b1001 b!
b1 w&
b10000 x&
b10001100000010010000000000000000 )
b1 5
b1 6
b1 R
b1 '
b1 &
1S!
b1 7
1<"
0>"
0E"
b0 G"
09"
1A"
1C"
17"
1B"
1F"
1s
0u
1I!
0K!
0d!
1i$
1+%
1I%
1H%
1G%
1F%
1E%
1D%
1+$
1&$
0.$
0/$
00$
01$
b0 x&
b1 s&
b1 r&
b1 i%
b1 j%
b1 `
b1 _
b1 D
b1 E
b1 +
b1 *
b11000 d"
b110 a"
#15000
0!
0<
#16000
1!
1<
1."
1J"
1/"
1K"
10"
1L"
02"
0N"
13"
1O"
b0 4"
b0 P"
b10001100000010000000000000000100 b"
b11000 c"
b1001000100000100000100000 e"
b10100 f"
b0 k#
b10100 l#
b0 m#
b1001 n#
b0 o#
b1001 q#
b0 r#
b1001 s#
b0 z&
b1 {&
b1 |&
1$'
b110 4
1d%
b0 f%
b0 n
1a
0b
1l
1e
1i
1L
1I
0F
b0 [
1c
0W%
0^%
1\%
1[%
1L!
1Z%
1^!
b10 t&
0,
1/
12
1X%
0Z"
0Y"
12$
1S"
1j!
b11111100 s&
b11111101 u&
b0 i%
b0 j%
b0 g"
b10100 h"
b0 i"
b1001 j"
b0 k"
b1001 m"
b1001 o"
b0 n"
b0 ^"
b0 _"
b0 `"
0."
0/"
00"
03"
0a
0l
0e
0i
b0 U
b0 >
b0 o
b0 #!
b1001 "!
b1001 w
b0 Z
b1001 Y
b0 X
b10100 V
b0 W
b0 `
b0 _
0v&
b0 D
b0 E
b0 @
b1001 A
b1001 &!
b1001 N
b0 O
b0 C
b0 $
0L
0I
0\%
0[%
0L!
0Z%
0^!
0=$
0<$
0;$
0:$
1G$
1R%
06!
03!
0,!
0+!
0'!
0z!
0w!
0p!
0o!
0k!
0+#
0(#
0!#
0~"
0z"
0w"
0u"
b0 f#
b0 h#
b0 H"
1?"
b0 `!
b0 b!
b1001 w&
b100 x&
0/
02
b0 )
b0 5
b1001 6
b1001 R
b1001 '
b0 &
b0 +
b0 *
1P!
b1001 7
0B"
1:"
0<"
0A"
0C"
07"
0F"
b10 G"
15"
1q
0s
1G!
0I!
1d!
0X%
0i$
1(%
0I%
0H%
0G%
0F%
0E%
0D%
1($
0&$
1.$
1/$
b10100 x&
b0 r&
b1001 s&
b1001 u&
b0 d"
b0 a"
#17000
0!
0<
#18000
1!
1<
0J"
0K"
0L"
0O"
b10 P"
b0 b"
b0 c"
b0 e"
b0 f"
b0 l#
b0 n#
b0 q#
b0 s#
b1001 y&
b10100 z&
b1001 {&
b1001 |&
0}&
0$'
b111 4
0d%
0_%
b10100 f%
b10100 [
0f
0c
0G
0-
1Z"
1X"
03$
0]"
0i!
02$
0S"
0j!
b1001 e%
b1001 g%
b1001 h%
b1001 j%
b0 h"
b0 j"
b0 m"
b0 o"
b100 `"
b10 4"
b10 n
b100 U
b0 "!
b0 w
b0 Y
b0 V
b1001 `
b1001 {
b1001 ~
b1001 \
b1001 ?
b1001 S
b1001 E
b0 A
b0 &!
b0 N
1j'
1g'
1J'
1G'
1X!
1U!
1z#
1w#
1o'
1l'
0G$
0E$
0U%
0R%
1w"
1V%
b0 w&
b0 x&
0.$
10$
b1001 u'
b0 6
b0 R
b0 '
b1001 +
b1001 :
b1001 %
0S!
0P!
b0 7
1,&
1)&
0+%
0(%
0+$
0($
00$
11$
b0 s&
b0 u&
b0 j%
b0 `
1v&
b0 E
b0 +
b100 d"
b1 a"
#19000
0!
0<
#20000
1!
1<
b100 c"
b100 l#
b0 y&
b0 z&
b0 {&
b0 |&
1}&
b1001 z'
b1001 {'
b1000 4
b1001 t'
b1001 s'
1_%
b0 f%
b0 [
1f
b1001 ]
b1001 |
b1001 T
1G
1]!
1Z!
1!$
1|#
1d(
1a(
1_(
1\(
b1001 f(
b1001 g(
0/$
01$
1-
b1001 ;
b1001 }
b1001 !!
b1001 B
1a#
1^#
1A#
1>#
b1001 (
13$
1]"
1i!
1L&
1I&
0Z"
0X"
b0 e%
b0 g%
b0 h%
b100 h"
b100 V
b0 {
b0 ~
b0 \
b0 ?
b0 S
0j'
0g'
0J'
0G'
0X!
0U!
0z#
0w#
0o'
0l'
1G$
b100 x&
1.$
10$
b0 u'
b0 :
b0 %
0,&
0)&
b1000 d"
b10 a"
#21000
0!
0<
#22000
1!
1<
b1000 c"
b100 f"
b100 z&
b0 z'
b0 {'
b1001 4
b0 t'
b0 s'
b100 f%
b100 [
b0 ]
b0 |
b0 T
0]!
0Z!
0!$
0|#
0d(
0a(
0_(
0\(
b0 f(
b0 g(
1/$
11$
b0 ;
b0 }
b0 !!
b0 B
0a#
0^#
0A#
0>#
b0 (
0L&
0I&
1Z"
b100 _"
b1000 `"
b1000 U
b100 >
b100 $
0w"
1v"
b1100 d"
b11 a"
#23000
0!
0<
#24000
1!
1<
b10000001000010000000011111100 b"
b1100 c"
b1000 f"
b1000 l#
b1010 4
b1000 h"
b1000 _"
b1100 `"
b1100 U
b1000 >
b1000 V
b1000 $
0G$
1F$
1w"
b1000 x&
b10000 d"
b100 a"
#25000
0!
0<
#26000
1!
1<
b10001100000010010000000000000000 b"
b10000 c"
b10000001000010000000011111100 e"
b1100 f"
b1100 l#
b1000 z&
b1011 4
b1000 f%
b1000 [
0Z"
1Y"
b1100 h"
b10000001000010000000011111100 ^"
b1100 _"
b10000 `"
b10000 U
b1100 >
b10000001000010000000011111100 o
b1100 V
b10000001000010000000011111100 C
b1100 $
1G$
1D!
1C!
1B!
1A!
1@!
1?!
16!
11!
1*!
1*"
1)"
1("
1'"
1&"
1%"
1z!
1u!
1n!
19#
18#
17#
16#
15#
14#
1+#
1&#
1}"
0w"
0v"
1u"
b1 e#
b1 f#
b1 h#
b11111100 i#
b111100 j#
b100 H"
0?"
b100 `!
b1 a!
b1 b!
b1100 x&
b10000001000010000000011111100 )
1@"
1B"
0:"
1>"
1E"
b11 G"
19"
b1 G"
05"
0@"
0B"
0q
1u
0G!
1K!
b10100 d"
b101 a"
#27000
0!
0<
#28000
1!
1<
12"
1N"
b1 4"
b1 P"
b1001000100000100000100000 b"
b10100 c"
b10001100000010010000000000000000 e"
b10000 f"
b111100 k#
b10000 l#
b1 m#
b1 n#
b11111100 o#
b1 q#
b1 r#
b1 s#
b1100 z&
b1100 4
b1100 f%
b1 n
1b
1F
b1100 [
1W%
0V%
1^%
b110 t&
1,
1Z"
b111100 g"
b10000 h"
b1 i"
b1 j"
b11111100 k"
b1 m"
b1 o"
b1 n"
b10001100000010010000000000000000 ^"
b10000 _"
b10100 `"
b10100 U
b10000 >
b10001100000010010000000000000000 o
b1 #!
b1 "!
b1 w
b11111100 Z
b1 Y
b1 X
b10000 V
b111100 W
b1 @
b1 A
b1 &!
b1 N
b1 O
b10001100000010010000000000000000 C
b10000 $
1=$
1<$
1;$
1:$
0G$
0F$
1E$
1U%
0D!
0C!
0B!
0A!
0@!
0?!
13!
01!
1,!
1+!
0*!
1'!
0*"
0)"
0("
0'"
0&"
0%"
1w!
0u!
1p!
1o!
0n!
1k!
09#
08#
07#
06#
05#
04#
1(#
0&#
1!#
1~"
0}"
1z"
1w"
b0 e#
b1001 f#
b1001 h#
b0 i#
b0 j#
b100011 H"
b100011 `!
b0 a!
b1001 b!
b1 w&
b10000 x&
b10001100000010010000000000000000 )
b1 5
b1 6
b1 R
b1 '
b1 &
1S!
b1 7
1<"
0>"
0E"
b0 G"
09"
1A"
1C"
17"
1B"
1F"
1s
0u
1I!
0K!
0d!
1i$
1+%
1I%
1H%
1G%
1F%
1E%
1D%
1+$
1&$
0.$
0/$
00$
01$
b0 x&
b1 s&
b1 r&
b1 i%
b1 j%
b1 `
b1 _
b1 D
b1 E
b1 +
b1 *
b11000 d"
b110 a"
#29000
0!
0<
#30000
1!
1<
1."
1J"
1/"
1K"
10"
1L"
02"
0N"
13"
1O"
b0 4"
b0 P"
b10001100000010000000000000000100 b"
b11000 c"
b1001000100000100000100000 e"
b10100 f"
b0 k#
b10100 l#
b0 m#
b1001 n#
b0 o#
b1001 q#
b0 r#
b1001 s#
b0 z&
b1 {&
b1 |&
1$'
b1101 4
1d%
b0 f%
b0 n
1a
0b
1l
1e
1i
1L
1I
0F
b0 [
1c
0W%
0^%
1\%
1[%
1L!
1Z%
1^!
b10 t&
0,
1/
12
1X%
0Z"
0Y"
12$
1S"
1j!
b11111100 s&
b11111101 u&
b0 i%
b0 j%
b0 g"
b10100 h"
b0 i"
b1001 j"
b0 k"
b1001 m"
b1001 o"
b0 n"
b0 ^"
b0 _"
b0 `"
0."
0/"
00"
03"
0a
0l
0e
0i
b0 U
b0 >
b0 o
b0 #!
b1001 "!
b1001 w
b0 Z
b1001 Y
b0 X
b10100 V
b0 W
b0 `
b0 _
0v&
b0 D
b0 E
b0 @
b1001 A
b1001 &!
b1001 N
b0 O
b0 C
b0 $
0L
0I
0\%
0[%
0L!
0Z%
0^!
0=$
0<$
0;$
0:$
1G$
1R%
06!
03!
0,!
0+!
0'!
0z!
0w!
0p!
0o!
0k!
0+#
0(#
0!#
0~"
0z"
0w"
0u"
b0 f#
b0 h#
b0 H"
1?"
b0 `!
b0 b!
b1001 w&
b100 x&
0/
02
b0 )
b0 5
b1001 6
b1001 R
b1001 '
b0 &
b0 +
b0 *
1P!
b1001 7
0B"
1:"
0<"
0A"
0C"
07"
0F"
b10 G"
15"
1q
0s
1G!
0I!
1d!
0X%
0i$
1(%
0I%
0H%
0G%
0F%
0E%
0D%
1($
0&$
1.$
1/$
b10100 x&
b0 r&
b1001 s&
b1001 u&
b0 d"
b0 a"
#31000
0!
0<
#32000
1!
1<
0J"
0K"
0L"
0O"
b10 P"
b0 b"
b0 c"
b0 e"
b0 f"
b0 l#
b0 n#
b0 q#
b0 s#
b1001 y&
b10100 z&
b1001 {&
b1001 |&
0}&
0$'
b1110 4
0d%
0_%
b10100 f%
b10100 [
0f
0c
0G
0-
1Z"
1X"
03$
0]"
0i!
02$
0S"
0j!
b1001 e%
b1001 g%
b1001 h%
b1001 j%
b0 h"
b0 j"
b0 m"
b0 o"
b100 `"
b10 4"
b10 n
b100 U
b0 "!
b0 w
b0 Y
b0 V
b1001 `
b1001 {
b1001 ~
b1001 \
b1001 ?
b1001 S
b1001 E
b0 A
b0 &!
b0 N
1j'
1g'
1J'
1G'
1X!
1U!
1z#
1w#
1o'
1l'
0G$
0E$
0U%
0R%
1w"
1V%
b0 w&
b0 x&
0.$
10$
b1001 u'
b0 6
b0 R
b0 '
b1001 +
b1001 :
b1001 %
0S!
0P!
b0 7
1,&
1)&
0+%
0(%
0+$
0($
00$
11$
b0 s&
b0 u&
b0 j%
b0 `
1v&
b0 E
b0 +
b100 d"
b1 a"
#33000
0!
0<
#34000
1!
1<
b100 c"
b100 l#
b0 y&
b0 z&
b0 {&
b0 |&
1}&
b1001 z'
b1001 {'
b1111 4
b1001 t'
b1001 s'
1_%
b0 f%
b0 [
1f
b1001 ]
b1001 |
b1001 T
1G
1]!
1Z!
1!$
1|#
1d(
1a(
1_(
1\(
b1001 f(
b1001 g(
0/$
01$
1-
b1001 ;
b1001 }
b1001 !!
b1001 B
1a#
1^#
1A#
1>#
b1001 (
13$
1]"
1i!
1L&
1I&
0Z"
0X"
b0 e%
b0 g%
b0 h%
b100 h"
b100 V
b0 {
b0 ~
b0 \
b0 ?
b0 S
0j'
0g'
0J'
0G'
0X!
0U!
0z#
0w#
0o'
0l'
1G$
b100 x&
1.$
10$
b0 u'
b0 :
b0 %
0,&
0)&
b1000 d"
b10 a"
#35000
0!
0<
#36000
1!
1<
b1000 c"
b100 f"
b100 z&
b0 z'
b0 {'
b10000 4
b0 t'
b0 s'
b100 f%
b100 [
b0 ]
b0 |
b0 T
0]!
0Z!
0!$
0|#
0d(
0a(
0_(
0\(
b0 f(
b0 g(
1/$
11$
b0 ;
b0 }
b0 !!
b0 B
0a#
0^#
0A#
0>#
b0 (
0L&
0I&
1Z"
b100 _"
b1000 `"
b1000 U
b100 >
b100 $
0w"
1v"
b1100 d"
b11 a"
#37000
0!
0<
#38000
1!
1<
b10000001000010000000011111100 b"
b1100 c"
b1000 f"
b1000 l#
b10001 4
b1000 h"
b1000 _"
b1100 `"
b1100 U
b1000 >
b1000 V
b1000 $
0G$
1F$
1w"
b1000 x&
b10000 d"
b100 a"
#39000
0!
0<
#40000
1!
1<
b10001100000010010000000000000000 b"
b10000 c"
b10000001000010000000011111100 e"
b1100 f"
b1100 l#
b1000 z&
b10010 4
b1000 f%
b1000 [
0Z"
1Y"
b1100 h"
b10000001000010000000011111100 ^"
b1100 _"
b10000 `"
b10000 U
b1100 >
b10000001000010000000011111100 o
b1100 V
b10000001000010000000011111100 C
b1100 $
1G$
1D!
1C!
1B!
1A!
1@!
1?!
16!
11!
1*!
1*"
1)"
1("
1'"
1&"
1%"
1z!
1u!
1n!
19#
18#
17#
16#
15#
14#
1+#
1&#
1}"
0w"
0v"
1u"
b1 e#
b1 f#
b1 h#
b11111100 i#
b111100 j#
b100 H"
0?"
b100 `!
b1 a!
b1 b!
b1100 x&
b10000001000010000000011111100 )
1@"
1B"
0:"
1>"
1E"
b11 G"
19"
b1 G"
05"
0@"
0B"
0q
1u
0G!
1K!
b10100 d"
b101 a"
#41000
0!
0<
#42000
1!
1<
12"
1N"
b1 4"
b1 P"
b1001000100000100000100000 b"
b10100 c"
b10001100000010010000000000000000 e"
b10000 f"
b111100 k#
b10000 l#
b1 m#
b1 n#
b11111100 o#
b1 q#
b1 r#
b1 s#
b1100 z&
b10011 4
b1100 f%
b1 n
1b
1F
b1100 [
1W%
0V%
1^%
b110 t&
1,
1Z"
b111100 g"
b10000 h"
b1 i"
b1 j"
b11111100 k"
b1 m"
b1 o"
b1 n"
b10001100000010010000000000000000 ^"
b10000 _"
b10100 `"
b10100 U
b10000 >
b10001100000010010000000000000000 o
b1 #!
b1 "!
b1 w
b11111100 Z
b1 Y
b1 X
b10000 V
b111100 W
b1 @
b1 A
b1 &!
b1 N
b1 O
b10001100000010010000000000000000 C
b10000 $
1=$
1<$
1;$
1:$
0G$
0F$
1E$
1U%
0D!
0C!
0B!
0A!
0@!
0?!
13!
01!
1,!
1+!
0*!
1'!
0*"
0)"
0("
0'"
0&"
0%"
1w!
0u!
1p!
1o!
0n!
1k!
09#
08#
07#
06#
05#
04#
1(#
0&#
1!#
1~"
0}"
1z"
1w"
b0 e#
b1001 f#
b1001 h#
b0 i#
b0 j#
b100011 H"
b100011 `!
b0 a!
b1001 b!
b1 w&
b10000 x&
b10001100000010010000000000000000 )
b1 5
b1 6
b1 R
b1 '
b1 &
1S!
b1 7
1<"
0>"
0E"
b0 G"
09"
1A"
1C"
17"
1B"
1F"
1s
0u
1I!
0K!
0d!
1i$
1+%
1I%
1H%
1G%
1F%
1E%
1D%
1+$
1&$
0.$
0/$
00$
01$
b0 x&
b1 s&
b1 r&
b1 i%
b1 j%
b1 `
b1 _
b1 D
b1 E
b1 +
b1 *
b11000 d"
b110 a"
#43000
0!
0<
#44000
1!
1<
1."
1J"
1/"
1K"
10"
1L"
02"
0N"
13"
1O"
b0 4"
b0 P"
b10001100000010000000000000000100 b"
b11000 c"
b1001000100000100000100000 e"
b10100 f"
b0 k#
b10100 l#
b0 m#
b1001 n#
b0 o#
b1001 q#
b0 r#
b1001 s#
b0 z&
b1 {&
b1 |&
1$'
b10100 4
1d%
b0 f%
b0 n
1a
0b
1l
1e
1i
1L
1I
0F
b0 [
1c
0W%
0^%
1\%
1[%
1L!
1Z%
1^!
b10 t&
0,
1/
12
1X%
0Z"
0Y"
12$
1S"
1j!
b11111100 s&
b11111101 u&
b0 i%
b0 j%
b0 g"
b10100 h"
b0 i"
b1001 j"
b0 k"
b1001 m"
b1001 o"
b0 n"
b0 ^"
b0 _"
b0 `"
0."
0/"
00"
03"
0a
0l
0e
0i
b0 U
b0 >
b0 o
b0 #!
b1001 "!
b1001 w
b0 Z
b1001 Y
b0 X
b10100 V
b0 W
b0 `
b0 _
0v&
b0 D
b0 E
b0 @
b1001 A
b1001 &!
b1001 N
b0 O
b0 C
b0 $
0L
0I
0\%
0[%
0L!
0Z%
0^!
0=$
0<$
0;$
0:$
1G$
1R%
06!
03!
0,!
0+!
0'!
0z!
0w!
0p!
0o!
0k!
0+#
0(#
0!#
0~"
0z"
0w"
0u"
b0 f#
b0 h#
b0 H"
1?"
b0 `!
b0 b!
b1001 w&
b100 x&
0/
02
b0 )
b0 5
b1001 6
b1001 R
b1001 '
b0 &
b0 +
b0 *
1P!
b1001 7
0B"
1:"
0<"
0A"
0C"
07"
0F"
b10 G"
15"
1q
0s
1G!
0I!
1d!
0X%
0i$
1(%
0I%
0H%
0G%
0F%
0E%
0D%
1($
0&$
1.$
1/$
b10100 x&
b0 r&
b1001 s&
b1001 u&
b0 d"
b0 a"
#45000
0!
0<
#46000
1!
1<
0J"
0K"
0L"
0O"
b10 P"
b0 b"
b0 c"
b0 e"
b0 f"
b0 l#
b0 n#
b0 q#
b0 s#
b1001 y&
b10100 z&
b1001 {&
b1001 |&
0}&
0$'
b10101 4
0d%
0_%
b10100 f%
b10100 [
0f
0c
0G
0-
1Z"
1X"
03$
0]"
0i!
02$
0S"
0j!
b1001 e%
b1001 g%
b1001 h%
b1001 j%
b0 h"
b0 j"
b0 m"
b0 o"
b100 `"
b10 4"
b10 n
b100 U
b0 "!
b0 w
b0 Y
b0 V
b1001 `
b1001 {
b1001 ~
b1001 \
b1001 ?
b1001 S
b1001 E
b0 A
b0 &!
b0 N
1j'
1g'
1J'
1G'
1X!
1U!
1z#
1w#
1o'
1l'
0G$
0E$
0U%
0R%
1w"
1V%
b0 w&
b0 x&
0.$
10$
b1001 u'
b0 6
b0 R
b0 '
b1001 +
b1001 :
b1001 %
0S!
0P!
b0 7
1,&
1)&
0+%
0(%
0+$
0($
00$
11$
b0 s&
b0 u&
b0 j%
b0 `
1v&
b0 E
b0 +
b100 d"
b1 a"
#47000
0!
0<
#48000
1!
1<
b100 c"
b100 l#
b0 y&
b0 z&
b0 {&
b0 |&
1}&
b1001 z'
b1001 {'
b10110 4
b1001 t'
b1001 s'
1_%
b0 f%
b0 [
1f
b1001 ]
b1001 |
b1001 T
1G
1]!
1Z!
1!$
1|#
1d(
1a(
1_(
1\(
b1001 f(
b1001 g(
0/$
01$
1-
b1001 ;
b1001 }
b1001 !!
b1001 B
1a#
1^#
1A#
1>#
b1001 (
13$
1]"
1i!
1L&
1I&
0Z"
0X"
b0 e%
b0 g%
b0 h%
b100 h"
b100 V
b0 {
b0 ~
b0 \
b0 ?
b0 S
0j'
0g'
0J'
0G'
0X!
0U!
0z#
0w#
0o'
0l'
1G$
b100 x&
1.$
10$
b0 u'
b0 :
b0 %
0,&
0)&
b1000 d"
b10 a"
#49000
0!
0<
#50000
1!
1<
b1000 c"
b100 f"
b100 z&
b0 z'
b0 {'
b10111 4
b0 t'
b0 s'
b100 f%
b100 [
b0 ]
b0 |
b0 T
0]!
0Z!
0!$
0|#
0d(
0a(
0_(
0\(
b0 f(
b0 g(
1/$
11$
b0 ;
b0 }
b0 !!
b0 B
0a#
0^#
0A#
0>#
b0 (
0L&
0I&
1Z