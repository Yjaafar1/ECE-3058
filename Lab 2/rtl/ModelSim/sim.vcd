$date
	Wed Feb 16 18:05:30 2022
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module MIPS_pipelined_tb $end
$var reg 1 ! aclk $end
$var reg 1 " reset $end
$var integer 32 # i $end
$var reg 10 $ PC [9:0] $end
$var reg 32 % ALU_result_out [31:0] $end
$var reg 32 & read_data_1_out [31:0] $end
$var reg 32 ' read_data_2_out [31:0] $end
$var reg 32 ( write_data_out [31:0] $end
$var reg 32 ) Instruction_out [31:0] $end
$var reg 32 * A_input_out [31:0] $end
$var reg 32 + B_input_out [31:0] $end
$var reg 1 , Branch_out $end
$var reg 1 - Zero_out $end
$var reg 1 . MemWrite_out $end
$var reg 1 / RegWrite_out $end
$var reg 1 0 RegWrite_mem_out $end
$var reg 1 1 RegWrite_wb_out $end
$var reg 1 2 MemtoReg_out $end
$var reg 1 3 stall_out $end
$var reg 7 4 cycle_cnt [6:0] $end
$var reg 5 5 dec_rs_out [4:0] $end
$var reg 5 6 dec_rt_out [4:0] $end
$var reg 5 7 dest_out [4:0] $end
$var reg 2 8 op_FA_out [1:0] $end
$var reg 2 9 op_FB_out [1:0] $end
$var reg 5 : dest_EX_out [4:0] $end
$var reg 5 ; dest_MEM_out [4:0] $end

$scope module my_MIPS_processor $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 10 > PC [9:0] $end
$var reg 32 ? ALU_result_out [31:0] $end
$var reg 32 @ read_data_1_out [31:0] $end
$var reg 32 A read_data_2_out [31:0] $end
$var reg 32 B write_data_out [31:0] $end
$var reg 32 C Instruction_out [31:0] $end
$var reg 32 D A_input_out [31:0] $end
$var reg 32 E B_input_out [31:0] $end
$var reg 1 F Branch_out $end
$var reg 1 G Zero_out $end
$var reg 1 H MemWrite_out $end
$var reg 1 I RegWrite_out $end
$var reg 1 J RegWrite_mem_out $end
$var reg 1 K RegWrite_wb_out $end
$var reg 1 L MemtoReg_out $end
$var reg 1 M stall_out $end
$var reg 5 N dec_rt_out [4:0] $end
$var reg 5 O dec_rs_out [4:0] $end
$var reg 2 P op_FA_out [1:0] $end
$var reg 2 Q op_FB_out [1:0] $end
$var reg 5 R dest_out [4:0] $end
$var reg 5 S dest_EX_out [4:0] $end
$var reg 5 T dest_MEM_out [4:0] $end
$var reg 10 U PC_plus_4 [9:0] $end
$var reg 10 V PC_plus_4_ID [9:0] $end
$var reg 6 W function_opcode [5:0] $end
$var reg 32 X read_data_1 [31:0] $end
$var reg 32 Y read_data_2 [31:0] $end
$var reg 32 Z sign_extend [31:0] $end
$var reg 8 [ Add_result [7:0] $end
$var reg 32 \ ALU_result [31:0] $end
$var reg 32 ] ALU_result_MEM [31:0] $end
$var reg 32 ^ read_data [31:0] $end
$var reg 32 _ A_input [31:0] $end
$var reg 32 ` B_input [31:0] $end
$var reg 1 a ALUSrc $end
$var reg 1 b Branch $end
$var reg 1 c branch_EX $end
$var reg 1 d RegDst $end
$var reg 1 e RegWrite $end
$var reg 1 f Zero $end
$var reg 1 g MemWrite $end
$var reg 1 h MemWrite_EX $end
$var reg 1 i MemtoReg $end
$var reg 1 j MemtoReg_EX $end
$var reg 1 k MemtoReg_MEM $end
$var reg 1 l MemRead $end
$var reg 1 m MemRead_EX $end
$var reg 2 n ALUop [1:0] $end
$var reg 32 o Instruction [31:0] $end
$var reg 1 p stall $end
$var reg 1 q R_format $end
$var reg 1 r I_format $end
$var reg 1 s Lw $end
$var reg 1 t Sw $end
$var reg 1 u Beq $end
$var reg 5 v dest_reg_R_type [4:0] $end
$var reg 5 w dest_reg_I_type [4:0] $end
$var reg 1 x sig_RegWrite_EX $end
$var reg 1 y sig_RegWrite_MEM $end
$var reg 1 z sig_RegWrite_WB $end
$var reg 5 { dest_EX [4:0] $end
$var reg 5 | dest_MEM [4:0] $end
$var reg 5 } dest_WB [4:0] $end
$var reg 32 ~ memory_write_data [31:0] $end
$var reg 32 !! write_data_WB [31:0] $end
$var reg 5 "! dec_rt [4:0] $end
$var reg 5 #! dec_rs [4:0] $end
$var reg 2 $! op_FA [1:0] $end
$var reg 2 %! op_FB [1:0] $end
$var reg 5 &! dest [4:0] $end

$scope module my_STALL_CONT $end
$var wire 1 '! ip_instruction [31] $end
$var wire 1 (! ip_instruction [30] $end
$var wire 1 )! ip_instruction [29] $end
$var wire 1 *! ip_instruction [28] $end
$var wire 1 +! ip_instruction [27] $end
$var wire 1 ,! ip_instruction [26] $end
$var wire 1 -! ip_instruction [25] $end
$var wire 1 .! ip_instruction [24] $end
$var wire 1 /! ip_instruction [23] $end
$var wire 1 0! ip_instruction [22] $end
$var wire 1 1! ip_instruction [21] $end
$var wire 1 2! ip_instruction [20] $end
$var wire 1 3! ip_instruction [19] $end
$var wire 1 4! ip_instruction [18] $end
$var wire 1 5! ip_instruction [17] $end
$var wire 1 6! ip_instruction [16] $end
$var wire 1 7! ip_instruction [15] $end
$var wire 1 8! ip_instruction [14] $end
$var wire 1 9! ip_instruction [13] $end
$var wire 1 :! ip_instruction [12] $end
$var wire 1 ;! ip_instruction [11] $end
$var wire 1 <! ip_instruction [10] $end
$var wire 1 =! ip_instruction [9] $end
$var wire 1 >! ip_instruction [8] $end
$var wire 1 ?! ip_instruction [7] $end
$var wire 1 @! ip_instruction [6] $end
$var wire 1 A! ip_instruction [5] $end
$var wire 1 B! ip_instruction [4] $end
$var wire 1 C! ip_instruction [3] $end
$var wire 1 D! ip_instruction [2] $end
$var wire 1 E! ip_instruction [1] $end
$var wire 1 F! ip_instruction [0] $end
$var wire 1 G! ip_R_format $end
$var wire 1 H! ip_I_format $end
$var wire 1 I! ip_Lw $end
$var wire 1 J! ip_Sw $end
$var wire 1 K! ip_Beq $end
$var wire 1 L! ip_RegWrite_EX $end
$var wire 1 M! ip_RegWrite_MEM $end
$var wire 1 N! ip_RegWrite_WB $end
$var wire 1 O! ip_dest_EX [4] $end
$var wire 1 P! ip_dest_EX [3] $end
$var wire 1 Q! ip_dest_EX [2] $end
$var wire 1 R! ip_dest_EX [1] $end
$var wire 1 S! ip_dest_EX [0] $end
$var wire 1 T! ip_dest_MEM [4] $end
$var wire 1 U! ip_dest_MEM [3] $end
$var wire 1 V! ip_dest_MEM [2] $end
$var wire 1 W! ip_dest_MEM [1] $end
$var wire 1 X! ip_dest_MEM [0] $end
$var wire 1 Y! ip_dest_WB [4] $end
$var wire 1 Z! ip_dest_WB [3] $end
$var wire 1 [! ip_dest_WB [2] $end
$var wire 1 \! ip_dest_WB [1] $end
$var wire 1 ]! ip_dest_WB [0] $end
$var wire 1 ^! ip_MemtoReg $end
$var reg 1 _! op_stall $end
$var reg 6 `! sig_opcode [5:0] $end
$var reg 5 a! sig_RS [4:0] $end
$var reg 5 b! sig_RT [4:0] $end
$var reg 1 c! use_RS $end
$var reg 1 d! use_RT $end
$var reg 1 e! RS_EX_hazard $end
$var reg 1 f! RS_hazard $end
$var reg 1 g! RT_EX_hazard $end
$var reg 1 h! RT_hazard $end
$upscope $end

$scope module my_CONTROL $end
$var wire 1 i! ip_instruction [31] $end
$var wire 1 j! ip_instruction [30] $end
$var wire 1 k! ip_instruction [29] $end
$var wire 1 l! ip_instruction [28] $end
$var wire 1 m! ip_instruction [27] $end
$var wire 1 n! ip_instruction [26] $end
$var wire 1 o! ip_instruction [25] $end
$var wire 1 p! ip_instruction [24] $end
$var wire 1 q! ip_instruction [23] $end
$var wire 1 r! ip_instruction [22] $end
$var wire 1 s! ip_instruction [21] $end
$var wire 1 t! ip_instruction [20] $end
$var wire 1 u! ip_instruction [19] $end
$var wire 1 v! ip_instruction [18] $end
$var wire 1 w! ip_instruction [17] $end
$var wire 1 x! ip_instruction [16] $end
$var wire 1 y! ip_instruction [15] $end
$var wire 1 z! ip_instruction [14] $end
$var wire 1 {! ip_instruction [13] $end
$var wire 1 |! ip_instruction [12] $end
$var wire 1 }! ip_instruction [11] $end
$var wire 1 ~! ip_instruction [10] $end
$var wire 1 !" ip_instruction [9] $end
$var wire 1 "" ip_instruction [8] $end
$var wire 1 #" ip_instruction [7] $end
$var wire 1 $" ip_instruction [6] $end
$var wire 1 %" ip_instruction [5] $end
$var wire 1 &" ip_instruction [4] $end
$var wire 1 '" ip_instruction [3] $end
$var wire 1 (" ip_instruction [2] $end
$var wire 1 )" ip_instruction [1] $end
$var wire 1 *" ip_instruction [0] $end
$var reg 1 +" op_RegDst $end
$var reg 1 ," op_MemtoReg $end
$var reg 1 -" op_RegWrite $end
$var reg 1 ." op_read_en $end
$var reg 1 /" op_write_en $end
$var reg 1 0" op_branch $end
$var reg 1 1" op_ALU_src $end
$var reg 2 2" op_ALU_op [1:0] $end
$var reg 1 3" op_R_format $end
$var reg 1 4" op_I_format $end
$var reg 1 5" op_Lw $end
$var reg 1 6" op_Sw $end
$var reg 1 7" op_Beq $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 1 8" R_format $end
$var reg 1 9" I_format $end
$var reg 1 :" Lw $end
$var reg 1 ;" Sw $end
$var reg 1 <" Beq $end
$var reg 1 =" NOP $end
$var reg 1 >" sig_RegDst $end
$var reg 1 ?" sig_MemtoReg $end
$var reg 1 @" sig_RegWrite $end
$var reg 1 A" sig_read_en $end
$var reg 1 B" sig_write_en $end
$var reg 1 C" sig_branch $end
$var reg 1 D" sig_ALU_src $end
$var reg 2 E" sig_ALU_op [1:0] $end
$var reg 6 F" sig_opcode [5:0] $end
$var reg 1 G" reg_RegDst $end
$var reg 1 H" reg_MemtoReg $end
$var reg 1 I" reg_RegWrite $end
$var reg 1 J" reg_read_en $end
$var reg 1 K" reg_write_en $end
$var reg 1 L" reg_branch $end
$var reg 1 M" reg_ALU_src $end
$var reg 2 N" reg_ALU_op [1:0] $end
$upscope $end

$scope module my_IFETCH $end
$var parameter 32 O" PARAM_RAM_length $end
$var parameter 32 P" PARAM_RAM_addr_bits $end
$var wire 1 Q" ip_branch $end
$var wire 1 R" ip_stall $end
$var wire 1 S" ip_add_result [7] $end
$var wire 1 T" ip_add_result [6] $end
$var wire 1 U" ip_add_result [5] $end
$var wire 1 V" ip_add_result [4] $end
$var wire 1 W" ip_add_result [3] $end
$var wire 1 X" ip_add_result [2] $end
$var wire 1 Y" ip_add_result [1] $end
$var wire 1 Z" ip_add_result [0] $end
$var wire 1 [" ip_zero $end
$var reg 32 \" op_instruction [31:0] $end
$var reg 10 ]" op_PC [9:0] $end
$var reg 10 ^" op_PC_plus_4 [9:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 6 _" instr_mem_addr [5:0] $end
$var reg 32 `" sig_instruction [31:0] $end
$var reg 10 a" PC [9:0] $end
$var reg 10 b" Next_PC [9:0] $end
$var reg 32 c" reg_instruction [31:0] $end
$var reg 10 d" reg_PC [9:0] $end
$upscope $end

$scope module my_IDECODE $end
$var reg 6 e" op_function_opcode [5:0] $end
$var reg 10 f" op_PC_plus_4 [9:0] $end
$var reg 32 g" op_read_data_1 [31:0] $end
$var reg 32 h" op_read_data_2 [31:0] $end
$var reg 32 i" op_immediate [31:0] $end
$var reg 5 j" op_dest_reg_R_type [4:0] $end
$var reg 5 k" op_dest_reg_I_type [4:0] $end
$var reg 5 l" op_dec_rs [4:0] $end
$var reg 5 m" op_dec_rt [4:0] $end
$var wire 1 n" ip_PC_plus_4 [9] $end
$var wire 1 o" ip_PC_plus_4 [8] $end
$var wire 1 p" ip_PC_plus_4 [7] $end
$var wire 1 q" ip_PC_plus_4 [6] $end
$var wire 1 r" ip_PC_plus_4 [5] $end
$var wire 1 s" ip_PC_plus_4 [4] $end
$var wire 1 t" ip_PC_plus_4 [3] $end
$var wire 1 u" ip_PC_plus_4 [2] $end
$var wire 1 v" ip_PC_plus_4 [1] $end
$var wire 1 w" ip_PC_plus_4 [0] $end
$var wire 1 x" ip_instruction [31] $end
$var wire 1 y" ip_instruction [30] $end
$var wire 1 z" ip_instruction [29] $end
$var wire 1 {" ip_instruction [28] $end
$var wire 1 |" ip_instruction [27] $end
$var wire 1 }" ip_instruction [26] $end
$var wire 1 ~" ip_instruction [25] $end
$var wire 1 !# ip_instruction [24] $end
$var wire 1 "# ip_instruction [23] $end
$var wire 1 ## ip_instruction [22] $end
$var wire 1 $# ip_instruction [21] $end
$var wire 1 %# ip_instruction [20] $end
$var wire 1 &# ip_instruction [19] $end
$var wire 1 '# ip_instruction [18] $end
$var wire 1 (# ip_instruction [17] $end
$var wire 1 )# ip_instruction [16] $end
$var wire 1 *# ip_instruction [15] $end
$var wire 1 +# ip_instruction [14] $end
$var wire 1 ,# ip_instruction [13] $end
$var wire 1 -# ip_instruction [12] $end
$var wire 1 .# ip_instruction [11] $end
$var wire 1 /# ip_instruction [10] $end
$var wire 1 0# ip_instruction [9] $end
$var wire 1 1# ip_instruction [8] $end
$var wire 1 2# ip_instruction [7] $end
$var wire 1 3# ip_instruction [6] $end
$var wire 1 4# ip_instruction [5] $end
$var wire 1 5# ip_instruction [4] $end
$var wire 1 6# ip_instruction [3] $end
$var wire 1 7# ip_instruction [2] $end
$var wire 1 8# ip_instruction [1] $end
$var wire 1 9# ip_instruction [0] $end
$var wire 1 :# ip_stall $end
$var wire 1 ;# ip_write_reg_addr [4] $end
$var wire 1 <# ip_write_reg_addr [3] $end
$var wire 1 =# ip_write_reg_addr [2] $end
$var wire 1 ># ip_write_reg_addr [1] $end
$var wire 1 ?# ip_write_reg_addr [0] $end
$var wire 1 @# ip_write_data [31] $end
$var wire 1 A# ip_write_data [30] $end
$var wire 1 B# ip_write_data [29] $end
$var wire 1 C# ip_write_data [28] $end
$var wire 1 D# ip_write_data [27] $end
$var wire 1 E# ip_write_data [26] $end
$var wire 1 F# ip_write_data [25] $end
$var wire 1 G# ip_write_data [24] $end
$var wire 1 H# ip_write_data [23] $end
$var wire 1 I# ip_write_data [22] $end
$var wire 1 J# ip_write_data [21] $end
$var wire 1 K# ip_write_data [20] $end
$var wire 1 L# ip_write_data [19] $end
$var wire 1 M# ip_write_data [18] $end
$var wire 1 N# ip_write_data [17] $end
$var wire 1 O# ip_write_data [16] $end
$var wire 1 P# ip_write_data [15] $end
$var wire 1 Q# ip_write_data [14] $end
$var wire 1 R# ip_write_data [13] $end
$var wire 1 S# ip_write_data [12] $end
$var wire 1 T# ip_write_data [11] $end
$var wire 1 U# ip_write_data [10] $end
$var wire 1 V# ip_write_data [9] $end
$var wire 1 W# ip_write_data [8] $end
$var wire 1 X# ip_write_data [7] $end
$var wire 1 Y# ip_write_data [6] $end
$var wire 1 Z# ip_write_data [5] $end
$var wire 1 [# ip_write_data [4] $end
$var wire 1 \# ip_write_data [3] $end
$var wire 1 ]# ip_write_data [2] $end
$var wire 1 ^# ip_write_data [1] $end
$var wire 1 _# ip_write_data [0] $end
$var wire 1 `# ip_RegWrite $end
$var wire 1 a# ip_zero $end
$var wire 1 b# ip_branch $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 5 c# read_register_1_address [4:0] $end
$var reg 5 d# read_register_2_address [4:0] $end
$var reg 5 e# sig_dest_reg_R_type [4:0] $end
$var reg 5 f# sig_dest_reg_I_type [4:0] $end
$var reg 32 g# Instruction_immediate_value [31:0] $end
$var reg 6 h# sig_function_opcode [5:0] $end
$var reg 6 i# reg_function_opcode [5:0] $end
$var reg 10 j# reg_PC_plus_4 [9:0] $end
$var reg 32 k# reg_read_data_1 [31:0] $end
$var reg 32 l# reg_read_data_2 [31:0] $end
$var reg 32 m# reg_immediate [31:0] $end
$var reg 5 n# reg_dest_reg_R_type [4:0] $end
$var reg 5 o# reg_dest_reg_I_type [4:0] $end
$var reg 5 p# reg_dec_rs [4:0] $end
$var reg 5 q# reg_dec_rt [4:0] $end
$upscope $end

$scope module FWD_CONT $end
$var wire 1 r# ip_EX_MEM_RegWrite $end
$var wire 1 s# ip_MEM_WB_RegWrite $end
$var wire 1 t# ip_EX_MEM_dest [4] $end
$var wire 1 u# ip_EX_MEM_dest [3] $end
$var wire 1 v# ip_EX_MEM_dest [2] $end
$var wire 1 w# ip_EX_MEM_dest [1] $end
$var wire 1 x# ip_EX_MEM_dest [0] $end
$var wire 1 y# ip_MEM_WB_dest [4] $end
$var wire 1 z# ip_MEM_WB_dest [3] $end
$var wire 1 {# ip_MEM_WB_dest [2] $end
$var wire 1 |# ip_MEM_WB_dest [1] $end
$var wire 1 }# ip_MEM_WB_dest [0] $end
$var wire 1 ~# ip_DEC_DEST_RS [4] $end
$var wire 1 !$ ip_DEC_DEST_RS [3] $end
$var wire 1 "$ ip_DEC_DEST_RS [2] $end
$var wire 1 #$ ip_DEC_DEST_RS [1] $end
$var wire 1 $$ ip_DEC_DEST_RS [0] $end
$var wire 1 %$ ip_DEC_DEST_RT [4] $end
$var wire 1 &$ ip_DEC_DEST_RT [3] $end
$var wire 1 '$ ip_DEC_DEST_RT [2] $end
$var wire 1 ($ ip_DEC_DEST_RT [1] $end
$var wire 1 )$ ip_DEC_DEST_RT [0] $end
$var reg 2 *$ op_FA [1:0] $end
$var reg 2 +$ op_FB [1:0] $end
$var reg 1 ,$ dest_match_EX_MEM_A $end
$var reg 1 -$ dest_match_MEM_WB_A $end
$var reg 1 .$ dest_match_EX_MEM_B $end
$var reg 1 /$ dest_match_MEM_WB_B $end
$upscope $end

$scope module my_EXECUTE $end
$var wire 1 0$ ip_opcode [5] $end
$var wire 1 1$ ip_opcode [4] $end
$var wire 1 2$ ip_opcode [3] $end
$var wire 1 3$ ip_opcode [2] $end
$var wire 1 4$ ip_opcode [1] $end
$var wire 1 5$ ip_opcode [0] $end
$var wire 1 6$ ip_function_opcode [5] $end
$var wire 1 7$ ip_function_opcode [4] $end
$var wire 1 8$ ip_function_opcode [3] $end
$var wire 1 9$ ip_function_opcode [2] $end
$var wire 1 :$ ip_function_opcode [1] $end
$var wire 1 ;$ ip_function_opcode [0] $end
$var wire 1 <$ ip_PC_plus_4 [9] $end
$var wire 1 =$ ip_PC_plus_4 [8] $end
$var wire 1 >$ ip_PC_plus_4 [7] $end
$var wire 1 ?$ ip_PC_plus_4 [6] $end
$var wire 1 @$ ip_PC_plus_4 [5] $end
$var wire 1 A$ ip_PC_plus_4 [4] $end
$var wire 1 B$ ip_PC_plus_4 [3] $end
$var wire 1 C$ ip_PC_plus_4 [2] $end
$var wire 1 D$ ip_PC_plus_4 [1] $end
$var wire 1 E$ ip_PC_plus_4 [0] $end
$var wire 1 F$ ip_read_data_1 [31] $end
$var wire 1 G$ ip_read_data_1 [30] $end
$var wire 1 H$ ip_read_data_1 [29] $end
$var wire 1 I$ ip_read_data_1 [28] $end
$var wire 1 J$ ip_read_data_1 [27] $end
$var wire 1 K$ ip_read_data_1 [26] $end
$var wire 1 L$ ip_read_data_1 [25] $end
$var wire 1 M$ ip_read_data_1 [24] $end
$var wire 1 N$ ip_read_data_1 [23] $end
$var wire 1 O$ ip_read_data_1 [22] $end
$var wire 1 P$ ip_read_data_1 [21] $end
$var wire 1 Q$ ip_read_data_1 [20] $end
$var wire 1 R$ ip_read_data_1 [19] $end
$var wire 1 S$ ip_read_data_1 [18] $end
$var wire 1 T$ ip_read_data_1 [17] $end
$var wire 1 U$ ip_read_data_1 [16] $end
$var wire 1 V$ ip_read_data_1 [15] $end
$var wire 1 W$ ip_read_data_1 [14] $end
$var wire 1 X$ ip_read_data_1 [13] $end
$var wire 1 Y$ ip_read_data_1 [12] $end
$var wire 1 Z$ ip_read_data_1 [11] $end
$var wire 1 [$ ip_read_data_1 [10] $end
$var wire 1 \$ ip_read_data_1 [9] $end
$var wire 1 ]$ ip_read_data_1 [8] $end
$var wire 1 ^$ ip_read_data_1 [7] $end
$var wire 1 _$ ip_read_data_1 [6] $end
$var wire 1 `$ ip_read_data_1 [5] $end
$var wire 1 a$ ip_read_data_1 [4] $end
$var wire 1 b$ ip_read_data_1 [3] $end
$var wire 1 c$ ip_read_data_1 [2] $end
$var wire 1 d$ ip_read_data_1 [1] $end
$var wire 1 e$ ip_read_data_1 [0] $end
$var wire 1 f$ ip_read_data_2 [31] $end
$var wire 1 g$ ip_read_data_2 [30] $end
$var wire 1 h$ ip_read_data_2 [29] $end
$var wire 1 i$ ip_read_data_2 [28] $end
$var wire 1 j$ ip_read_data_2 [27] $end
$var wire 1 k$ ip_read_data_2 [26] $end
$var wire 1 l$ ip_read_data_2 [25] $end
$var wire 1 m$ ip_read_data_2 [24] $end
$var wire 1 n$ ip_read_data_2 [23] $end
$var wire 1 o$ ip_read_data_2 [22] $end
$var wire 1 p$ ip_read_data_2 [21] $end
$var wire 1 q$ ip_read_data_2 [20] $end
$var wire 1 r$ ip_read_data_2 [19] $end
$var wire 1 s$ ip_read_data_2 [18] $end
$var wire 1 t$ ip_read_data_2 [17] $end
$var wire 1 u$ ip_read_data_2 [16] $end
$var wire 1 v$ ip_read_data_2 [15] $end
$var wire 1 w$ ip_read_data_2 [14] $end
$var wire 1 x$ ip_read_data_2 [13] $end
$var wire 1 y$ ip_read_data_2 [12] $end
$var wire 1 z$ ip_read_data_2 [11] $end
$var wire 1 {$ ip_read_data_2 [10] $end
$var wire 1 |$ ip_read_data_2 [9] $end
$var wire 1 }$ ip_read_data_2 [8] $end
$var wire 1 ~$ ip_read_data_2 [7] $end
$var wire 1 !% ip_read_data_2 [6] $end
$var wire 1 "% ip_read_data_2 [5] $end
$var wire 1 #% ip_read_data_2 [4] $end
$var wire 1 $% ip_read_data_2 [3] $end
$var wire 1 %% ip_read_data_2 [2] $end
$var wire 1 &% ip_read_data_2 [1] $end
$var wire 1 '% ip_read_data_2 [0] $end
$var wire 1 (% ip_immediate [31] $end
$var wire 1 )% ip_immediate [30] $end
$var wire 1 *% ip_immediate [29] $end
$var wire 1 +% ip_immediate [28] $end
$var wire 1 ,% ip_immediate [27] $end
$var wire 1 -% ip_immediate [26] $end
$var wire 1 .% ip_immediate [25] $end
$var wire 1 /% ip_immediate [24] $end
$var wire 1 0% ip_immediate [23] $end
$var wire 1 1% ip_immediate [22] $end
$var wire 1 2% ip_immediate [21] $end
$var wire 1 3% ip_immediate [20] $end
$var wire 1 4% ip_immediate [19] $end
$var wire 1 5% ip_immediate [18] $end
$var wire 1 6% ip_immediate [17] $end
$var wire 1 7% ip_immediate [16] $end
$var wire 1 8% ip_immediate [15] $end
$var wire 1 9% ip_immediate [14] $end
$var wire 1 :% ip_immediate [13] $end
$var wire 1 ;% ip_immediate [12] $end
$var wire 1 <% ip_immediate [11] $end
$var wire 1 =% ip_immediate [10] $end
$var wire 1 >% ip_immediate [9] $end
$var wire 1 ?% ip_immediate [8] $end
$var wire 1 @% ip_immediate [7] $end
$var wire 1 A% ip_immediate [6] $end
$var wire 1 B% ip_immediate [5] $end
$var wire 1 C% ip_immediate [4] $end
$var wire 1 D% ip_immediate [3] $end
$var wire 1 E% ip_immediate [2] $end
$var wire 1 F% ip_immediate [1] $end
$var wire 1 G% ip_immediate [0] $end
$var wire 1 H% ip_dest_reg_R_type [4] $end
$var wire 1 I% ip_dest_reg_R_type [3] $end
$var wire 1 J% ip_dest_reg_R_type [2] $end
$var wire 1 K% ip_dest_reg_R_type [1] $end
$var wire 1 L% ip_dest_reg_R_type [0] $end
$var wire 1 M% ip_dest_reg_I_type [4] $end
$var wire 1 N% ip_dest_reg_I_type [3] $end
$var wire 1 O% ip_dest_reg_I_type [2] $end
$var wire 1 P% ip_dest_reg_I_type [1] $end
$var wire 1 Q% ip_dest_reg_I_type [0] $end
$var wire 1 R% ip_ALU_op [1] $end
$var wire 1 S% ip_ALU_op [0] $end
$var wire 1 T% ip_ALU_src $end
$var wire 1 U% ip_RegDst $end
$var wire 1 V% ip_MemtoReg $end
$var wire 1 W% ip_RegWrite $end
$var wire 1 X% ip_read_en $end
$var wire 1 Y% ip_write_en $end
$var wire 1 Z% ip_branch $end
$var reg 1 [% op_zero $end
$var reg 1 \% op_MemtoReg $end
$var reg 1 ]% op_RegWrite $end
$var reg 1 ^% op_read_en $end
$var reg 1 _% op_write_en $end
$var reg 1 `% op_branch $end
$var reg 32 a% op_ALU_result [31:0] $end
$var reg 8 b% op_Add_result [7:0] $end
$var reg 32 c% op_memory_write_data [31:0] $end
$var reg 5 d% op_dest_reg [4:0] $end
$var reg 32 e% op_A_input [31:0] $end
$var reg 32 f% op_B_input [31:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var wire 1 g% ALU_result_MEM [31] $end
$var wire 1 h% ALU_result_MEM [30] $end
$var wire 1 i% ALU_result_MEM [29] $end
$var wire 1 j% ALU_result_MEM [28] $end
$var wire 1 k% ALU_result_MEM [27] $end
$var wire 1 l% ALU_result_MEM [26] $end
$var wire 1 m% ALU_result_MEM [25] $end
$var wire 1 n% ALU_result_MEM [24] $end
$var wire 1 o% ALU_result_MEM [23] $end
$var wire 1 p% ALU_result_MEM [22] $end
$var wire 1 q% ALU_result_MEM [21] $end
$var wire 1 r% ALU_result_MEM [20] $end
$var wire 1 s% ALU_result_MEM [19] $end
$var wire 1 t% ALU_result_MEM [18] $end
$var wire 1 u% ALU_result_MEM [17] $end
$var wire 1 v% ALU_result_MEM [16] $end
$var wire 1 w% ALU_result_MEM [15] $end
$var wire 1 x% ALU_result_MEM [14] $end
$var wire 1 y% ALU_result_MEM [13] $end
$var wire 1 z% ALU_result_MEM [12] $end
$var wire 1 {% ALU_result_MEM [11] $end
$var wire 1 |% ALU_result_MEM [10] $end
$var wire 1 }% ALU_result_MEM [9] $end
$var wire 1 ~% ALU_result_MEM [8] $end
$var wire 1 !& ALU_result_MEM [7] $end
$var wire 1 "& ALU_result_MEM [6] $end
$var wire 1 #& ALU_result_MEM [5] $end
$var wire 1 $& ALU_result_MEM [4] $end
$var wire 1 %& ALU_result_MEM [3] $end
$var wire 1 && ALU_result_MEM [2] $end
$var wire 1 '& ALU_result_MEM [1] $end
$var wire 1 (& ALU_result_MEM [0] $end
$var wire 1 )& read_data_wb [31] $end
$var wire 1 *& read_data_wb [30] $end
$var wire 1 +& read_data_wb [29] $end
$var wire 1 ,& read_data_wb [28] $end
$var wire 1 -& read_data_wb [27] $end
$var wire 1 .& read_data_wb [26] $end
$var wire 1 /& read_data_wb [25] $end
$var wire 1 0& read_data_wb [24] $end
$var wire 1 1& read_data_wb [23] $end
$var wire 1 2& read_data_wb [22] $end
$var wire 1 3& read_data_wb [21] $end
$var wire 1 4& read_data_wb [20] $end
$var wire 1 5& read_data_wb [19] $end
$var wire 1 6& read_data_wb [18] $end
$var wire 1 7& read_data_wb [17] $end
$var wire 1 8& read_data_wb [16] $end
$var wire 1 9& read_data_wb [15] $end
$var wire 1 :& read_data_wb [14] $end
$var wire 1 ;& read_data_wb [13] $end
$var wire 1 <& read_data_wb [12] $end
$var wire 1 =& read_data_wb [11] $end
$var wire 1 >& read_data_wb [10] $end
$var wire 1 ?& read_data_wb [9] $end
$var wire 1 @& read_data_wb [8] $end
$var wire 1 A& read_data_wb [7] $end
$var wire 1 B& read_data_wb [6] $end
$var wire 1 C& read_data_wb [5] $end
$var wire 1 D& read_data_wb [4] $end
$var wire 1 E& read_data_wb [3] $end
$var wire 1 F& read_data_wb [2] $end
$var wire 1 G& read_data_wb [1] $end
$var wire 1 H& read_data_wb [0] $end
$var wire 1 I& MemtoReg_MEM $end
$var wire 1 J& FA [1] $end
$var wire 1 K& FA [0] $end
$var wire 1 L& FB [1] $end
$var wire 1 M& FB [0] $end
$var reg 32 N& A_input [31:0] $end
$var reg 32 O& B_input [31:0] $end
$var reg 3 P& ALU_ctl [2:0] $end
$var reg 32 Q& sig_ALU_result [31:0] $end
$var reg 1 R& sig_zero $end
$var reg 5 S& sig_dest_reg [4:0] $end
$var reg 8 T& sig_Add_result [7:0] $end
$var reg 32 U& reg_ALU_result [31:0] $end
$var reg 8 V& reg_Add_result [7:0] $end
$var reg 32 W& reg_memory_write_data [31:0] $end
$var reg 5 X& reg_dest_reg [4:0] $end
$var reg 1 Y& reg_zero $end
$var reg 1 Z& reg_MemtoReg $end
$var reg 1 [& reg_RegWrite $end
$var reg 1 \& reg_read_en $end
$var reg 1 ]& reg_write_en $end
$var reg 1 ^& reg_branch $end
$upscope $end

$scope module my_DMEMORY $end
$var parameter 32 _& PARAM_MEM_length $end
$var parameter 32 `& PARAM_RAM_addr_bits $end
$var wire 1 a& ip_MemtoReg $end
$var wire 1 b& ip_RegWrite $end
$var wire 1 c& ip_read_en $end
$var wire 1 d& ip_write_en $end
$var wire 1 e& ip_data [31] $end
$var wire 1 f& ip_data [30] $end
$var wire 1 g& ip_data [29] $end
$var wire 1 h& ip_data [28] $end
$var wire 1 i& ip_data [27] $end
$var wire 1 j& ip_data [26] $end
$var wire 1 k& ip_data [25] $end
$var wire 1 l& ip_data [24] $end
$var wire 1 m& ip_data [23] $end
$var wire 1 n& ip_data [22] $end
$var wire 1 o& ip_data [21] $end
$var wire 1 p& ip_data [20] $end
$var wire 1 q& ip_data [19] $end
$var wire 1 r& ip_data [18] $end
$var wire 1 s& ip_data [17] $end
$var wire 1 t& ip_data [16] $end
$var wire 1 u& ip_data [15] $end
$var wire 1 v& ip_data [14] $end
$var wire 1 w& ip_data [13] $end
$var wire 1 x& ip_data [12] $end
$var wire 1 y& ip_data [11] $end
$var wire 1 z& ip_data [10] $end
$var wire 1 {& ip_data [9] $end
$var wire 1 |& ip_data [8] $end
$var wire 1 }& ip_data [7] $end
$var wire 1 ~& ip_data [6] $end
$var wire 1 !' ip_data [5] $end
$var wire 1 "' ip_data [4] $end
$var wire 1 #' ip_data [3] $end
$var wire 1 $' ip_data [2] $end
$var wire 1 %' ip_data [1] $end
$var wire 1 &' ip_data [0] $end
$var wire 1 '' ip_ALU_output [31] $end
$var wire 1 (' ip_ALU_output [30] $end
$var wire 1 )' ip_ALU_output [29] $end
$var wire 1 *' ip_ALU_output [28] $end
$var wire 1 +' ip_ALU_output [27] $end
$var wire 1 ,' ip_ALU_output [26] $end
$var wire 1 -' ip_ALU_output [25] $end
$var wire 1 .' ip_ALU_output [24] $end
$var wire 1 /' ip_ALU_output [23] $end
$var wire 1 0' ip_ALU_output [22] $end
$var wire 1 1' ip_ALU_output [21] $end
$var wire 1 2' ip_ALU_output [20] $end
$var wire 1 3' ip_ALU_output [19] $end
$var wire 1 4' ip_ALU_output [18] $end
$var wire 1 5' ip_ALU_output [17] $end
$var wire 1 6' ip_ALU_output [16] $end
$var wire 1 7' ip_ALU_output [15] $end
$var wire 1 8' ip_ALU_output [14] $end
$var wire 1 9' ip_ALU_output [13] $end
$var wire 1 :' ip_ALU_output [12] $end
$var wire 1 ;' ip_ALU_output [11] $end
$var wire 1 <' ip_ALU_output [10] $end
$var wire 1 =' ip_ALU_output [9] $end
$var wire 1 >' ip_ALU_output [8] $end
$var wire 1 ?' ip_ALU_output [7] $end
$var wire 1 @' ip_ALU_output [6] $end
$var wire 1 A' ip_ALU_output [5] $end
$var wire 1 B' ip_ALU_output [4] $end
$var wire 1 C' ip_ALU_output [3] $end
$var wire 1 D' ip_ALU_output [2] $end
$var wire 1 E' ip_ALU_output [1] $end
$var wire 1 F' ip_ALU_output [0] $end
$var wire 1 G' ip_dest_reg [4] $end
$var wire 1 H' ip_dest_reg [3] $end
$var wire 1 I' ip_dest_reg [2] $end
$var wire 1 J' ip_dest_reg [1] $end
$var wire 1 K' ip_dest_reg [0] $end
$var reg 1 L' op_MemtoReg $end
$var reg 1 M' op_RegWrite $end
$var reg 32 N' op_data [31:0] $end
$var reg 32 O' op_ALU_output [31:0] $end
$var reg 5 P' op_dest_reg [4:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$var reg 8 Q' data_RAM_addr [7:0] $end
$var reg 32 R' sig_data [31:0] $end
$var reg 1 S' reg_MemtoReg $end
$var reg 1 T' reg_RegWrite $end
$var reg 32 U' reg_data [31:0] $end
$var reg 32 V' reg_ALU_output [31:0] $end
$var reg 5 W' reg_dest_reg [4:0] $end
$upscope $end

$scope module my_WRITE_BACK $end
$var wire 1 X' ip_MemtoReg $end
$var wire 1 Y' ip_RegWrite $end
$var wire 1 Z' ip_memory_data [31] $end
$var wire 1 [' ip_memory_data [30] $end
$var wire 1 \' ip_memory_data [29] $end
$var wire 1 ]' ip_memory_data [28] $end
$var wire 1 ^' ip_memory_data [27] $end
$var wire 1 _' ip_memory_data [26] $end
$var wire 1 `' ip_memory_data [25] $end
$var wire 1 a' ip_memory_data [24] $end
$var wire 1 b' ip_memory_data [23] $end
$var wire 1 c' ip_memory_data [22] $end
$var wire 1 d' ip_memory_data [21] $end
$var wire 1 e' ip_memory_data [20] $end
$var wire 1 f' ip_memory_data [19] $end
$var wire 1 g' ip_memory_data [18] $end
$var wire 1 h' ip_memory_data [17] $end
$var wire 1 i' ip_memory_data [16] $end
$var wire 1 j' ip_memory_data [15] $end
$var wire 1 k' ip_memory_data [14] $end
$var wire 1 l' ip_memory_data [13] $end
$var wire 1 m' ip_memory_data [12] $end
$var wire 1 n' ip_memory_data [11] $end
$var wire 1 o' ip_memory_data [10] $end
$var wire 1 p' ip_memory_data [9] $end
$var wire 1 q' ip_memory_data [8] $end
$var wire 1 r' ip_memory_data [7] $end
$var wire 1 s' ip_memory_data [6] $end
$var wire 1 t' ip_memory_data [5] $end
$var wire 1 u' ip_memory_data [4] $end
$var wire 1 v' ip_memory_data [3] $end
$var wire 1 w' ip_memory_data [2] $end
$var wire 1 x' ip_memory_data [1] $end
$var wire 1 y' ip_memory_data [0] $end
$var wire 1 z' ip_ALU_result [31] $end
$var wire 1 {' ip_ALU_result [30] $end
$var wire 1 |' ip_ALU_result [29] $end
$var wire 1 }' ip_ALU_result [28] $end
$var wire 1 ~' ip_ALU_result [27] $end
$var wire 1 !( ip_ALU_result [26] $end
$var wire 1 "( ip_ALU_result [25] $end
$var wire 1 #( ip_ALU_result [24] $end
$var wire 1 $( ip_ALU_result [23] $end
$var wire 1 %( ip_ALU_result [22] $end
$var wire 1 &( ip_ALU_result [21] $end
$var wire 1 '( ip_ALU_result [20] $end
$var wire 1 (( ip_ALU_result [19] $end
$var wire 1 )( ip_ALU_result [18] $end
$var wire 1 *( ip_ALU_result [17] $end
$var wire 1 +( ip_ALU_result [16] $end
$var wire 1 ,( ip_ALU_result [15] $end
$var wire 1 -( ip_ALU_result [14] $end
$var wire 1 .( ip_ALU_result [13] $end
$var wire 1 /( ip_ALU_result [12] $end
$var wire 1 0( ip_ALU_result [11] $end
$var wire 1 1( ip_ALU_result [10] $end
$var wire 1 2( ip_ALU_result [9] $end
$var wire 1 3( ip_ALU_result [8] $end
$var wire 1 4( ip_ALU_result [7] $end
$var wire 1 5( ip_ALU_result [6] $end
$var wire 1 6( ip_ALU_result [5] $end
$var wire 1 7( ip_ALU_result [4] $end
$var wire 1 8( ip_ALU_result [3] $end
$var wire 1 9( ip_ALU_result [2] $end
$var wire 1 :( ip_ALU_result [1] $end
$var wire 1 ;( ip_ALU_result [0] $end
$var wire 1 <( ip_dest_reg [4] $end
$var wire 1 =( ip_dest_reg [3] $end
$var wire 1 >( ip_dest_reg [2] $end
$var wire 1 ?( ip_dest_reg [1] $end
$var wire 1 @( ip_dest_reg [0] $end
$var reg 1 A( op_RegWrite $end
$var reg 32 B( op_write_data [31:0] $end
$var reg 5 C( op_dest_reg [4:0] $end
$var wire 1 < clock $end
$var wire 1 = reset $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1!
1"
b0 $
b0 %
b0 &
b0 '
bx (
b0 )
b0 *
b0 +
x,
0-
x.
x/
00
x1
x2
x3
b0 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
bx ;
b0 >
b0 ?
b0 @
b0 A
bx B
b0 C
b0 D
b0 E
xF
0G
xH
xI
0J
xK
xL
xM
b0 N
b0 O
b0 P
b0 Q
b0 R
b0 S
bx T
b100 U
b0 V
b0 W
b0 X
b0 Y
b0 Z
b0 [
b0 \
bx ]
bx ^
b0 _
b0 `
xa
xb
0c
xd
xe
0f
xg
0h
xi
0j
xk
xl
0m
bx n
b0 o
xp
1q
0r
0s
0t
0u
b0 v
b0 w
0x
xy
xz
b0 {
bx |
bx }
b0 ~
bx !!
b0 "!
b0 #!
b0 $!
b0 %!
b0 &!
x_!
b0 `!
b0 a!
b0 b!
1c!
1d!
xe!
xf!
xg!
xh!
x+"
x,"
x-"
x."
x/"
x0"
x1"
bx 2"
13"
04"
05"
06"
07"
18"
09"
0:"
0;"
0<"
1="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
b10 E"
b0 F"
xG"
xH"
xI"
xJ"
xK"
xL"
xM"
bx N"
b0 \"
b0 ]"
b100 ^"
b1 _"
bx `"
b0 a"
b100 b"
b0 c"
b0 d"
b0 e"
b0 f"
b0 g"
b0 h"
b0 i"
b0 j"
b0 k"
b0 l"
b0 m"
b0 c#
b0 d#
b0 e#
b0 f#
b0 g#
b0 h#
b0 i#
b0 j#
b0 k#
b0 l#
b0 m#
b0 n#
b0 o#
b0 p#
b0 q#
b0 *$
b0 +$
1,$
x-$
1.$
x/$
0[%
0\%
0]%
0^%
0_%
0`%
b0 a%
b0 b%
b0 c%
b0 d%
b0 e%
b0 f%
b0 N&
b0 O&
bx10 P&
b0 Q&
1R&
b0 S&
b0 T&
b0 U&
b0 V&
b0 W&
b0 X&
0Y&
0Z&
0[&
0\&
0]&
0^&
xL'
xM'
bx N'
bx O'
bx P'
b0 Q'
b0 R'
xS'
xT'
bx U'
bx V'
bx W'
xA(
bx B(
bx C(
b1000000 O"
b110 P"
b100000000 _&
b1000 `&
b100000 #
1=
1<
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
1G!
0H!
0I!
0J!
0K!
x^!
xL!
0M!
xN!
0S!
0R!
0Q!
0P!
0O!
0X!
0W!
0V!
0U!
0T!
x]!
x\!
x[!
xZ!
xY!
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0Q"
xR"
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0["
0w"
0v"
1u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
x:#
x?#
x>#
x=#
x<#
x;#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x`#
za#
zb#
0r#
xs#
0x#
0w#
0v#
0u#
0t#
x}#
x|#
x{#
xz#
xy#
0$$
0#$
0"$
0!$
0~#
0)$
0($
0'$
0&$
0%$
0;$
0:$
09$
08$
07$
06$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0L%
0K%
0J%
0I%
0H%
0Q%
0P%
0O%
0N%
0M%
xS%
xR%
xT%
xU%
xV%
xW%
xX%
xY%
xZ%
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
xI&
0K&
0J&
0M&
0L&
z5$
z4$
z3$
z2$
z1$
z0$
0a&
0b&
0c&
0d&
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0*'
0)'
0('
0''
0K'
0J'
0I'
0H'
0G'
xX'
xY'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
x@(
x?(
x>(
x=(
x<(
$end
#1000
0!
0<
#2000
1!
1<
0G"
0H"
0I"
0J"
0K"
0L"
0M"
b10 N"
b0 `"
b0 U'
b0 V'
b0 W'
0S'
0T'
0M'
0L'
b0 P'
b0 O'
b0 N'
b10 2"
01"
00"
0/"
0."
0-"
0,"
0+"
0d
0i
0e
0l
0g
0b
0a
b10 n
b0 ^
b0 ]
b0 |
0k
0y
b0 T
0F
0H
0I
0L
0U%
0V%
0^!
0W%
0L!
0X%
0Y%
0Z%
0]!
0\!
0[!
0Z!
0Y!
0}#
0|#
0{#
0z#
0y#
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0S%
1R%
0X'
0I&
0Y'
0N!
0A(
b10 P&
b0 B(
b0 C(
1-$
1/$
0e!
0g!
0f!
0h!
02
0/
0.
0,
b0 ;
0_!
b0 }
b0 !!
0z
0K
b0 B
0p
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0`#
0M
b0 (
01
0:#
03
0T%
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0s#
0R"
#3000
0!
0<
#4000
1!
1<
#5000
0"
0=
0!
0<
#6000
1!
1<
b100 a"
b100 j#
1Y&
b1 4
1[%
b100 f"
b100 V
1f
1G
1C$
b100 T&
1-
1["
b1000 b"
b10 _"
#7000
0!
0<
#8000
1!
1<
b1000 a"
b100 d"
b100 V&
b10 4
b100 b%
b100 ]"
b1000 ^"
b1000 U
b100 >
b100 [
b100 $
0u"
1t"
1X"
b1100 b"
b11 _"
#9000
0!
0<
#10000
1!
1<
b10001100000000100000000000000000 `"
b1100 a"
b1000 d"
b1000 j#
b11 4
b1000 f"
b1000 ]"
b1100 ^"
b1100 U
b1000 >
b1000 V
b1000 $
0C$
1B$
1u"
b1000 T&
b10000 b"
b100 _"
#11000
0!
0<
#12000
1!
1<
b1000100001100000100000 `"
b10000 a"
b10001100000000100000000000000000 c"
b1100 d"
b1100 j#
b1000 V&
b100 4
b1000 b%
b1100 f"
b1100 ]"
b10000 ^"
b10001100000000100000000000000000 \"
b10001100000000100000000000000000 o
b10000 U
b1100 >
b1100 V
b1000 [
b1100 $
b10001100000000100000000000000000 C
1C$
0u"
0t"
1s"
15!
1,!
1+!
1'!
1w!
1n!
1m!
1i!
1(#
1}"
1|"
1x"
b10 d#
b10 f#
b100011 F"
0="
b100011 `!
b10 b!
b1100 T&
b10001100000000100000000000000000 )
1>"
1@"
08"
1:"
1?"
1A"
15"
1D"
b0 E"
03"
0>"
0q
1s
0G!
1I!
0d!
0X"
1W"
b10100 b"
b101 _"
#13000
0!
0<
#14000
1!
1<
1H"
1I"
1J"
1M"
b0 N"
b0 `"
b10100 a"
b1000100001100000100000 c"
b10000 d"
b10000 j#
b10 l#
b10 o#
b10 q#
b1100 V&
b101 4
b1100 b%
b10 m"
b10 k"
b10 h"
b10000 f"
b10000 ]"
b10100 ^"
b1000100001100000100000 \"
b0 2"
11"
1."
1-"
1,"
1i
1e
1l
1a
b0 n
b1000100001100000100000 o
b10100 U
b10000 >
b10000 V
b10 Y
b10 w
b10 "!
b1100 [
b10 N
b10 &!
b10 A
b10000 $
b1000100001100000100000 C
1I
1L
1V%
1^!
1W%
1L!
1X%
1P%
0C$
0B$
1A$
1u"
1A!
1;!
1:!
11!
0,!
0+!
0'!
1%"
1}!
1|!
1s!
0n!
0m!
0i!
14#
1.#
1-#
1$#
0}"
0|"
0x"
0R%
b1 c#
b11 e#
b1100000100000 g#
b100000 h#
b0 F"
b0 `!
b1 a!
b10000 T&
b10 S&
12
1/
b1000100001100000100000 )
b10 '
b10 R
b10 6
1R!
b10 7
18"
0:"
0?"
0A"
05"
0D"
b10 E"
13"
1>"
1q
0s
1G!
0I!
1d!
1g!
1h!
1_!
1p
1M
1:#
b0 e#
13
1T%
1X"
1($
1&%
1R"
0.$
0/$
#15000
0!
0<
#16000
1!
1<
1G"
0H"
0J"
0M"
b10 N"
b100000 i#
b10100 j#
b1 k#
b1100000100000 m#
b1 p#
b10000 V&
b10 W&
b10 X&
1Z&
1[&
1\&
b110 4
1^%
1]%
1\%
b10 d%
b10 c%
b10000 b%
b1 l"
b1100000100000 i"
b1 g"
b10100 f"
b100000 e"
b10 2"
01"
0."
0,"
1+"
1d
0i
0l
0a
b10 n
b100000 W
b10100 V
b1 X
b1100000100000 Z
b1 #!
b10000 [
b10 ~
b10 {
1j
1x
1m
1J
b10 S
b1 O
b1 @
0L
b0 &!
1U%
0V%
0^!
0X%
1W!
1w#
1J'
1%'
1C$
16$
1R%
1a&
1b&
1M!
1c&
b1010101 R'
b101010101010101 R'
b10101010101010101010101 R'
b1010101010101010101010101010101 R'
b10100 T&
0,$
1.$
0h!
b0 S&
b0 R
02
b1 &
b1 5
b10 :
10
0R!
0g!
b0 7
0_!
0p
0M
0:#
b11 e#
03
0T%
0X"
0W"
1V"
1$$
1B%
1<%
1;%
1e$
1r#
0R"
b10010100 T&
0-$
b1 N&
b10 O&
b10 +$
b10 %!
b10 f%
b1 e%
b1 _
b10 `
b10 Q
b10 9
b10 E
b1 D
b1 *
b10 +
1L&
b0 O&
b1 Q&
0R&
b0 f%
b0 `
b0 E
b0 +
b11000 b"
b110 _"
#17000
0!
0<
#18000
1!
1<
b11000 a"
b0 c"
b10100 d"
b11 n#
b1 U&
b10010100 V&
b0 X&
0Y&
0Z&
0\&
b1010101010101010101010101010101 U'
b10 W'
1S'
1T'
b111 4
1M'
1L'
b10 P'
b1010101010101010101010101010101 N'
0^%
0\%
0[%
b0 d%
b10010100 b%
b1 a%
b11 j"
b10100 ]"
b11000 ^"
b0 \"
b0 o
b11000 U
b10100 >
b11 v
b1 \
b10010100 [
b0 {
0f
0j
0m
b1010101010101010101010101010101 ^
b10 |
1k
1y
b10 T
0G
b0 S
b1 ?
b11 &!
b10100 $
b0 C
0a&
0c&
1\!
1|#
1?(
1y'
1w'
1u'
1s'
1q'
1o'
1m'
1k'
1i'
1g'
1e'
1c'
1a'
1_'
1]'
1['
0W!
0w#
0J'
1F'
1L%
1K%
0u"
1t"
0A!
0;!
0:!
05!
01!
0%"
0}!
0|!
0w!
0s!
04#
0.#
0-#
0(#
0$#
1X'
1I&
1Y'
1N!
1A(
b0 c#
b0 d#
b0 f#
b0 e#
b0 g#
b0 h#
1="
b0 a!
b0 b!
b11 S&
b1 Q'
0.$
b1010101010101010101010101010101 B(
b10 C(
1/$
b1010101010101010101010100000000 R'
b1010101010101010000000000000000 R'
b1010101000000000000000000000000 R'
b0 R'
b0 )
b11 R
b1 %
b0 :
0-
b10 ;
1S!
1R!
b11 7
b10 }
b1010101010101010101010101010101 !!
0>"
0@"
1z
1K
b1010101010101010101010101010101 B
1_#
1]#
1[#
1Y#
1W#
1U#
1S#
1Q#
1O#
1M#
1K#
1I#
1G#
1E#
1C#
1A#
1>#
1`#
b1010101010101010101010101010101 (
11
0["
1H&
1F&
1D&
1B&
1@&
1>&
1<&
1:&
18&
16&
14&
12&
10&
1.&
1,&
1*&
1X"
1S"
1s#
b1 +$
b1 %!
b1 Q
b1 9
1M&
0L&
b1010101010101010101010101010101 O&
b1010101010101010101010101010101 f%
b1010101010101010101010101010101 `
b1010101010101010101010101010101 E
b1010101010101010101010101010101 +
b1010101010101010101010101010110 Q&
b11100 b"
b111 _"
#19000
0!
0<
#20000
1!
1<
0G"
0I"
b11100 a"
b11000 d"
b0 i#
b11000 j#
b0 k#
b0 l#
b0 m#
b0 n#
b0 o#
b0 p#
b0 q#
b1010101010101010101010101010110 U&
b11 X&
b0 U'
b1 V'
b0 W'
0S'
b1000 4
0L'
b0 P'
b1 O'
b0 N'
b11 d%
b1010101010101010101010101010110 a%
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b11000 f"
b0 e"
b11000 ]"
b11100 ^"
0-"
0+"
0d
0e
b11100 U
b11000 >
b0 W
b11000 V
b0 X
b0 Y
b0 Z
b0 v
b0 w
b0 #!
b0 "!
b1010101010101010101010101010110 \
b11 {
b0 ^
b1 ]
b0 |
0k
b0 T
b11 S
b1010101010101010101010101010110 ?
b0 N
b0 O
b0 A
b0 @
b11000 $
0I
b0 &!
0U%
0W%
0L!
0\!
0|#
0?(
1;(
0y'
0w'
0u'
0s'
0q'
0o'
0m'
0k'
0i'
0g'
0e'
0c'
0a'
0_'
0]'
0['
1X!
1W!
1x#
1w#
1K'
1J'
0F'
1E'
1D'
1B'
1@'
1>'
1<'
1:'
18'
16'
14'
12'
10'
1.'
1,'
1*'
1('
0P%
0L%
0K%
0C$
1B$
06$
1u"
0X'
0I&
b10011000 T&
b1010110 Q'
b1 B(
b0 C(
0/$
b0 S&
b0 R
0/
b0 &
b0 '
b0 5
b0 6
b1010101010101010101010101010110 %
b11 :
b0 ;
0S!
0R!
b0 7
b0 }
b1 !!
b1 B
0]#
0[#
0Y#
0W#
0U#
0S#
0Q#
0O#
0M#
0K#
0I#
0G#
0E#
0C#
0A#
0>#
b1 (
1(&
0H&
0F&
0D&
0B&
0@&
0>&
0<&
0:&
08&
06&
04&
02&
00&
0.&
0,&
0*&
0($
0$$
0B%
0<%
0;%
0&%
0e$
b11000 T&
1-$
1/$
b0 N&
b0 O&
b0 +$
b0 %!
b0 f%
b0 e%
b0 _
b0 `
b0 Q
b0 9
b0 E
b0 D
b0 *
b0 +
0M&
b0 Q&
1R&
b100000 b"
b1000 _"
#21000
0!
0<
#22000
1!
1<
b100000 a"
b11100 d"
b11100 j#
b0 U&
b11000 V&
b0 W&
b0 X&
1Y&
0[&
b1010101010101010101010101010110 V'
b11 W'
b1001 4
b11 P'
b1010101010101010101010101010110 O'
0]%
1[%
b0 d%
b0 c%
b11000 b%
b0 a%
b11100 f"
b11100 ]"
b100000 ^"
b100000 U
b11100 >
b11100 V
b0 \
b11000 [
b0 ~
b0 {
1f
0x
b1010101010101010101010101010110 ]
b11 |
b11 T
0J
1G
b0 S
b0 ?
b11100 $
0b&
0M!
1]!
1\!
1}#
1|#
1@(
1?(
0;(
1:(
19(
17(
15(
13(
11(
1/(
1-(
1+(
1)(
1'(
1%(
1#(
1!(
1}'
1{'
0X!
0W!
0x#
0w#
0K'
0J'
0%'
0E'
0D'
0B'
0@'
0>'
0<'
0:'
08'
06'
04'
02'
00'
0.'
0,'
0*'
0('
1C$
0u"
0t"
0s"
1r"
b11100 T&
b0 Q'
1,$
1.$
b1010101010101010101010101010110 B(
b11 C(
0-$
0/$
b0 %
b0 :
1-
00
b11 ;
b11 }
b1010101010101010101010101010110 !!
b1010101010101010101010101010110 B
0_#
1^#
1]#
1[#
1Y#
1W#
1U#
1S#
1Q#
1O#
1M#
1K#
1I#
1G#
1E#
1C#
1A#
1?#
1>#
b1010101010101010101010101010110 (
1["
0r#
0(&
1'&
1&&
1$&
1"&
1~%
1|%
1z%
1x%
1v%
1t%
1r%
1p%
1n%
1l%
1j%
1h%
0X"
1W"
0S"
b100100 b"
b1001 _"
#23000
0!
0<
#24000
1!
1<
b100100 a"
b100000 d"
b100000 j#
b11100 V&
b0 V'
b0 W'
0T'
b1010 4
0M'
b0 P'
b0 O'
b11100 b%
b100000 f"
b100000 ]"
b100100 ^"
b100100 U
b100000 >
b100000 V
b11100 [
b0 ]
b0 |
0y
b0 T
b100000 $
0]!
0\!
0}#
0|#
0@(
0?(
0:(
09(
07(
05(
03(
01(
0/(
0-(
0+(
0)(
0'(
0%(
0#(
0!(
0}'
0{'
0C$
0B$
0A$
1@$
1u"
0Y'
0N!
0A(
b100000 T&
b0 B(
b0 C(
1-$
1/$
b0 ;
b0 }
b0 !!
0z
0K
b0 B
0^#
0]#
0[#
0Y#
0W#
0U#
0S#
0Q#
0O#
0M#
0K#
0I#
0G#
0E#
0C#
0A#
0?#
0>#
0`#
b0 (
01
0'&
0&&
0$&
0"&
0~%
0|%
0z%
0x%
0v%
0t%
0r%
0p%
0n%
0l%
0j%
0h%
1X"
0s#
b101000 b"
b1010 _"
#25000
0!
0<
#26000
1!
1<
b110001100000100000 `"
b101000 a"
b100100 d"
b100100 j#
b100000 V&
b1011 4
b100000 b%
b100100 f"
b100100 ]"
b101000 ^"
b101000 U
b100100 >
b100100 V
b100000 [
b100100 $
1C$
0u"
1t"
b100100 T&
0X"
0W"
0V"
1U"
b101100 b"
b1011 _"
#27000
0!
0<
#28000
1!
1<
b0 `"
b101100 a"
b110001100000100000 c"
b101000 d"
b101000 j#
b100100 V&
b1100 4
b100100 b%
b101000 f"
b101000 ]"
b101100 ^"
b110001100000100000 \"
b110001100000100000 o
b101100 U
b101000 >
b101000 V
b100100 [
b101000 $
b110001100000100000 C
0C$
1B$
1u"
1A!
1;!
1:!
16!
15!
1%"
1}!
1|!
1x!
1w!
14#
1.#
1-#
1)#
1(#
b11 d#
b11 f#
b11 e#
b1100000100000 g#
b100000 h#
0="
b11 b!
b101000 T&
b110001100000100000 )
1>"
1@"
1X"
b110000 b"
b1100 _"
#29000
0!
0<
#30000
1!
1<
1G"
1I"
b110000 a"
b0 c"
b101100 d"
b100000 i#
b101100 j#
b1010101010101010101010101010110 l#
b1100000100000 m#
b11 n#
b11 o#
b11 q#
b101000 V&
b1101 4
b101000 b%
b11 m"
b11 k"
b11 j"
b1100000100000 i"
b1010101010101010101010101010110 h"
b101100 f"
b100000 e"
b101100 ]"
b110000 ^"
b0 \"
1-"
1+"
1d
1e
b0 o
b110000 U
b101100 >
b100000 W
b101100 V
b1010101010101010101010101010110 Y
b1100000100000 Z
b11 v
b11 w
b11 "!
b101000 [
b11 N
b1010101010101010101010101010110 A
b101100 $
b0 C
1I
b11 &!
1U%
1W%
1L!
1Q%
1P%
1L%
1K%
1C$
16$
0u"
0t"
1s"
0A!
0;!
0:!
06!
05!
0%"
0}!
0|!
0x!
0w!
04#
0.#
0-#
0)#
0(#
b0 d#
b0 f#
b0 e#
b0 g#
b0 h#
1="
b0 b!
b101100 T&
1e!
1g!
b11 S&
b11 R
1/
b0 )
b1010101010101010101010101010110 '
b11 6
1S!
1R!
0e!
0g!
b11 7
0>"
0@"
0X"
1W"
1)$
1($
1B%
1<%
1;%
1&%
1%%
1#%
1!%
1}$
1{$
1y$
1w$
1u$
1s$
1q$
1o$
1m$
1k$
1i$
1g$
b10101100 T&
0.$
0/$
b1010101010101010101010101010110 O&
b1010101010101010101010101010110 f%
b1010101010101010101010101010110 `
b1010101010101010101010101010110 E
b1010101010101010101010101010110 +
b1010101010101010101010101010110 Q&
0R&
b110100 b"
b1101 _"
#31000
0!
0<
#32000
1!
1<
0G"
0I"
b110100 a"
b110000 d"
b0 i#
b110000 j#
b0 l#
b0 m#
b0 n#
b0 o#
b0 q#
b1010101010101010101010101010110 U&
b10101100 V&
b1010101010101010101010101010110 W&
b11 X&
0Y&
1[&
b1110 4
1]%
0[%
b11 d%
b1010101010101010101010101010110 c%
b10101100 b%
b1010101010101010101010101010110 a%
b0 m"
b0 k"
b0 j"
b0 i"
b0 h"
b110000 f"
b0 e"
b110000 ]"
b110100 ^"
0-"
0+"
0d
0e
b110100 U
b110000 >
b0 W
b110000 V
b0 Y
b0 Z
b0 v
b0 w
b0 "!
b1010101010101010101010101010110 \
b10101100 [
b1010101010101010101010101010110 ~
b11 {
0f
1x
1J
0G
b11 S
b1010101010101010101010101010110 ?
b0 N
b0 A
b110000 $
0I
b0 &!
0U%
0W%
0L!
1X!
1W!
1x#
1w#
1K'
1J'
1%'
1$'
1"'
1~&
1|&
1z&
1x&
1v&
1t&
1r&
1p&
1n&
1l&
1j&
1h&
1f&
1E'
1D'
1B'
1@'
1>'
1<'
1:'
18'
16'
14'
12'
10'
1.'
1,'
1*'
1('
0Q%
0P%
0L%
0K%
0C$
0B$
1A$
06$
1u"
1b&
1M!
b10110000 T&
b1010110 Q'
0,$
1.$
b0 S&
b0 R
0/
b0 '
b0 6
b1010101010101010101010101010110 %
b11 :
0-
10
0S!
0R!
b0 7
1X"
1S"
0)$
0($
0B%
0<%
0;%
0&%
0%%
0#%
0!%
0}$
0{$
0y$
0w$
0u$
0s$
0q$
0o$
0m$
0k$
0i$
0g$
0["
1r#
b110000 T&
0.$
1/$
b0 O&
b0 f%
b0 `
b0 E
b0 +
b0 Q&
1R&
b111000 b"
b1110 _"
#33000
0!
0<
#34000
1!
1<
b111000 a"
b110100 d"
b110100 j#
b0 U&
b110000 V&
b0 W&
b0 X&
1Y&
0[&
b1010101010101010101010101010110 V'
b11 W'
1T'
b1111 4
1M'
b11 P'
b1010101010101010101010101010110 O'
0]%
1[%
b0 d%
b0 c%
b110000 b%
b0 a%
b110100 f"
b110100 ]"
b111000 ^"
b111000 U
b110100 >
b110100 V
b0 \
b110000 [
b0 ~
b0 {
1f
0x
b1010101010101010101010101010110 ]
b11 |
1y
b11 T
0J
1G
b0 S
b0 ?
b110100 $
0b&
0M!
1]!
1\!
1}#
1|#
1@(
1?(
1:(
19(
17(
15(
13(
11(
1/(
1-(
1+(
1)(
1'(
1%(
1#(
1!(
1}'
1{'
0X!
0W!
0x#
0w#
0K'
0J'
0%'
0$'
0"'
0~&
0|&
0z&
0x&
0v&
0t&
0r&
0p&
0n&
0l&
0j&
0h&
0f&
0E'
0D'
0B'
0@'
0>'
0<'
0:'
08'
06'
04'
02'
00'
0.'
0,'
0*'
0('
1C$
0u"
1t"
1Y'
1N!
1A(
b110100 T&
b0 Q'
1,$
1.$
b1010101010101010101010101010110 B(
b11 C(
0-$
0/$
b0 %
b0 :
1-
00
b11 ;
b11 }
b101010101